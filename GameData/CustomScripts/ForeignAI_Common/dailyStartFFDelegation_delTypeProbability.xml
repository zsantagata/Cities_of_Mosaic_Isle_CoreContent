<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>
	<customconsts name="default">
		<mCustomVariableList kind="add">
			<!-- consts related to this file's scripts can have any name (though they probably shouldn't overwrite other consts) -->
			
			<!-- these are the starting probabilities that a community will send a delegation of each kind -->
			<!-- foreign AI and variables might have multipliers for these rates, but foreign AI multiplier isn't calculated here -->
			<i1><a>dailystartffdelegation war base prob</a> <b>double</b> <c>0.005</c></i1> <!-- average of 1 each 200 days per community -->
			<i1><a>dailystartffdelegation raiding base prob</a> <b>double</b> <c>0.01</c></i1> <!-- average of 1 each 100 days per community -->
			<i1><a>dailystartffdelegation trade base prob</a> <b>double</b> <c>0.025</c></i1> <!-- average of 1 each 40 days per community -->
			<i1><a>dailystartffdelegation emigration base prob</a> <b>double</b> <c>0.00555</c></i1> <!-- average of 1 each 180 days per community -->
			
			<!-- most communities will have the urge to wait for their existing delegations to return before sending a new one. the multiplier for each delegation that has not yet returned: -->
			<i1><a>dailystartffdelegation each_existing_delegation prob mult</a> <b>double</b> <c>0.7</c></i1>
			
			<!-- logging const for a custom script is always "log_script_custom script undercase_script_name" where undercase_script_name is the thing you put as the name, but with all capitals made lowercase -->
			<i1><a>log_script_custom script dailystartffdelegation_deltypeprobability</a> <b>int</b> <c>1</c></i1>
		</mCustomVariableList>
	</customconsts>
	
  <!-- this file holds the implementation of a custom script which handles (some of, not all) probabilities to see if a foreign community's foreign-foreign delegations of a provided type are created -->
  <customscripts name="default">
	<mCustomScriptsList kind="add">
  
	<!-- inputs to the function:
	IFCommunity inCommunity
	IFDelegation.eDelegationType inDelegationType
	-->
	
	<!-- output:
	double outProbability //this is the probability that a community will send a delegation of inDelegationType each day, not including anything specific to a foreign AI
						  //(therefore, just base probabilities and variables)
	-->
	<i1><a>dailyStartFFDelegation_delTypeProbability</a>
	<b>
	    //input count and type check:
	    var customScripts = getAPI().getCustomScripts();
	    if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		    {typeof(IFCommunity), typeof(IFDelegation.eDelegationType)}
	      }, out _))
	    {
		  throw new ArgumentException("dailyStartFFDelegation_delTypeProbability custom script received invalid arguments");
		  return null;
	    }
	
		IFCommunity inCommunity = (IFCommunity)inArguments[0];
		if(inCommunity == null)
		{
		  throw new ArgumentException("dailyStartFFDelegation_delTypeProbability custom script received invalid arguments: inCommunity cannot be null");
		  return null;
		}
		IFDelegation.eDelegationType inDelegationType = (IFDelegation.eDelegationType)inArguments[1];
		
        var consts = getAPI().getConsts();
		var customConsts = getAPI().getCustomConsts();
		var variableHandler = getAPI().getVariableHandler();

		string typeName = (inDelegationType == IFDelegation.eDelegationType.cWar) ? "war" :
						  (inDelegationType == IFDelegation.eDelegationType.cRaiding) ? "raiding" :
						  (inDelegationType == IFDelegation.eDelegationType.cTrade) ? "trade" :
						  (inDelegationType == IFDelegation.eDelegationType.cDiplomacy) ? "trade" : //diplomacy foreign-foreign acts like trade delegation
						  (inDelegationType == IFDelegation.eDelegationType.cEmigration) ? "emigration" :
						  (inDelegationType == IFDelegation.eDelegationType.cSettlement) ? "settlement" :
						  "none";

		double baseProb = customConsts.getDoubleConst("dailystartffdelegation " + typeName + " base prob", out bool success);
		if(!success) baseProb = 0.0d;

		int count_of_outstanding_delegations = 0;
		if(customScripts.runCustomScriptCheckTypes("getForeignDelegations", new List&lt;object&gt;() { true, false, null, inCommunity,
			IFDelegation.eDelegationType.cNone, IFDelegation.eDelegationState.cHasReturnedHome, null, false, false, 0L, false, false, 0.0d, false, false, 0.0d, false },
			out List&lt;object&gt; outputs, false, typeof(List&lt;IFDelegation&gt;)))
		{
			count_of_outstanding_delegations = ((List&lt;IFDelegation&gt;)(outputs[0])).Count;
		}
		double outstandingEachMult = customConsts.getDoubleConst("dailystartffdelegation each_existing_delegation prob mult", out success);
		if(!success) outstandingEachMult = 0.7d;
		double outstandingMult = Math.Pow(outstandingEachMult, count_of_outstanding_delegations);
		
		List&lt;string&gt; multsToCheck = new List&lt;string&gt;();
		multsToCheck.Add("multForeignDelegationsProb_all_all_all");
		multsToCheck.Add("multForeignDelegationsProb_uid" + inCommunity.getUID() + "_all_all");
		multsToCheck.Add("multForeignDelegationsProb_all_foreign_all");
		multsToCheck.Add("multForeignDelegationsProb_uid" + inCommunity.getUID() + "_foreign_all");
		multsToCheck.Add("multForeignDelegationsProb_all_all_" + typeName);
		multsToCheck.Add("multForeignDelegationsProb_uid" + inCommunity.getUID() + "_all_" + typeName);
		multsToCheck.Add("multForeignDelegationsProb_all_foreign_" + typeName);
		multsToCheck.Add("multForeignDelegationsProb_uid" + inCommunity.getUID() + "_foreign_" + typeName);
		
		double allMults = 1.0d;
		foreach(string str in multsToCheck)
		{
			double mult = variableHandler.getConnectedDouble(str, out success);
			if(!success) mult = 1.0d;
			allMults *= mult;
		}
		
		double outProbability = baseProb * outstandingMult * allMults;
		outProbability = Math.Max(0.0d, outProbability); //no negatives
		addDebugMessage(inScriptInstance, "community " + inCommunity.getDebugName() + " has probability " + outProbability + " to send a " + typeName + " delegation to a foreign target today,"
			+ " based on custom consts base=" + baseProb + " mult from outstanding delegations=" + outstandingMult + " mults from all variables=" + allMults);
		
		List&lt;object&gt; toReturn = new List&lt;object&gt;() { outProbability };
	    return toReturn;
	</b>
	</i1>
	
	</mCustomScriptsList>
  </customscripts>
  
</core_data>