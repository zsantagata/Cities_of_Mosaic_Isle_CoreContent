<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>

  <customconsts name="default">
	<mCustomVariableList kind="add">
	  <!-- consts related to this file's scripts can have any name (though they probably shouldn't overwrite other consts) -->
	  <!-- note: for this english-language implementation, it is assumed adjectives come before the noun they modify -->
	  <i1><a>replaceDescriptionMarkupKind_one_pop_health_adj_phrase default before_replace_text</a> <b>string</b> <c></c></i1> <!-- this is only used if there is no appropriate rand_sel -->
	  <i1><a>replaceDescriptionMarkupKind_one_pop list_of_options</a> <b>list</b> <c>health_adj_phrase</c></i1> <!-- add this entry -->
	  
	  <i1><a>replaceDescriptionMarkupKind_one_pop_health_adj_phrase health value_selection_count</a> <b>int</b> <c>3</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_pop_health_adj_phrase health value_sel0 before_replace_text</a> <b>string</b> <c>needy,weak,bedraggled</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_pop_health_adj_phrase health value_sel1 before_replace_text</a> <b>string</b> <c>struggling,weakened,unhealthy</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_pop_health_adj_phrase health value_sel2 before_replace_text</a> <b>string</b> <c>healthy,hale,hearty,spirited</c></i1>
	  
	  <i1><a>replaceDescriptionMarkupKind_one_pop_health_adj_phrase dead before_replace_text</a> <b>string</b> <c>dead</c></i1>
	  
	  <i1><a>replaceDescriptionMarkupKind_one_pop_health_adj_phrase wounded before_replace_text</a> <b>string</b> <c>hurt,injured,bandaged,bloodied,maimed</c></i1>
	  
	  <i1><a>replaceDescriptionMarkupKind_one_pop_health_adj_phrase illness before_replace_text</a> <b>string</b> <c>sickly,ill,unwell,diseased,feverish,plagued</c></i1>
	  
	  <i1><a>replaceDescriptionMarkupKind_one_pop_health_adj_phrase pregnant before_replace_text</a> <b>string</b> <c>pregnant</c></i1>
	  
	  <!-- logging const for a custom script is always "log_script_custom script undercase_script_name" where undercase_script_name is the thing you put as the name, but with all capitals made lowercase -->
	  <i1><a>log_script_custom script replaceDescriptionMarkupKind_one_pop_health_adj_phrase</a> <b>int</b> <c>1</c></i1>
	</mCustomVariableList>
  </customconsts>

  <!-- this file holds the implementation of a custom script which takes a pop and from it, returns a string that is an adjective phrase indicating the health of the pop -->
  <!-- health will choose from dead adjectives if the pop is dead, otherwise it will choose randomly from all valid adjectives -->
  <customscripts name="default">
	<mCustomScriptsList kind="add">
	
	<!-- inputs to the script:
	IFPop inPop, //cannot be null
	
	There is one output: string outDescription -->
	<i1><a>replaceDescriptionMarkupKind_one_pop_health_adj_phrase</a>
	<b>
	//input count and type check:
	var customScripts = getAPI().getCustomScripts();
	if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		{   typeof(IFPop)   }
	  }, out _))
	{
		throw new ArgumentException("replaceDescriptionMarkupKind_one_pop_health_adj_phrase custom script received invalid arguments");
		return null;
	}
	  
	IFPop inPop = (IFPop)inArguments[0];
	
	var consts = getAPI().getConsts();
	var customConsts = getAPI().getCustomConsts();
	bool success = false;
	
	if(inPop == null)
	{
		throw new ArgumentException("replaceDescriptionMarkupKind_one_pop_health_adj_phrase custom script received invalid arguments: inPop cannot be null");
		return null;
	}
	
	string outDescription = "";
	
	//determine health:
	double healthMin = consts.getHealthMin();
	double healthMax = consts.getHealthMax();
	
	double health = inPop.getOverallHealth();
	health -= healthMin;
	health /= (healthMax - healthMin);
	Int64 healthValueSelMax = customConsts.getIntConst("replaceDescriptionMarkupKind_one_pop_health_adj_phrase health value_selection_count", out success);
	if(!success) healthValueSelMax = 3;
	int healthValSel = (int)(healthValueSelMax * health);
	if(healthValSel == healthValueSelMax)
		healthValSel--;
	
	bool dead = inPop.isDead();
	bool wounded = inPop.isWounded();
	bool ill = inPop.isIll();
	bool pregnant = inPop.isPregnant();
	
	List&lt;string&gt; possibleAdjs = new List&lt;string&gt;();
	
	//if the pop is dead, that's the only important thing:
	if(dead)
	{
		string adjByCommas = customConsts.getStringConst("replaceDescriptionMarkupKind_one_pop_health_adj_phrase dead before_replace_text", out success);
		if(success)
		{
			possibleAdjs.AddRange(adjByCommas.Split(','));
		}
	}
	else
	{
		string adjByCommas = customConsts.getStringConst("replaceDescriptionMarkupKind_one_pop_health_adj_phrase health value_sel" + healthValSel + " before_replace_text", out success);
		if(success)
		{
			possibleAdjs.AddRange(adjByCommas.Split(','));
		}
		
		if(wounded)
		{
			adjByCommas = customConsts.getStringConst("replaceDescriptionMarkupKind_one_pop_health_adj_phrase wounded before_replace_text", out success);
			if(success)
			{
				possibleAdjs.AddRange(adjByCommas.Split(','));
			}
		}
		
		if(ill)
		{
			adjByCommas = customConsts.getStringConst("replaceDescriptionMarkupKind_one_pop_health_adj_phrase illness before_replace_text", out success);
			if(success)
			{
				possibleAdjs.AddRange(adjByCommas.Split(','));
			}
		}
		
		if(pregnant)
		{
			adjByCommas = customConsts.getStringConst("replaceDescriptionMarkupKind_one_pop_health_adj_phrase pregnant before_replace_text", out success);
			if(success)
			{
				possibleAdjs.AddRange(adjByCommas.Split(','));
			}
		}
	}
	
	if(possibleAdjs.Count &gt; 0)
	{
		outDescription = possibleAdjs[(int)getAPI().calcRandIntUnder(possibleAdjs.Count)];
	}
	
	if(outDescription == "")
	{
		outDescription = customConsts.getStringConst("replaceDescriptionMarkupKind_one_pop_health_adj_phrase default before_replace_text", out success);
	}
	
    return new List&lt;object&gt;() { outDescription };
	</b>
	</i1>
	
	</mCustomScriptsList>
  </customscripts>
  
</core_data>