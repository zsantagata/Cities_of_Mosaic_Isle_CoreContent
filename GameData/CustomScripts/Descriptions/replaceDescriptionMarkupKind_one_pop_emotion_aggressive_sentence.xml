<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>

  <customconsts name="default">
	<mCustomVariableList kind="add">
	  <!-- consts related to this file's scripts can have any name (though they probably shouldn't overwrite other consts) -->
	  <!-- note: for this english-language implementation, it is assumed adjectives come before the noun they modify -->
	  <i1><a>replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence default before_replace_text</a> <b>string</b> <c></c></i1> <!-- this is only used if there is no appropriate rand_sel -->
	  <i1><a>replaceDescriptionMarkupKind_one_pop list_of_options</a> <b>list</b> <c>emotion_aggressive_sentence</c></i1> <!-- add this entry -->
	  
	  <!-- if a replacement is blank it is unusable -->
	  <!-- [0] = pop noun phrase -->
	  <!-- [1] = race bodypartexpression noun phrase -->
	  <!-- [2] = race bodypartgraspsingle noun phrase -->
	  <!-- [3] = one_pop_possessive_3ppronoun_adj_phrase -->
	  <!-- [4] = one_race_bodypartvision_noun_phrase -->
	  
	  <i1><a>replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence rand_selection_count</a> <b>int</b> <c>7</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence rand_sel0 before_replace_text</a> <b>string</b> <c>[0] takes an aggressive, angry stance.</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence rand_sel1 before_replace_text</a> <b>string</b> <c>[0] shifts stance, preparing for violence.</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence rand_sel2 before_replace_text</a> <b>string</b> <c>Anger is clear on [0]'s [1].</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence rand_sel3 before_replace_text</a> <b>string</b> <c>[0] subtly moves [3] [2], as if preparing to strike.</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence rand_sel4 before_replace_text</a> <b>string</b> <c>The [4] of [0] narrow in judgment.</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence rand_sel5 before_replace_text</a> <b>string</b> <c>[0]'s [4] go to [3] [2] in a failed attempt to disguise [3] violent intent.</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence rand_sel6 before_replace_text</a> <b>string</b> <c>A dangerous expression is clear on [0]'s [1], [3] [4] locked on [3] target.</c></i1>
	  
	  <i1><a>replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence dead before_replace_text</a> <b>string</b> <c>[0]'s corpse displays no emotion.</c></i1>
	  
	  <!-- logging const for a custom script is always "log_script_custom script undercase_script_name" where undercase_script_name is the thing you put as the name, but with all capitals made lowercase -->
	  <i1><a>log_script_custom script replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence</a> <b>int</b> <c>1</c></i1>
	</mCustomVariableList>
  </customconsts>

  <!-- this file holds the implementation of a custom script which takes a pop and from it, returns a string that is a sentence showing the pop's emotion is aggressive. -->
  <customscripts name="default">
	<mCustomScriptsList kind="add">
	
	<!-- inputs to the script:
	IFPop inPop, //cannot be null
	
	There is one output: string outDescription -->
	<i1><a>replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence</a>
	<b>
	//input count and type check:
	var customScripts = getAPI().getCustomScripts();
	if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		{   typeof(IFPop)   }
	  }, out _))
	{
		throw new ArgumentException("replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence custom script received invalid arguments");
		return null;
	}
	  
	IFPop inPop = (IFPop)inArguments[0];
	
	var consts = getAPI().getConsts();
	var customConsts = getAPI().getCustomConsts();
	bool success = false;
	
	if(inPop == null)
	{
		throw new ArgumentException("replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence custom script received invalid arguments: inPop cannot be null");
		return null;
	}
	
	string outDescription = "";
	int countOfReplacers = 5; //max replacer index + 1
	List&lt;string&gt; replacers = new List&lt;string&gt;();
	for(int i = 0; i &lt; countOfReplacers; i++)
	{
		replacers.Add("");
	}
	
	//[0] = pop name noun phrase
	replacers[0] = "[one_pop|name_noun_phrase:" + inPop.getUID() + "]";
	
	//[1] = race bodypartexpression noun phrase
	replacers[1] = "[one_race|bodypartexpression_noun_phrase:" + inPop.getRace().getMOID() + "]";
	
	//[2] = race bodypartgraspsingle noun phrase
	replacers[2] = "[one_race|bodypartgraspsingle_noun_phrase:" + inPop.getRace().getMOID() + "]";
	
	//[3] = one_pop_possessive_3ppronoun_adj_phrase
	replacers[3] = "[one_pop|possessive_3ppronoun_adj_phrase:" + inPop.getUID() + "]";
	
	//[4] = race bodypartvision noun phrase
	replacers[4] = "[one_race|bodypartvision_noun_phrase:" + inPop.getRace().getMOID() + "]";
	
	//if the pop is dead, that's the only important thing:
	if(inPop.isDead())
	{
		outDescription = customConsts.getStringConst("replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence dead before_replace_text", out success);
		if(!success) outDescription = "[0]'s corpse displays no emotion.";
	}
	else
	{
		Int64 randCountMax = customConsts.getIntConst("replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence rand_selection_count", out success);
		if(!success) randCountMax = 7;
	
		Int64 rand_sel = getAPI().calcRandIntUnder(randCountMax);
		
		outDescription = customConsts.getStringConst("replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence rand_sel" + rand_sel + " before_replace_text", out success);
		if(!success) outDescription = "";
	}
	
	for(int i = 0; i &lt; replacers.Count; i++)
	{
		outDescription = outDescription.Replace("[" + i + "]", replacers[i]);
	}
	
	if(outDescription == "")
	{
		outDescription = customConsts.getStringConst("replaceDescriptionMarkupKind_one_pop_emotion_aggressive_sentence default before_replace_text", out success);
	}
	
    return new List&lt;object&gt;() { outDescription };
	</b>
	</i1>
	
	</mCustomScriptsList>
  </customscripts>
  
</core_data>