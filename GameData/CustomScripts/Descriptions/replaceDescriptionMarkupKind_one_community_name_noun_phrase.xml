<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>

  <customconsts name="default">
	<mCustomVariableList kind="add">
	  <!-- consts related to this file's scripts can have any name (though they probably shouldn't overwrite other consts) -->
	  <!-- note: [0] represents the community.  [1] represents an adjective relating to this community -->
	  <!-- if no adjective is returned for this community, any before_replace_text with [1] will be discarded -->
	  <i1><a>replaceDescriptionMarkupKind_one_community_name_noun_phrase default before_replace_text</a> <b>string</b> <c>[0]</c></i1> <!-- this is only used if there is no appropriate rand_sel -->
	  <i1><a>replaceDescriptionMarkupKind_one_community list_of_options</a> <b>list</b> <c>name_noun_phrase</c></i1> <!-- add this entry -->
	  
	  <i1><a>replaceDescriptionMarkupKind_one_community_name_noun_phrase rand_selection_count</a> <b>int</b> <c>7</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_name_noun_phrase rand_sel0 before_replace_text</a> <b>string</b> <c>[0]</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_name_noun_phrase rand_sel1 before_replace_text</a> <b>string</b> <c>the community of [0]</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_name_noun_phrase rand_sel2 before_replace_text</a> <b>string</b> <c>the [0] community</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_name_noun_phrase rand_sel3 before_replace_text</a> <b>string</b> <c>[1] [0]</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_name_noun_phrase rand_sel4 before_replace_text</a> <b>string</b> <c>the [1] community of [0]</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_name_noun_phrase rand_sel5 before_replace_text</a> <b>string</b> <c>the [1] [0] community</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_name_noun_phrase rand_sel6 before_replace_text</a> <b>string</b> <c>[0], [1],</c></i1>
	  
	  <!-- logging const for a custom script is always "log_script_custom script undercase_script_name" where undercase_script_name is the thing you put as the name, but with all capitals made lowercase -->
	  <i1><a>log_script_custom script replaceDescriptionMarkupKind_one_community_name_noun_phrase</a> <b>int</b> <c>1</c></i1>
	</mCustomVariableList>
  </customconsts>

  <!-- this file holds the implementation of a custom script which takes an community and from it, returns a string that is a noun phrase indicating the community -->
  <customscripts name="default">
	<mCustomScriptsList kind="add">
	
	<!-- inputs to the script:
	IFCommunity inCommunity, //cannot be null
	
	There is one output: string outDescription -->
	<i1><a>replaceDescriptionMarkupKind_one_community_name_noun_phrase</a>
	<b>
	//input count and type check:
	var customScripts = getAPI().getCustomScripts();
	if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		{   typeof(IFCommunity)   }
	  }, out _))
	{
		throw new ArgumentException("replaceDescriptionMarkupKind_one_community_name_noun_phrase custom script received invalid arguments");
		return null;
	}
	  
	IFCommunity inCommunity = (IFCommunity)inArguments[0];
	
	var consts = getAPI().getConsts();
	var customConsts = getAPI().getCustomConsts();
	bool success = false;
	
	string outDescription = "";
	
	if(inCommunity == null)
	{
		throw new ArgumentException("replaceDescriptionMarkupKind_one_community_name_noun_phrase custom script received invalid arguments: inCommunity cannot be null");
		return null;
	}
	
	string displayName = inCommunity.getDisplayName();
	string descriptionAdj = "";
	if(customScripts.doesCustomScriptExistWithName("replaceDescriptionMarkupKind_one_community_rand_adj_phrase"))
	{
		if(customScripts.runCustomScriptCheckTypes("replaceDescriptionMarkupKind_one_community_rand_adj_phrase", new List&lt;object&gt;() { inCommunity }, out List&lt;object&gt; randAdj, false, typeof(string)))
		{
			descriptionAdj = (string)randAdj[0];
		}
	}
	
	Int64 randCountTotal = customConsts.getIntConst("replaceDescriptionMarkupKind_one_community_name_noun_phrase rand_selection_count", out success);
	if(!success) randCountTotal = 7;
	List&lt;string&gt; possibleSelections = new List&lt;string&gt;();
	
	for(int i = 0; i &lt; randCountTotal; i++)
	{
		string randSel = customConsts.getStringConst("replaceDescriptionMarkupKind_one_community_name_noun_phrase rand_sel" + i + " before_replace_text", out success);
		if(!success) continue;
		
		if(randSel.Contains("[1]") &amp;&amp; descriptionAdj == "")
			continue;
			
		possibleSelections.Add(randSel);
	}
	
	if(possibleSelections.Count &gt; 0)
	{
		outDescription = possibleSelections[(int)getAPI().calcRandIntUnder(possibleSelections.Count)];
	}
	else
	{
		outDescription = customConsts.getStringConst("replaceDescriptionMarkupKind_one_community_name_noun_phrase default before_replace_text", out success);
		if(!success) outDescription = "[0]";
	}
	
	outDescription = outDescription.Replace("[0]", displayName);
	outDescription = outDescription.Replace("[1]", descriptionAdj);
	
    return new List&lt;object&gt;() { outDescription };
	</b>
	</i1>
	
	</mCustomScriptsList>
  </customscripts>
  
</core_data>