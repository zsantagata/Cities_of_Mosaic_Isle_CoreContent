<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>

  <customconsts name="default">
	<mCustomVariableList kind="add">
	  <!-- consts related to this file's scripts can have any name (though they probably shouldn't overwrite other consts) -->
	  <!-- note: for this english-language implementation, it is assumed adjectives come before the noun they modify -->
	  <!-- [0] and [1] are both adjectives; [0] is distance while [1] is underwater/overland.  [1] is only used if the home community is the opposite. -->
	  
	  <i1><a>replaceDescriptionMarkupKind_one_community_location_adj_phrase default before_replace_text</a> <b>string</b> <c></c></i1> <!-- this is only used if there is no appropriate rand_sel -->
	  <i1><a>replaceDescriptionMarkupKind_one_community list_of_options</a> <b>list</b> <c>location_adj_phrase</c></i1> <!-- add this entry -->
	  
	  <!-- split distance into three: -->
	  
	  <!-- 6 days is nearby -->
	  <!-- 12 days is no adjective -->
	  <!-- more is distant -->
	  
	  <i1><a>replaceDescriptionMarkupKind_one_community_location_adj_phrase distance_threshold near</a> <b>double</b> <c>6.0</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_location_adj_phrase distance_threshold far</a> <b>double</b> <c>12.0</c></i1>
	  
	  <i1><a>replaceDescriptionMarkupKind_one_community_location_adj_phrase distance selection_count</a> <b>int</b> <c>3</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_location_adj_phrase distance value_sel0 before_replace_text</a> <b>string</b> <c>near,close,nearby,neighboring</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_location_adj_phrase distance value_sel1 before_replace_text</a> <b>string</b> <c></c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_location_adj_phrase distance value_sel2 before_replace_text</a> <b>string</b> <c>far,distant,faraway,remote</c></i1>
	  
	  <i1><a>replaceDescriptionMarkupKind_one_community_location_adj_phrase underwater before_replace_text</a> <b>string</b> <c>underwater,seafloor,aquatic,aqueous,watery</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_location_adj_phrase overland before_replace_text</a> <b>string</b> <c>overland,dry,aboveground,air-breathing</c></i1>
	  
	  <!-- the actual adjectives will be slotted into these phrases: -->
	  <i1><a>replaceDescriptionMarkupKind_one_community_location_adj_phrase rand_selection_count</a> <b>int</b> <c>3</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_location_adj_phrase rand_sel0 before_replace_text</a> <b>string</b> <c>[0]</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_location_adj_phrase rand_sel1 before_replace_text</a> <b>string</b> <c>[1]</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_location_adj_phrase rand_sel2 before_replace_text</a> <b>string</b> <c>[0] [1]</c></i1>
	  
	  <!-- logging const for a custom script is always "log_script_custom script undercase_script_name" where undercase_script_name is the thing you put as the name, but with all capitals made lowercase -->
	  <i1><a>log_script_custom script replaceDescriptionMarkupKind_one_community_location_adj_phrase</a> <b>int</b> <c>1</c></i1>
	</mCustomVariableList>
  </customconsts>

  <!-- this file holds the implementation of a custom script which takes a community and from it, returns a string that is an adjective phrase indicating the economic and/or military strength of the community -->
  <customscripts name="default">
	<mCustomScriptsList kind="add">
	
	<!-- inputs to the script:
	IFCommunity inCommunity, //cannot be null
	
	There is one output: string outDescription -->
	<i1><a>replaceDescriptionMarkupKind_one_community_location_adj_phrase</a>
	<b>
	//input count and type check:
	var customScripts = getAPI().getCustomScripts();
	if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		{   typeof(IFCommunity)   }
	  }, out _))
	{
		throw new ArgumentException("replaceDescriptionMarkupKind_one_community_location_adj_phrase custom script received invalid arguments");
		return null;
	}
	  
	IFCommunity inCommunity = (IFCommunity)inArguments[0];
	
	var consts = getAPI().getConsts();
	var customConsts = getAPI().getCustomConsts();
	bool success = false;
	
	if(inCommunity == null)
	{
		throw new ArgumentException("replaceDescriptionMarkupKind_one_community_location_adj_phrase custom script received invalid arguments: inCommunity cannot be null");
		return null;
	}
	
	string outDescription = "";
	
	//determine if local community is underwater:
	IFCommunity localCommunity = getAPI().getLocalCommunity();
	bool localCommunityUnderwater = (localCommunity.getWaterRatio() == 1.0d);
	bool describedCommunityUnderwater = (inCommunity.getWaterRatio() == 1.0d);
	bool useOverlandAdj = (localCommunityUnderwater &amp;&amp; !describedCommunityUnderwater);
	bool useUnderwaterAdj = (!localCommunityUnderwater &amp;&amp; describedCommunityUnderwater);
	string waterAdj = "";
	if(useOverlandAdj)
	{
		string possibleAdj = customConsts.getStringConst("replaceDescriptionMarkupKind_one_community_location_adj_phrase overland before_replace_text", out success);
		List&lt;string&gt; possibles = new List&lt;string&gt;(possibleAdj.Split(','));
		if(possibles.Count != 0)
		{
			waterAdj = possibles[(int)getAPI().calcRandIntUnder(possibles.Count)];
		}
	}
	else if(useUnderwaterAdj)
	{
		string possibleAdj = customConsts.getStringConst("replaceDescriptionMarkupKind_one_community_location_adj_phrase underwater before_replace_text", out success);
		List&lt;string&gt; possibles = new List&lt;string&gt;(possibleAdj.Split(','));
		if(possibles.Count != 0)
		{
			waterAdj = possibles[(int)getAPI().calcRandIntUnder(possibles.Count)];
		}
	}
	
	//determine how far the two communities are away:
	double nearDistanceThreshold = customConsts.getDoubleConst("replaceDescriptionMarkupKind_one_community_location_adj_phrase distance_threshold near", out success);
	if(!success) nearDistanceThreshold = 6.0d;
	double farDistanceThreshold = customConsts.getDoubleConst("replaceDescriptionMarkupKind_one_community_location_adj_phrase distance_threshold far", out success);
	if(!success) farDistanceThreshold = 12.0d;
	
	double diploX1 = localCommunity.getDiploMapLocationX() / getAPI().getDiploMapUpscaleFromSandboxSelectionMapRatio();
	double diploX2 = inCommunity.getDiploMapLocationX() / getAPI().getDiploMapUpscaleFromSandboxSelectionMapRatio();
	double diploY1 = localCommunity.getDiploMapLocationY() / getAPI().getDiploMapUpscaleFromSandboxSelectionMapRatio();
	double diploY2 = inCommunity.getDiploMapLocationY() / getAPI().getDiploMapUpscaleFromSandboxSelectionMapRatio();
	
	double distance = Math.Sqrt((diploX1 - diploX2) * (diploX1 - diploX2) + (diploY1 - diploY2) * (diploY1 - diploY2));
	double time = distance / consts.getDelegationVelocityBase();
	
	int value_sel = time &lt; nearDistanceThreshold ? 0 : 
					time &gt; farDistanceThreshold ? 2 :
					1;
	
	string distAdj = "";
	string possibleDistAdj = customConsts.getStringConst("replaceDescriptionMarkupKind_one_community_location_adj_phrase distance value_sel" + value_sel + " before_replace_text", out success);
	List&lt;string&gt; possibleDistAdjs = new List&lt;string&gt;(possibleDistAdj.Split(','));
	if(possibleDistAdjs.Count != 0)
	{
		distAdj = possibleDistAdjs[(int)getAPI().calcRandIntUnder(possibleDistAdjs.Count)];
	}
	
	
	Int64 randSelCount = customConsts.getIntConst("replaceDescriptionMarkupKind_one_community_location_adj_phrase rand_selection_count", out success);
	if(!success) randSelCount = 3;
	List&lt;string&gt; possiblePhrases = new List&lt;string&gt;();
	for(int i = 0; i &lt; randSelCount; i++)
	{
		string phrase = customConsts.getStringConst("replaceDescriptionMarkupKind_one_community_location_adj_phrase rand_sel" + i + " before_replace_text", out success);
		if(!success)
			continue;
		
		if(phrase.Contains("[0]") &amp;&amp; (distAdj == ""))
			continue;
		if(phrase.Contains("[1]") &amp;&amp; (waterAdj == ""))
			continue;
			
		possiblePhrases.Add(phrase);
	}
	
	if(possiblePhrases.Count != 0)
	{
		outDescription = possiblePhrases[(int)getAPI().calcRandIntUnder(possiblePhrases.Count)];
		outDescription = outDescription.Replace("[0]", distAdj);
		outDescription = outDescription.Replace("[1]", waterAdj);
	}
	else
	{
		outDescription = customConsts.getStringConst("replaceDescriptionMarkupKind_one_community_location_adj_phrase default before_replace_text", out success);
	}
	
    return new List&lt;object&gt;() { outDescription };
	</b>
	</i1>
	
	</mCustomScriptsList>
  </customscripts>
  
</core_data>