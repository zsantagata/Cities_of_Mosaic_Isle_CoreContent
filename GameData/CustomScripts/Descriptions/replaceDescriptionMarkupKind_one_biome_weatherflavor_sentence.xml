<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>

  <customconsts name="default">
	<mCustomVariableList kind="add">
	  <!-- consts related to this file's scripts can have any name (though they probably shouldn't overwrite other consts) -->
	  <i1><a>replaceDescriptionMarkupKind_one_biome list_of_options</a> <b>list</b> <c>weatherflavor_sentence</c></i1> <!-- add this entry -->
	  
	  <i1><a>replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence default before_replace_text</a> <b>string</b> <c>The weather is still and peaceful, in this moment.</c></i1> <!-- this is only used if there is no appropriate rand_sel -->
	  
	  <!-- if a replacement is blank it is unusable -->
	  <!-- [0] = biome name noun phrase -->
	  <!-- [1] = biome fauna noun phrase (always plural) -->
	  <!-- [2] = biome flora noun phrase (always plural) -->
	  <!-- [3] = biome fluid noun phrase -->
	  <!-- [4] = biome ground noun phrase -->
	  <!-- [5] = biome landscape adj phrase -->
	  <!-- [6] = biome weather adj phrase -->
	  <!-- [7] = biome weather noun phrase -->
	  
	  <!-- A) water -->
	  <i1><a>replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence water rand_selection_count</a> <b>int</b> <c>5</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence water rand_sel0 before_replace_text</a> <b>string</b> <c>[1] settle down next to [0] [2] in the [6] weather.</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence water rand_sel1 before_replace_text</a> <b>string</b> <c>[2] endure the local [7] of [0] without issue.</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence water rand_sel2 before_replace_text</a> <b>string</b> <c>The [3] swirls along [0] [4] as a [7] passes over the region.</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence water rand_sel3 before_replace_text</a> <b>string</b> <c>The [5] [4] of [0] is the only reprieve from the sight of a widespread [7].</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence water rand_sel4 before_replace_text</a> <b>string</b> <c>Today, the frequent [6] weather of [0] can be seen, heard, and by some [1], even smelled.</c></i1>
	  
	  <!-- B) land -->
	  <i1><a>replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence land rand_selection_count</a> <b>int</b> <c>5</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence land rand_sel0 before_replace_text</a> <b>string</b> <c>[1] settle down next to [0] [2] in the [6] weather.</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence land rand_sel1 before_replace_text</a> <b>string</b> <c>[2] endure the local [7] of [0] without issue.</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence land rand_sel2 before_replace_text</a> <b>string</b> <c>The [3] hugs [0] [4] as a [7] passes over the region.</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence land rand_sel3 before_replace_text</a> <b>string</b> <c>The [5] [4] of [0] is the only reprieve from the sight of a widespread [7].</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence land rand_sel4 before_replace_text</a> <b>string</b> <c>Today, the frequent [6] weather of [0] can be seen, heard, and by some [1], even smelled.</c></i1>
	  
	  <!-- logging const for a custom script is always "log_script_custom script undercase_script_name" where undercase_script_name is the thing you put as the name, but with all capitals made lowercase -->
	  <i1><a>log_script_custom script replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence</a> <b>int</b> <c>1</c></i1>
	</mCustomVariableList>
  </customconsts>
  
  <!-- BIOME tag: fauna_noun -->
  <!-- BIOME tag: flora_noun -->
  
  <!-- this file holds the implementation of a custom script which takes a biome and from it, returns a string that is a full sentence describing the flora and fauna at one place in the biome. -->
  <customscripts name="default">
	<mCustomScriptsList kind="add">
	
	<!-- inputs to the script:
	IFTerrainBiome inBiome, //cannot be null
	
	There is one output: string outDescription -->
	<i1><a>replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence</a>
	<b>
	//input count and type check:
	var customScripts = getAPI().getCustomScripts();
	if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		{   typeof(IFTerrainBiome)   }
	  }, out _))
	{
		throw new ArgumentException("replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence custom script received invalid arguments");
		return null;
	}
	  
	IFTerrainBiome inBiome = (IFTerrainBiome)inArguments[0];
	
	var consts = getAPI().getConsts();
	var customConsts = getAPI().getCustomConsts();
	bool success = false;
	
	if(inBiome == null)
	{
		throw new ArgumentException("replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence custom script received invalid arguments: inBiome cannot be null");
		return null;
	}
	
	List&lt;string&gt; possibleFaunaNouns = new List&lt;string&gt;();
	foreach(string tag in inBiome.getTagList())
	{
		if(tag.Contains("fauna_noun:"))
		{
			possibleFaunaNouns.Add(tag.Replace("fauna_noun:", "").ToLower());
		}
	}
	List&lt;string&gt; possibleFloraNouns = new List&lt;string&gt;();
	foreach(string tag in inBiome.getTagList())
	{
		if(tag.Contains("flora_noun:"))
		{
			possibleFloraNouns.Add(tag.Replace("flora_noun:", "").ToLower());
		}
	}
	
	string outDescription = "";
	int countOfReplacers = 8; //max replacer index + 1
	List&lt;string&gt; replacers = new List&lt;string&gt;();
	for(int i = 0; i &lt; countOfReplacers; i++)
	{
		replacers.Add("");
	}
	
	//[0] = biome name noun phrase
	replacers[0] = "[one_biome|name_noun_phrase:" + inBiome.getMOID() + "]";
	
	//[1] = biome fauna noun phrase
	replacers[1] = possibleFaunaNouns.Count &gt; 0 ? possibleFaunaNouns[(int)getAPI().calcRandIntUnder(possibleFaunaNouns.Count)] : "";
	
	//[2] = biome flora noun phrase
	replacers[2] = possibleFloraNouns.Count &gt; 0 ? possibleFloraNouns[(int)getAPI().calcRandIntUnder(possibleFloraNouns.Count)] : "";
	
	//[3] = biome fluid noun phrase
	replacers[3] = "[one_biome|fluid_noun_phrase:" + inBiome.getMOID() + "]";
	
	//[4] = biome ground noun phrase
	replacers[4] = "[one_biome|ground_noun_phrase:" + inBiome.getMOID() + "]";
	
	//[5] = biome landscape adj phrase
	replacers[5] = "[one_biome|landscape_adj_phrase:" + inBiome.getMOID() + "]";
	
	//[6] = biome weather adj phrase
	replacers[6] = "[one_biome|weather_adj_phrase:" + inBiome.getMOID() + "]";
	
	//[7] = biome weather noun phrase
	replacers[7] = "[one_biome|weather_noun_phrase:" + inBiome.getMOID() + "]";
	
	string sentenceKind = (inBiome.isWater() ? "water" : "land");
	
	//now that all replacers are assembled and we know which sentence to generate, iterate over all possible sentences and only include the ones that have all replacers:
	Int64 sentenceCount = customConsts.getIntConst("replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence " + sentenceKind + " rand_selection_count", out success);
	List&lt;string&gt; possibleSentences = new List&lt;string&gt;();
	for(int i = 0; i &lt; sentenceCount; i++)
	{
		string sentence = customConsts.getStringConst("replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence " + sentenceKind + " rand_sel" + i + " before_replace_text", out success);
		if(success)
		{
			//iterate over all replacers and if they are present in the sentence, check that they can be replaced:
			bool validSentence = true;
			for(int j = 0; (j &lt; countOfReplacers) &amp;&amp; validSentence; j++)
			{
				if(sentence.Contains("[" + j + "]") &amp;&amp; (replacers[j] == ""))
				{
					validSentence = false;
				}
			}
			
			if(validSentence)
			{
				possibleSentences.Add(sentence);
			}
		}
	}
	
	if(possibleSentences.Count &gt; 0)
	{
		outDescription = possibleSentences[(int)getAPI().calcRandIntUnder(possibleSentences.Count)];
	}
	else
	{
		outDescription = customConsts.getStringConst("replaceDescriptionMarkupKind_one_biome_weatherflavor_sentence default before_replace_text", out success);
	}
	
	for(int i = 0; i &lt; countOfReplacers; i++)
	{
		outDescription = outDescription.Replace("[" + i + "]", replacers[i]);
	}
	
    return new List&lt;object&gt;() { outDescription };
	</b>
	</i1>
	
	</mCustomScriptsList>
  </customscripts>
  
</core_data>