<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>

  <customconsts name="default">
	<mCustomVariableList kind="add">
	  <!-- consts related to this file's scripts can have any name (though they probably shouldn't overwrite other consts) -->
	  <!-- note: for this english-language implementation, it is assumed adjectives come before the noun they modify -->
	  
	  <i1><a>replaceDescriptionMarkupKind_one_community_servantrelation_adj_phrase default before_replace_text</a> <b>string</b> <c></c></i1> <!-- this is only used if there is no appropriate rand_sel -->
	  <i1><a>replaceDescriptionMarkupKind_one_community list_of_options</a> <b>list</b> <c>servantrelation_adj_phrase</c></i1> <!-- add this entry -->
	  
	  <!-- servant relation is: -->
	  <!-- A) no masters, no servants -->
	  <!-- B) no masters, servants not including player -->
	  <!-- C) no masters, servants including player -->
	  <!-- D) master is not player, no servants -->
	  <!-- E) master is player, no servants -->
	  
	  <i1><a>replaceDescriptionMarkupKind_one_community_servantrelation_adj_phrase player before_replace_text</a>     	   <b>string</b> <c>home</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_servantrelation_adj_phrase servants_other before_replace_text</a>  <b>string</b> <c>domineering,conquering</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_servantrelation_adj_phrase servants_player before_replace_text</a> <b>string</b> <c>master,overlord</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_servantrelation_adj_phrase master_other before_replace_text</a>    <b>string</b> <c>servant,subject,minor</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_servantrelation_adj_phrase master_player before_replace_text</a>   <b>string</b> <c>loyal,servant,child</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_one_community_servantrelation_adj_phrase independent before_replace_text</a>     <b>string</b> <c>independent,solitary</c></i1>
	  	  
	  <!-- logging const for a custom script is always "log_script_custom script undercase_script_name" where undercase_script_name is the thing you put as the name, but with all capitals made lowercase -->
	  <i1><a>log_script_custom script replaceDescriptionMarkupKind_one_community_servantrelation_adj_phrase</a> <b>int</b> <c>1</c></i1>
	</mCustomVariableList>
  </customconsts>

  <!-- this file holds the implementation of a custom script which takes a community and from it, returns a string that is an adjective phrase indicating the servant relations of the community -->
  <customscripts name="default">
	<mCustomScriptsList kind="add">
	
	<!-- inputs to the script:
	IFCommunity inCommunity, //cannot be null
	
	There is one output: string outDescription -->
	<i1><a>replaceDescriptionMarkupKind_one_community_servantrelation_adj_phrase</a>
	<b>
	//input count and type check:
	var customScripts = getAPI().getCustomScripts();
	if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		{   typeof(IFCommunity)   }
	  }, out _))
	{
		throw new ArgumentException("replaceDescriptionMarkupKind_one_community_servantrelation_adj_phrase custom script received invalid arguments");
		return null;
	}
	  
	IFCommunity inCommunity = (IFCommunity)inArguments[0];
	
	var consts = getAPI().getConsts();
	var customConsts = getAPI().getCustomConsts();
	bool success = false;
	
	if(inCommunity == null)
	{
		throw new ArgumentException("replaceDescriptionMarkupKind_one_community_servantrelation_adj_phrase custom script received invalid arguments: inCommunity cannot be null");
		return null;
	}
	
	string outDescription = "";
	
	//determine which category the community falls into:
	IFCommunity localCommunity = getAPI().getLocalCommunity();
	
	bool isPlayer = inCommunity == localCommunity;
	bool masterIsPlayer = inCommunity.getMasterCommunity() == localCommunity;
	bool masterNotPlayer = inCommunity.hasMasterCommunity() &amp;&amp; !masterIsPlayer;
	bool servantsIncludePlayer = inCommunity.getServantCommunities().Contains(localCommunity);
	bool servantsNotIncludePlayer = (inCommunity.getServantCommunities().Count != 0) &amp;&amp; !servantsIncludePlayer;
	
	string phrase_keyword = isPlayer ? "player" :
							masterIsPlayer ? "master_player" :
							masterNotPlayer ? "master_other" :
							servantsIncludePlayer ? "servants_player" :
							servantsNotIncludePlayer ? "servants_other" :
							"independent";
	
	string possibleAdj = customConsts.getStringConst("replaceDescriptionMarkupKind_one_community_servantrelation_adj_phrase " + phrase_keyword + " before_replace_text", out success);
	List&lt;string&gt; possibles = new List&lt;string&gt;(possibleAdj.Split(','));
	if(possibles.Count != 0)
	{
		outDescription = possibles[(int)getAPI().calcRandIntUnder(possibles.Count)];
	}
	else
	{
		outDescription = customConsts.getStringConst("replaceDescriptionMarkupKind_one_community_servantrelation_adj_phrase default before_replace_text", out success);
	}
	
    return new List&lt;object&gt;() { outDescription };
	</b>
	</i1>
	
	</mCustomScriptsList>
  </customscripts>
  
</core_data>