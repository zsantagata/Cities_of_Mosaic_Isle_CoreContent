<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>

  <customconsts name="default">
	<mCustomVariableList kind="add">
	  <!-- consts related to this file's scripts can have any name (though they probably shouldn't overwrite other consts) -->
	  <!-- note: for this english-language implementation, it is assumed adjectives come before the noun they modify -->
	  <i1><a>replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase default before_replace_text</a> <b>string</b> <c></c></i1> <!-- this is only used if there is no appropriate rand_sel -->
	  <i1><a>replaceDescriptionMarkupKind_mult_pop list_of_options</a> <b>list</b> <c>sex_adj_phrase</c></i1> <!-- add this entry -->
	  
	  <i1><a>replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase all_unisex_none before_replace_text</a> <b>string</b> <c>asexual</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase all_male before_replace_text</a> <b>string</b> <c>male</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase all_female before_replace_text</a> <b>string</b> <c>female</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase all_unisex_both before_replace_text</a> <b>string</b> <c>hermaphroditic</c></i1>
	  <i1><a>replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase mixed before_replace_text</a> <b>string</b> <c></c></i1> <!-- none of the above -->
	  
	  <!-- logging const for a custom script is always "log_script_custom script undercase_script_name" where undercase_script_name is the thing you put as the name, but with all capitals made lowercase -->
	  <i1><a>log_script_custom script replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase</a> <b>int</b> <c>1</c></i1>
	</mCustomVariableList>
  </customconsts>

  <!-- this file holds the implementation of a custom script which takes a list of pops and from it, returns a string that is an adjective phrase indicating the sex of the pops (only if all the pops are the same sex) -->
  <customscripts name="default">
	<mCustomScriptsList kind="add">
	
	<!-- inputs to the script:
	List<IFPop> inPops, //cannot be null but can be empty
	
	There is one output: string outDescription -->
	<i1><a>replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase</a>
	<b>
	//input count and type check:
	var customScripts = getAPI().getCustomScripts();
	if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		{   typeof(List&lt;IFPop&gt;)   }
	  }, out _))
	{
		throw new ArgumentException("replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase custom script received invalid arguments");
		return null;
	}
	  
	List&lt;IFPop&gt; inPops = (List&lt;IFPop&gt;)inArguments[0];
	
	var consts = getAPI().getConsts();
	var customConsts = getAPI().getCustomConsts();
	bool success = false;
	
	string outDescription = "";
	
	if(inPops == null)
	{
		throw new ArgumentException("replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase custom script received invalid arguments: inPops cannot be null");
		return null;
	}
	
	if(inPops.Count == 0)
	{
		outDescription = customConsts.getStringConst("replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase default before_replace_text", out success);
		if(!success) outDescription = "";
		return new List&lt;object&gt;() { outDescription };
	}
	
	//determine loyalty:
	IFCommunity localCommunity = getAPI().getLocalCommunity();
	
	bool unisexNoneValid = true;
	bool maleValid = true;
	bool femaleValid = true;
	bool unisexBothValid = true;
	foreach(IFPop pop in inPops)
	{
		if(pop.getSex() != IFPop.ePopSex.cUnisexNone)
		{
			unisexNoneValid = false;
		}
		if(pop.getSex() != IFPop.ePopSex.cMale)
		{
			maleValid = false;
		}
		if(pop.getSex() != IFPop.ePopSex.cFemale)
		{
			femaleValid = false;
		}
		if(pop.getSex() != IFPop.ePopSex.cUnisexBoth)
		{
			unisexBothValid = false;
		}
	}
	
	List&lt;string&gt; possibleAdjs = new List&lt;string&gt;();
	if(unisexNoneValid)
	{
		string adjByCommas = customConsts.getStringConst("replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase all_unisex_none before_replace_text", out success);
		if(success)
		{
			possibleAdjs.AddRange(adjByCommas.Split(','));
		}
	}
	else if(maleValid)
	{
		string adjByCommas = customConsts.getStringConst("replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase all_male before_replace_text", out success);
		if(success)
		{
			possibleAdjs.AddRange(adjByCommas.Split(','));
		}
	}
	else if(femaleValid)
	{
		string adjByCommas = customConsts.getStringConst("replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase all_female before_replace_text", out success);
		if(success)
		{
			possibleAdjs.AddRange(adjByCommas.Split(','));
		}
	}
	else if(unisexBothValid)
	{
		string adjByCommas = customConsts.getStringConst("replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase all_unisex_both before_replace_text", out success);
		if(success)
		{
			possibleAdjs.AddRange(adjByCommas.Split(','));
		}
	}
	else
	{
		string adjByCommas = customConsts.getStringConst("replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase mixed before_replace_text", out success);
		if(success)
		{
			possibleAdjs.AddRange(adjByCommas.Split(','));
		}
	}
	
	if(possibleAdjs.Count &gt; 0)
	{
		outDescription = possibleAdjs[(int)getAPI().calcRandIntUnder(possibleAdjs.Count)];
	}
	
	if(outDescription == "")
	{
		outDescription = customConsts.getStringConst("replaceDescriptionMarkupKind_mult_pop_sex_adj_phrase default before_replace_text", out success);
	}
	
    return new List&lt;object&gt;() { outDescription };
	</b>
	</i1>
	
	</mCustomScriptsList>
  </customscripts>
  
</core_data>