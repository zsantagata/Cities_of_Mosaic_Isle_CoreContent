<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>

  <customconsts name="default">
	<mCustomVariableList kind="add">
	  <!-- consts related to this file's scripts can have any name (though they probably shouldn't overwrite other consts) -->
	  <i1><a>replaceDescriptionMarkupKind_one_listofresources invalid_resourcepool_error before_replace_text</a> <b>string</b> <c>INVALID_LISTOFRESOURCES</c></i1>
	  <i1><a>replaceDescriptionMarkupKind list_of_options</a> <b>list</b> <c>one_listofresources</c></i1>
	  
	  <i1><a>replaceDescriptionMarkupKind_one_listofresources list_of_options</a> <b>list</b> <c></c></i1> <!-- the individual script files will add to this, one by one.  MUST ALL BE LOWERCASE -->
	  
	  <!-- logging const for a custom script is always "log_script_custom script undercase_script_name" where undercase_script_name is the thing you put as the name, but with all capitals made lowercase -->
	  <i1><a>log_script_custom script replaceDescriptionMarkupKind_one_listofresources</a> <b>int</b> <c>1</c></i1>
	</mCustomVariableList>
  </customconsts>

  <!-- this file holds the implementation of a custom script which takes a markup text and from it, makes a request to a lower script to generate text that will replace the markup -->
  <customscripts name="default">
	<mCustomScriptsList kind="add">
	
	<!-- inputs to the script:
	string inMarkup,
	List<Dictionary<IFResource, Tuple<double, double>>> inListsOfResources //ignored by this script
	
	There is one output: string outDescription -->
	<i1><a>replaceDescriptionMarkupKind_one_listofresources</a>
	<b>
	//input count and type check:
	var customScripts = getAPI().getCustomScripts();
	if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		{   typeof(string), typeof(List&lt;Dictionary&lt;IFResource, Tuple&lt;double, double&gt;&gt;&gt;)   }
	  }, out _))
	{
		throw new ArgumentException("replaceDescriptionMarkupKind_one_listofresources custom script received invalid arguments");
		return null;
	}
	  
	string inMarkup = (string)inArguments[0];
	List&lt;Dictionary&lt;IFResource, Tuple&lt;double, double&gt;&gt;&gt; inListsOfResources = (List&lt;Dictionary&lt;IFResource, Tuple&lt;double, double&gt;&gt;&gt;)inArguments[1];
	
	var consts = getAPI().getConsts();
	var customConsts = getAPI().getCustomConsts();
	bool success = false;
	
	string outDescription = "";
	
	//before anything else, check if the |uniquify option is set:
	bool uniquifyIDs = false;
	if(inMarkup.Contains("|uniquify"))
	{
		uniquifyIDs = true;
		inMarkup = inMarkup.Replace("|uniquify", "");
	}
	
	ReadOnlyCollection&lt;string&gt; possibleOptions = customConsts.getListConst("replaceDescriptionMarkupKind_one_listofresources list_of_options", out success);
	if(!success)
	{
		addDebugMessage(inScriptInstance, "list of options could not be found");
		return new List&lt;object&gt;() { outDescription };
	}
	
	string default_option = "";

	//find the string between the | and : characters:
	string optionString = default_option;
	int optionStartLoc = inMarkup.IndexOf("|");
	int optionEndLoc = inMarkup.IndexOf(":");
	if((optionStartLoc != -1) &amp;&amp; (optionEndLoc != -1))
	{
		string toCheck = inMarkup.Substring(optionStartLoc + 1, optionEndLoc - (optionStartLoc + 1));
		if(possibleOptions.Contains(toCheck.ToLower()))
		{
			optionString = toCheck.ToLower();
		}
	}
	
	//gather the list of resources from the indicated number:
	string id = inMarkup.Substring(optionEndLoc + 1);
	id = id.Substring(0, id.Length - 1);
	bool error = false;
	if(Int64.TryParse(id, out Int64 idAsInt))
	{
		if(idAsInt &gt;= inListsOfResources.Count)
		{
			addDebugMessage(inScriptInstance, "markup indicated invalid index of list of resources, index=" + idAsInt);
			error = true;
		}
		else
		{
			if(customScripts.doesCustomScriptExistWithName("replaceDescriptionMarkupKind_one_listofresources" + "_" + optionString))
			{
				if(customScripts.runCustomScriptCheckTypes("replaceDescriptionMarkupKind_one_listofresources" + "_" + optionString, new List&lt;object&gt;() { inListsOfResources[(int)idAsInt] }, out List&lt;object&gt; replacedMarkup, false, typeof(string)))
				{
					outDescription = (string)replacedMarkup[0];
				}
				else
				{
					addDebugMessage(inScriptInstance, "markup kind script replaceDescriptionMarkupKind_one_listofresources" + "_" + optionString + " did not execute correctly; something went wrong; terminating replacement");
					error = true;
				}
			}
			else
			{
				addDebugMessage(inScriptInstance, "markup kind script replaceDescriptionMarkupKind_one_listofresources" + "_" + optionString + " does not exist despite markup kind and option being valid; something went wrong; terminating replacement");
				error = true;
			}
		}
	}
	else
	{
		addDebugMessage(inScriptInstance, "unable to parse markup for id; id string=\"" + id + "\" and markup=" + inMarkup);
		error = true;
	}
	
	if(error)
	{
		string errorReplacer = customConsts.getStringConst("replaceDescriptionMarkupKind_one_listofresources invalid_resourcepool_error before_replace_text", out success);
		if(!success) errorReplacer = "INVALID_LISTOFRESOURCES";
		outDescription = errorReplacer;
	}
	
    return new List&lt;object&gt;() { outDescription };
	</b>
	</i1>
	
	</mCustomScriptsList>
  </customscripts>
  
</core_data>