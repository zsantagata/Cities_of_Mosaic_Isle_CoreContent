<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>
	<customconsts name="default">
		<mCustomVariableList kind="add">
			
			<!-- logging const for a custom script is always "log_script_custom script undercase_script_name" where undercase_script_name is the thing you put as the name, but with all capitals made lowercase -->
			<i1><a>log_script_custom script battleaicanpopbeabducted</a> <b>int</b> <c>1</c></i1>
		</mCustomVariableList>
	</customconsts>
	
  <!-- this file holds the implementation of a custom script which checks if a pop can be abducted -->
  <customscripts name="default">
	<mCustomScriptsList kind="add">
  
	<!-- can pop be abducted has one input: IFPop inPop.  It has one output: bool outPopCanBeAbducted. -->
	<!-- this script is called by other scripts which are pathfinding for pops which want to abduct others -->
	<i1><a>battleAICanPopBeAbducted</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFPop)}
	    }, out _))
	  {
		  throw new ArgumentException("battleAICanPopBeAbducted custom script received invalid arguments");
		  return null;
	  }
				
	  IFPop inPop = (IFPop)inArguments[0];
	  
      var consts = getAPI().getConsts();
	  var customConsts = getAPI().getCustomConsts();
	  var variableHandler = getAPI().getVariableHandler();
	  
	  //sanity check: the input pop should not be null
	  if(inPop == null)
	  {
		  throw new ArgumentException("battleAICanPopBeAbducted custom script received invalid argument: the input pop should not be null");
		  return null;
	  }
	  
	  //conditions:
	  //A) the pop must not be an enemy pop
	  //B) the pop must be wounded and not dead
	  //C) the pop must be on the local map
	  
	  bool first_condition = !getAPI().isHostileCommunity(inPop.getCommunity());
	  bool second_condition = inPop.isWounded() &amp;&amp; !inPop.isDead();
	  bool third_condition = (inPop.getPopLocation() == IFPop.ePopLocation.cOnCommunityMap);
	  
	  List&lt;object&gt; toReturn = new List&lt;object&gt;() { first_condition &amp;&amp; second_condition &amp;&amp; third_condition };
	  return toReturn;
	</b>
	</i1>
	
	</mCustomScriptsList>
  </customscripts>
  
</core_data>