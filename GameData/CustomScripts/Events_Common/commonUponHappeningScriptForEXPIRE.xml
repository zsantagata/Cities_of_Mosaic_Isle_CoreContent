<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>
	<customconsts name="default">
		<mCustomVariableList kind="add">
			<!-- consts related to this file's scripts can have any name (though they probably shouldn't overwrite other consts) -->
			
			<!-- these are the default values used if the EXPIRE event itself does not provide any: -->
			<i1><a>commonUponHappeningScriptForEXPIRE base_desire_to_stay default</a> <b>double</b> <c>1.0</c></i1>
			<i1><a>commonUponHappeningScriptForEXPIRE wound_desire_to_stay_additive default</a> <b>double</b> <c>-2.5</c></i1>
			<i1><a>commonUponHappeningScriptForEXPIRE ill_desire_to_stay_additive default</a> <b>double</b> <c>-1.0</c></i1>
			<i1><a>commonUponHappeningScriptForEXPIRE health_max_additive default</a> <b>double</b> <c>0.2</c></i1>
			<i1><a>commonUponHappeningScriptForEXPIRE health_min_additive default</a> <b>double</b> <c>-1.0</c></i1>
			<i1><a>commonUponHappeningScriptForEXPIRE other_pops_dead_additive default</a> <b>double</b> <c>-0.7</c></i1>
			<i1><a>commonUponHappeningScriptForEXPIRE other_pops_offmap_additive default</a> <b>double</b> <c>0.0</c></i1>
			<i1><a>commonUponHappeningScriptForEXPIRE collective_ratio default</a> <b>double</b> <c>1.0</c></i1>
			
			<!-- logging const for a custom script is always "log_script_custom script undercase_script_name" where undercase_script_name is the thing you put as the name, but with all capitals made lowercase -->
			<i1><a>log_script_custom script commonUponHappeningScriptForEXPIRE</a> <b>int</b> <c>1</c></i1>
		</mCustomVariableList>
	</customconsts>
	
  <!-- this file holds the implementation of a custom script which performs many of the common actions expected of an EXPIRE event's uponHappening script -->
  <!-- the summary is:
A) assemble common parameters for desires of pops to stay on map
B) fetch the original IFEventStatus
C) fetch the list of IFEventReport UIDs associated with this EXPIRE event
D) for each IFEventReport UID in the list from C, do the following:

E) check the direct timer: if it is valid, then determine if we are past the timer, otherwise ignore it
F) fetch the list of visiting pops associated with the IFEventReport UID.  If it is not valid, skip to H
G) calculate (fetch specific [variable] parameters) and store the desires of visiting pops to stay on the map (remember that pop desire to stay on the map can only decrease from the same event) for visiting pops.  Determine if there are any visiting pops left who want to stay
H) fetch the list of loyal on-map pops associated with the IFEventReport UID.  If it is not valid, skip to J
I) determine if there are no alive loyal on-map pops from this event that should be all three
J) if any of the non-ignored conditions say the event should expire, add it to the list of expiring events
K) for each IFEventReport UID in the list from J, do the following:

L) perform the specific and appropriate task for the event expiring (this means add the IFEventReport UID to the return values and let the uponHappening script take care of it)
M) clear variables associated with the expire event (but not any non-expire variables!)

N) if the size of the IFEventReport list from K and C are the same, disable the EXPIRE event and clear force date.  Otherwise, force date tomorrow.
  -->
  <!-- if something needs to happen not in this summary or differently, the specific EXPIRE event's uponHappening script must take care of it instead -->
  <customscripts name="default">
	<mCustomScriptsList kind="add">
  
	<!-- inputs to the function:
	IFEventStatus inEventStatus, //this should be the event status of the EXPIRE event
	
	//note for these input parameters, double.MaxValue will be used to indicate "use default values"
	//also note that variableHandler could contain values that change these for a specific event report UID; these are "base"
	double inBaseDesireToStay,
	double inWoundDesireToStayAdditive,
	double inIllnessDesireToStayAdditive,
	double inHealthMaxDesireToStayAdditive, //based on actual health goes from this to the below
	double inHealthMinDesireToStayAdditive,
	double inOtherPopsInConsiderationDeadAdditive, //per other pop dead
	double inOtherPopsInConsiderationOffMapAdditive, //per other pop off map, including ones who left already or never came on the map
	double inCollectiveRatio //from 0.0 to 1.0 (besides double.MaxValue).  A pop's final desire to stay value will be (1.0d - this) * their own + this * average of all pops in consideration for the same event report UID
	-->
	
	<!-- output: 
	List<Int64> outEventReportUIDsNowExpired //will not be null but may be empty
	-->
	<i1><a>commonUponHappeningScriptForEXPIRE</a>
	<b>
	    //input count and type check:
	    var customScripts = getAPI().getCustomScripts();
	    if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		    {typeof(IFEventStatus), typeof(double), typeof(double), typeof(double), typeof(double),
			 typeof(double), typeof(double), typeof(double), typeof(double)}
	      }, out _))
	    {
			throw new ArgumentException("commonUponHappeningScriptForEXPIRE custom script received invalid arguments");
			return null;
	    }
		
		IFEventStatus inEventStatus = (IFEventStatus)inArguments[0];
		double inBaseDesireToStay = (double)inArguments[1];
		double inWoundDesireToStayAdditive = (double)inArguments[2];
		double inIllnessDesireToStayAdditive = (double)inArguments[3];
		double inHealthMaxDesireToStayAdditive = (double)inArguments[4];
		double inHealthMinDesireToStayAdditive = (double)inArguments[5];
		double inOtherPopsInConsiderationDeadAdditive = (double)inArguments[6];
		double inOtherPopsInConsiderationOffMapAdditive = (double)inArguments[7];
		double inCollectiveRatio = (double)inArguments[8];
		
		if(inEventStatus == null)
		{
			throw new ArgumentException("commonUponHappeningScriptForEXPIRE custom script received invalid arguments: inEventStatus cannot be null");
			return null;
		}
		
        var consts = getAPI().getConsts();
		var customConsts = getAPI().getCustomConsts();
		var variableHandler = getAPI().getVariableHandler();
		
		List&lt;Int64&gt; outEventReportUIDsNowExpired = new List&lt;Int64&gt;();
		List&lt;object&gt; toReturn = new List&lt;object&gt;();
		bool success = false;
		
		Int64 currentDate = getAPI().getCalendar().getCurrentDate();
		
		//custom consts:
		double baseDesireToStay = customConsts.getDoubleConst("commonUponHappeningScriptForEXPIRE base_desire_to_stay default", out success);
		if(!success) baseDesireToStay = 1.0d;
		double woundDesireToStay = customConsts.getDoubleConst("commonUponHappeningScriptForEXPIRE wound_desire_to_stay_additive default", out success);
		if(!success) woundDesireToStay = -2.5d;
		double illnessDesireToStay = customConsts.getDoubleConst("commonUponHappeningScriptForEXPIRE ill_desire_to_stay_additive default", out success);
		if(!success) illnessDesireToStay = -1.0d;
		double healthMaxDesireToStay = customConsts.getDoubleConst("commonUponHappeningScriptForEXPIRE health_max_additive default", out success);
		if(!success) healthMaxDesireToStay = 0.2d;
		double healthMinDesireToStay = customConsts.getDoubleConst("commonUponHappeningScriptForEXPIRE health_min_additive default", out success);
		if(!success) healthMinDesireToStay = -1.0d;
		double otherPopsDeadDesireToStay = customConsts.getDoubleConst("commonUponHappeningScriptForEXPIRE other_pops_dead_additive default", out success);
		if(!success) otherPopsDeadDesireToStay = -0.7d;
		double otherPopsOffMapDesireToStay = customConsts.getDoubleConst("commonUponHappeningScriptForEXPIRE other_pops_offmap_additive default", out success);
		if(!success) otherPopsOffMapDesireToStay = 0.0d;
		double collectiveRatio = customConsts.getDoubleConst("commonUponHappeningScriptForEXPIRE collective_ratio default", out success);
		if(!success) collectiveRatio = 1.0d;
		
		//A)
		if(inBaseDesireToStay == double.MaxValue)
			inBaseDesireToStay = baseDesireToStay;
		if(inWoundDesireToStayAdditive == double.MaxValue)
			inWoundDesireToStayAdditive = woundDesireToStay;
		if(inIllnessDesireToStayAdditive == double.MaxValue)
			inIllnessDesireToStayAdditive = illnessDesireToStay;
		if(inHealthMaxDesireToStayAdditive == double.MaxValue)
			inHealthMaxDesireToStayAdditive = healthMaxDesireToStay;
		if(inHealthMinDesireToStayAdditive == double.MaxValue)
			inHealthMinDesireToStayAdditive = healthMinDesireToStay;
		if(inOtherPopsInConsiderationDeadAdditive == double.MaxValue)
			inOtherPopsInConsiderationDeadAdditive = otherPopsDeadDesireToStay;
		if(inOtherPopsInConsiderationOffMapAdditive == double.MaxValue)
			inOtherPopsInConsiderationOffMapAdditive = otherPopsOffMapDesireToStay;
		if(inCollectiveRatio == double.MaxValue)
			inCollectiveRatio = collectiveRatio;
		
		//B)
		IFEvent expireEvt = (IFEvent)getAPI().getMOFromMOID("events", inEventStatus.getUID());
		string nonExpireName = expireEvt.getInternalName().Replace(" EXPIRE", "");
		IFEvent nonExpireEvt = (IFEvent)getAPI().getMOFromInternalName("events", nonExpireName);
		if((nonExpireEvt == null) || (nonExpireEvt == expireEvt))
		{
			addDebugMessage(inScriptInstance, "could not find non-expiry event from EXPIRE event " + expireEvt.getInternalName());
			toReturn.Add(outEventReportUIDsNowExpired);
			return toReturn;
		}
		
		IFEventStatus nonExpireEvtStatus = (IFEventStatus)getAPI().getSO("eventstatuses", nonExpireEvt.getMOID());
		if(nonExpireEvtStatus == null)
		{
			addDebugMessage(inScriptInstance, "could not find non-expiry event status for non-EXPIRE event " + nonExpireEvt.getInternalName());
			toReturn.Add(outEventReportUIDsNowExpired);
			return toReturn;
		}
		
		//C)
		string listName = "evt_" + expireEvt.getInternalName() + "_listOfEventReportUIDsActive";
		IFConnectedVariable cvListOfUIDs = null;
		List&lt;Int64&gt; listOfUIDs = new List&lt;Int64&gt;();
		if(variableHandler.connectedVariableExists(listName))
		{
			cvListOfUIDs = variableHandler.getConnectedVariable(listName);
			foreach(var lower in cvListOfUIDs.getLowers())
			{
				if(lower.getVariableKind() == APIconsts.eVariableKind.cInt)
				{
					listOfUIDs.Add(lower.getVariableAsInt());
				}
			}
		}
		else
		{
			addDebugMessage(inScriptInstance, "could not find connected-variable list of event report UIDs active");
		}
		
		//D
		if(customScripts.runCustomScriptCheckTypes("setupFetchOrClearVariablesForEventForEXPIRE", new List&lt;object&gt;() { nonExpireEvtStatus, -1L, false, false, null, null, -1L }, out List&lt;object&gt; variablesForEventUID, false,
			typeof(Dictionary&lt;Int64, List&lt;IFPop&gt;&gt;), typeof(Dictionary&lt;Int64, List&lt;IFPop&gt;&gt;), typeof(Dictionary&lt;Int64, Int64&gt;)))
		{
			Dictionary&lt;Int64, List&lt;IFPop&gt;&gt; listsOfVisitingPops = (Dictionary&lt;Int64, List&lt;IFPop&gt;&gt;)variablesForEventUID[0];
			Dictionary&lt;Int64, List&lt;IFPop&gt;&gt; listsOfLoyalOnMapPops = (Dictionary&lt;Int64, List&lt;IFPop&gt;&gt;)variablesForEventUID[1];
			Dictionary&lt;Int64, Int64&gt; directTimers = (Dictionary&lt;Int64, Int64&gt;)variablesForEventUID[2];
			addDebugMessage(inScriptInstance, "found lists associated with event " + nonExpireEvt.getInternalName() + ", count=" + directTimers.Count + " (should match listOfUIDs count=" + listOfUIDs.Count + ")");
		
			foreach(Int64 uid in listOfUIDs)
			{
				//E)
				bool directTimerValidAndExpired = false;
				if(directTimers.ContainsKey(uid))
				{
					if((directTimers[uid] &gt; 0) &amp;&amp; (directTimers[uid] &lt; currentDate))
					{
						directTimerValidAndExpired = true;
					}
				}
				
				//F)
				Int64 noVisitingPopsTrueIfNonZero = variableHandler.getInt("evt_" + expireEvt.getInternalName() + "_noVisitingPopsTrueIfNonZeroFor" + uid, out success);
				if(!success) noVisitingPopsTrueIfNonZero = 0;
				List&lt;IFPop&gt; visitingPopsForEventReport = null;
				if(listsOfVisitingPops.ContainsKey(uid))
				{
					visitingPopsForEventReport = listsOfVisitingPops[uid];
				}
				bool popsVisitingValid = (noVisitingPopsTrueIfNonZero == 0) &amp;&amp; (visitingPopsForEventReport != null);
				bool popsVisitingValidAndExpired = false;
			
				//G
				if(popsVisitingValid)
				{
					//first, count number of pops dead and off map:
					int popCountDead = 0;
					int popCountOffMap = 0;
					foreach(IFPop pop in visitingPopsForEventReport)
					{
						if(pop.isDead())
							popCountDead++;
						if(!getAPI().getPopsWithinLocalCommunityMap().Contains(pop))
							popCountOffMap++;
					}
					
					double HealthMin = consts.getHealthMin();
					double HealthMax = consts.getHealthMax();
					
					Dictionary&lt;IFPop, double&gt; popDesiresToStay = new Dictionary&lt;IFPop, double&gt;();
					double totalDesireToStay = 0.0d;
					foreach(IFPop pop in visitingPopsForEventReport)
					{
						//per pop: fetch specific variables relating to this pop's desire to stay:
						double baseDesireToStayOverride = variableHandler.getConnectedDouble("pop_" + pop.getUID() + "_desireToStayModifier_baseDesireToStayOverride", out success);
						if(!success) baseDesireToStayOverride = baseDesireToStay;
						double woundDesireToStayOverride = variableHandler.getConnectedDouble("pop_" + pop.getUID() + "_desireToStayModifier_woundDesireToStayOverride", out success);
						if(!success) woundDesireToStayOverride = woundDesireToStay;
						double illnessDesireToStayOverride = variableHandler.getConnectedDouble("pop_" + pop.getUID() + "_desireToStayModifier_illnessDesireToStayOverride", out success);
						if(!success) illnessDesireToStayOverride = illnessDesireToStay;
						double healthMaxDesireToStayOverride = variableHandler.getConnectedDouble("pop_" + pop.getUID() + "_desireToStayModifier_healthMaxDesireToStayOverride", out success);
						if(!success) healthMaxDesireToStayOverride = healthMaxDesireToStay;
						double healthMinDesireToStayOverride = variableHandler.getConnectedDouble("pop_" + pop.getUID() + "_desireToStayModifier_healthMinDesireToStayOverride", out success);
						if(!success) healthMinDesireToStayOverride = healthMinDesireToStay;
						double otherPopsDeadDesireToStayOverride = variableHandler.getConnectedDouble("pop_" + pop.getUID() + "_desireToStayModifier_otherPopsDeadDesireToStayOverrideOverride", out success);
						if(!success) otherPopsDeadDesireToStayOverride = otherPopsDeadDesireToStay;
						double otherPopsOffMapDesireToStayOverride = variableHandler.getConnectedDouble("pop_" + pop.getUID() + "_desireToStayModifier_otherPopsOffMapDesireToStayOverride", out success);
						if(!success) otherPopsOffMapDesireToStayOverride = otherPopsOffMapDesireToStay;
						
						double popDesire = baseDesireToStayOverride;
						if(pop.isWounded())
							popDesire += woundDesireToStayOverride;
						if(pop.isIll())
							popDesire += illnessDesireToStayOverride;
						popDesire += healthMinDesireToStayOverride + (healthMaxDesireToStayOverride - healthMinDesireToStayOverride) * (pop.getOverallHealth() - HealthMin) / (HealthMax - HealthMin);
						popDesire += popCountDead * otherPopsDeadDesireToStayOverride;
						popDesire += otherPopsOffMapDesireToStayOverride * popCountOffMap;
						
						popDesiresToStay.Add(pop, popDesire);
						totalDesireToStay += popDesire;
					}
					totalDesireToStay /= visitingPopsForEventReport.Count;
					
					Int64 latestDateUntilWhichAnyPopWishesToStay = Int64.MinValue;
					foreach(IFPop pop in visitingPopsForEventReport)
					{
						double collectiveRatioOverride = variableHandler.getConnectedDouble("pop_" + pop.getUID() + "_desireToStayModifier_collectiveRatioOverride", out success);
						if(!success) collectiveRatioOverride = collectiveRatio;
						collectiveRatioOverride = Math.Min(1.0d, Math.Max(0.0d, collectiveRatioOverride));
						double newCollectiveValue = popDesiresToStay[pop] * (1 - collectiveRatioOverride) + collectiveRatioOverride * totalDesireToStay;
						addDebugMessage(inScriptInstance, pop.getDebugName() + " has desire to stay from event report uid=" + uid + " of " + newCollectiveValue + " from non-collective value of " + popDesiresToStay[pop]);
						
						//store desire to stay:
						string thisEventThisPopDesireName = "evt" + nonExpireEvtStatus.getUID() + "report" + uid + "_desireToStayOnMap_pop" + pop.getUID();
						IFConnectedVariable thisEventCV = variableHandler.getConnectedVariable(thisEventThisPopDesireName);
						if(thisEventCV != null)
						{
							if(thisEventCV.getExpirationDate() &gt; latestDateUntilWhichAnyPopWishesToStay)
								latestDateUntilWhichAnyPopWishesToStay = thisEventCV.getExpirationDate();
						
							if(newCollectiveValue &lt; thisEventCV.getVariableAsDouble())
								thisEventCV.setVariable(newCollectiveValue);
						}
					}
					
					if(latestDateUntilWhichAnyPopWishesToStay &lt;= currentDate)
					{
						popsVisitingValidAndExpired = true;
					}
				}

				//H
				Int64 noLoyalOnMapPopsTrueIfNonZero = variableHandler.getInt("evt_" + expireEvt.getInternalName() + "_noLoyalOnMapPopsTrueIfNonZeroFor" + uid, out success);
				if(!success) noLoyalOnMapPopsTrueIfNonZero = 0;
				List&lt;IFPop&gt; loyalOnMapPopsForEventReport = null;
				if(listsOfLoyalOnMapPops.ContainsKey(uid))
				{
					loyalOnMapPopsForEventReport = listsOfLoyalOnMapPops[uid];
				}
				bool popsLoyalOnMapValid = (noLoyalOnMapPopsTrueIfNonZero == 0) &amp;&amp; (loyalOnMapPopsForEventReport != null);
				bool popsLoyalOnMapValidAndExpired = false;
				
				//I
				if(popsLoyalOnMapValid)
				{
					Int64 nowInvalidCount = 0;
					foreach(IFPop pop in loyalOnMapPopsForEventReport)
					{
						if(pop.isDead() || !getAPI().getPopsWithinLocalCommunityMap().Contains(pop) || (pop.getCommunity() != getAPI().getLocalCommunity()))
						{
							nowInvalidCount++;
						}
					}
					if(nowInvalidCount == loyalOnMapPopsForEventReport.Count)
					{
						popsLoyalOnMapValidAndExpired = true;
					}
				}
				
				if(directTimerValidAndExpired || popsVisitingValidAndExpired || popsLoyalOnMapValidAndExpired)
				{
					//J, K, L
					addDebugMessage(inScriptInstance, "eventReportUID=" + uid + " is now expired because: directTimer?" + (directTimerValidAndExpired ? "yes" : "no")
						+ " visitorsExpired?" + (popsVisitingValidAndExpired ? "yes" : "no")
						+ " loyalPopsNotValid?" + (popsLoyalOnMapValidAndExpired ? "yes" : "no"));
					outEventReportUIDsNowExpired.Add(uid);
					
					//M
					customScripts.runCustomScriptCheckTypes("setupFetchOrClearVariablesForEventForEXPIRE", new List&lt;object&gt;() { nonExpireEvtStatus, uid, false, true, null, null, 0L }, out _, false,
						typeof(Dictionary&lt;Int64, List&lt;IFPop&gt;&gt;), typeof(Dictionary&lt;Int64, List&lt;IFPop&gt;&gt;), typeof(Dictionary&lt;Int64, Int64&gt;));
					customScripts.runCustomScript("clearPopsWantToStayFromEvent", new List&lt;object&gt;() { nonExpireEvtStatus, uid, "" }, out _);
				}
				else
				{
					addDebugMessage(inScriptInstance, "eventReportUID=" + uid + " is not yet expired (directTimer=" + (directTimers.ContainsKey(uid) ? directTimers[uid] : "N/A") + ")" );
				}
			}
		}
		
		//N
		if(outEventReportUIDsNowExpired.Count == listOfUIDs.Count)
		{
			//disable the EXPIRE event and clear force date
			//force date is automatically cleared when it happens
			inEventStatus.setEnabled(false);
		}
		else
		{
			//make force date tomorrow
			inEventStatus.setForceDate(currentDate + 1);
		}
		
		return new List&lt;object&gt;() { outEventReportUIDsNowExpired };
	</b>
	</i1>
	
	</mCustomScriptsList>
  </customscripts>
  
</core_data>