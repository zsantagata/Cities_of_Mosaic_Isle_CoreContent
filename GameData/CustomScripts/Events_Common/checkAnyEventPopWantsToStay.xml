<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>
	<customconsts name="default">
		<mCustomVariableList kind="add">
			<!-- consts related to this file's scripts can have any name (though they probably shouldn't overwrite other consts) -->
			
			<!-- logging const for a custom script is always "log_script_custom script undercase_script_name" where undercase_script_name is the thing you put as the name, but with all capitals made lowercase -->
			<i1><a>log_script_custom script checkAnyEventPopWantsToStay</a> <b>int</b> <c>1</c></i1>
		</mCustomVariableList>
	</customconsts>
	
  <!-- this file holds the implementation of a custom script which checks if a pop is a Wanderer or other neutral, is alive, is on the local map, and wants to stay on the local map -->
  <!-- if any condition is false, this script returns false -->
  <customscripts name="default">
	<mCustomScriptsList kind="add">
  
	<!-- this script is the common script for checking if the pops have gotten fed up yet and decided to leave -->
	<!-- inputs to the function:
		IFEventStatus inEventStatus,
		Int64 inEventReportUID
	-->
	
	<!-- output: bool outAnyPopsOnMapWantToStay
	-->
	<i1><a>checkAnyEventPopWantsToStay</a>
	<b>
	    //input count and type check:
	    var customScripts = getAPI().getCustomScripts();
	    if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		    {typeof(IFEventStatus), typeof(Int64)}
	      }, out _))
	    {
			throw new ArgumentException("checkAnyEventPopWantsToStay custom script received invalid arguments");
			return null;
	    }
		
		IFEventStatus inEventStatus = (IFEventStatus)inArguments[0];
		Int64 inEventReportUID = (Int64)inArguments[1];
		
		if(inEventStatus == null)
		{
			throw new ArgumentException("checkAnyEventPopWantsToStay custom script received invalid arguments: inEventStatus cannot be null");
			return null;
		}
		if(inEventReportUID &lt; 0)
		{
			throw new ArgumentException("checkAnyEventPopWantsToStay custom script received invalid arguments: inEventReportUID cannot be negative");
			return null;
		}
		
        var consts = getAPI().getConsts();
		var customConsts = getAPI().getCustomConsts();
		var variableHandler = getAPI().getVariableHandler();
		
		bool outAnyPopsOnMapWantToStay = false;
		
		if(customScripts.runCustomScriptCheckTypes("storeOrFetchPopsForEvent", new List&lt;object&gt;() { inEventStatus, inEventReportUID, false, null, "", Int64.MaxValue, 0L, 0.0d }, out List&lt;object&gt; popsRetrieved, false, typeof(List&lt;IFPop&gt;)))
		{
			List&lt;IFPop&gt; popsToCheckIfOnMap = (List&lt;IFPop&gt;)popsRetrieved[0];
			foreach(IFPop pop in popsToCheckIfOnMap)
			{
				if(customScripts.runCustomScriptCheckTypes("checkForeignPopIsOnMapAndWantsToStay", new List&lt;object&gt;() { pop }, out List&lt;object&gt; popWantsToStay, false, typeof(bool)))
				{
					if((bool)popWantsToStay[0])
					{
						addDebugMessage(inScriptInstance, "pop " + pop.getDebugName() + " wants to stay on map; ending loop early");
						outAnyPopsOnMapWantToStay = true;
						break;
					}
				}
			}
			if(!outAnyPopsOnMapWantToStay)
				addDebugMessage(inScriptInstance, "no pop of " + popsToCheckIfOnMap.Count + " wants to stay on map");
		}
		
	    return new List&lt;object&gt;() { outAnyPopsOnMapWantToStay };
	</b>
	</i1>
	
	</mCustomScriptsList>
  </customscripts>
  
</core_data>