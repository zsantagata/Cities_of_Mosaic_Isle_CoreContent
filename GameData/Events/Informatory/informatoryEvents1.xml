<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>
  <igEvent name="Race Leader Elected">
    <mTagList>
      <i>Leader</i>
      <i>Racial</i>
      <i>Foundational</i>
    </mTagList>
    <mTypeOfEvent>0</mTypeOfEvent>
    <mSimultaneousWithOccurrence>0</mSimultaneousWithOccurrence>
    <mDefaultEnabled>1</mDefaultEnabled>
    <mDefaultMTTH>2</mDefaultMTTH>
    <mScriptWhichGatesHappening>

            var consts = getAPI().getConsts();
            var customConsts = getAPI().getCustomConsts();
            var variableHandler = getAPI().getVariableHandler();

            List&lt;object&gt; toReturn = new List&lt;object&gt;();
            IFCommunity localCommunity = getAPI().getLocalCommunity();
            IFLeaderCollection leaders = localCommunity.getLeaderCollection();
            Int64 popCountThreshold = customConsts.getIntConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_popCountThreshold&quot;, out bool success);
            if (!success) popCountThreshold = 12;

            foreach (var kvpair in localCommunity.getLoyalPopsByRace(true, false))
            {
                if ((!leaders.hasRaceLeader(kvpair.Key)) &amp;&amp; (kvpair.Value.Count &gt;= popCountThreshold))
                {
                    toReturn.Add(true);
                    return toReturn;
                }
            }
            toReturn.Add(false);
            return toReturn;
    </mScriptWhichGatesHappening>
    <mScriptUponHappening>

            if (inArguments.Length &lt; 2)
            {
                return null;
            }

            var consts = getAPI().getConsts();
            var customConsts = getAPI().getCustomConsts();
            var variableHandler = getAPI().getVariableHandler();
            IFEventStatus status = (IFEventStatus)inArguments[0];
            IFEventReport report = (IFEventReport)inArguments[1];
            UInt64 reportUID = report.getUID();

            IFCommunity localCommunity = getAPI().getLocalCommunity();
            IFLeaderCollection leaders = localCommunity.getLeaderCollection();
            Int64 popCountThreshold = customConsts.getIntConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_popCountThreshold&quot;, out bool success);
            if (!success) popCountThreshold = 12;

            IFRace raceInQuestion = null;
            foreach (var kvpair in localCommunity.getLoyalPopsByRace(true, false))
            {
                if ((!leaders.hasRaceLeader(kvpair.Key)) &amp;&amp; (kvpair.Value.Count &gt;= popCountThreshold))
                {
                    raceInQuestion = kvpair.Key;
                    break;
                }
            }
            if (raceInQuestion == null) //???someone must have messed something up in the gating script, dunno who ^^
                return null;
            //choose a Race Leader.  Industry Leaders are more likely to become Race Leader (even if unhealthy), due to already-existing respect for them, and unhealthy pops are less likely to become Race Leader:
            List&lt;IFPop&gt; industryLeaders = new List&lt;IFPop&gt;();
            List&lt;IFPop&gt; healthyPops = new List&lt;IFPop&gt;();
            List&lt;IFPop&gt; unhealthyPops = new List&lt;IFPop&gt;();
            foreach (IFPop pop in localCommunity.getLoyalPopsByRace(true, false)[raceInQuestion])
            {
                if (leaders.getIndustryLedByPop(pop) != null)
                {
                    industryLeaders.Add(pop);
                }
                else if (pop.isPopNoHealthStatus())
                {
                    healthyPops.Add(pop);
                }
                else
                {
                    unhealthyPops.Add(pop);
                }
            }
            double industryLeaderProbMult = customConsts.getDoubleConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_industryLeaderProbMult&quot;, out success);
            if (!success) industryLeaderProbMult = 4.0d;
            double unhealthyPopProbMult = customConsts.getDoubleConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_unhealthyPopProbMult&quot;, out success);
            if (!success) unhealthyPopProbMult = 0.33d;

            double totalWeight = industryLeaders.Count * industryLeaderProbMult + healthyPops.Count + unhealthyPops.Count * unhealthyPopProbMult;
            if (totalWeight == 0.0d)
                return null;
            double randomTarget = getAPI().calcRand() * totalWeight;
            IFPop newRaceLeader = null;
            if (randomTarget &lt; industryLeaders.Count * industryLeaderProbMult)
            {
                //choose a random industry leader:
                newRaceLeader = industryLeaders[(int)getAPI().calcRandIntUnder(industryLeaders.Count)];
            }
            else if (randomTarget &lt; (industryLeaders.Count * industryLeaderProbMult + healthyPops.Count))
            {
                //choose a healthy pop:
                newRaceLeader = healthyPops[(int)getAPI().calcRandIntUnder(healthyPops.Count)];
            }
            else
            {
                //choose an unhealthy pop:
                newRaceLeader = unhealthyPops[(int)getAPI().calcRandIntUnder(unhealthyPops.Count)];
            }
            leaders.setRaceLeader(newRaceLeader, raceInQuestion);

            //calculate contention:
            //how I model this is &quot;this is the percentage of pops of the race that preferred the second most popular choice&quot;
            double contentionHighThreshold = customConsts.getDoubleConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_contentionHighThreshold&quot;, out success);
            if (!success) contentionHighThreshold = 40.0d;
            double contentionLowThreshold = customConsts.getDoubleConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_contentionLowThreshold&quot;, out success);
            if (!success) contentionLowThreshold = 10.0d;
            double contentionMax = customConsts.getDoubleConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_contentionMax&quot;, out success);
            if (!success) contentionMax = 50.0d;
            double contentionMin = customConsts.getDoubleConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_contentionMin&quot;, out success);
            if (!success) contentionMin = 0.0d;

            double contention = getAPI().calcRand() * (contentionMax - contentionMin) + contentionMin;

            //shape the menu text, and also add the happiness effect from contention:
            string reportText = customConsts.getStringConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_reportText&quot;, out success);
            if (!success) reportText = "The [0] have chosen [1] to represent them.";
            report.setReportTextOverride(reportText.Replace("[0]", raceInQuestion.getCollectiveNoun()).Replace("[1]", newRaceLeader.getDisplayName()));

            string contentionString = &quot;&quot;;
            if (contention &gt; contentionHighThreshold)
            {
                string highContentionHappinessString = customConsts.getStringConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_highContentionHappinessString&quot;, out success);
                if (!success) highContentionHappinessString = &quot;Disunity among the [0] has distracted them from troubling the City Leader or the greater community.&quot;;
                string highContentionHappinessName = customConsts.getStringConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_highContentionHappinessName&quot;, out success);
                if (!success) highContentionHappinessName = &quot;Contentious Election&quot;;
                localCommunity.getDomesticComponent().getHappinessCollection().addNewHappinessCauseToday(raceInQuestion,
                    highContentionHappinessName.Replace(&quot;[0]&quot;, raceInQuestion.getCollectiveNoun()).Replace(&quot;[1]&quot;, newRaceLeader.getDisplayName()),
                    highContentionHappinessString.Replace(&quot;[0]&quot;, raceInQuestion.getCollectiveNoun()).Replace(&quot;[1]&quot;, newRaceLeader.getDisplayName()),
                    10.0d, false);

                string highContentionString = customConsts.getStringConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_contentionHighMenuText&quot;, out success);
                if (!success) highContentionString = &quot;Many of the [2] are not pleased with this choice, causing disunity.&quot;;
                contentionString = highContentionString;
            }
            else if (contention &lt; contentionLowThreshold)
            {
                string lowContentionHappinessString = customConsts.getStringConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_lowContentionHappinessString&quot;, out success);
                if (!success) lowContentionHappinessString = &quot;Unity among the [0] behind their new leader has focused them on increasing their status.&quot;;
                string lowContentionHappinessName = customConsts.getStringConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_lowContentionHappinessName&quot;, out success);
                if (!success) lowContentionHappinessName = &quot;United Behind Leader&quot;;
                localCommunity.getDomesticComponent().getHappinessCollection().addNewHappinessCauseToday(raceInQuestion,
                    lowContentionHappinessName.Replace(&quot;[0]&quot;, raceInQuestion.getCollectiveNoun()).Replace(&quot;[1]&quot;, newRaceLeader.getDisplayName()),
                    lowContentionHappinessString.Replace(&quot;[0]&quot;, raceInQuestion.getCollectiveNoun()).Replace(&quot;[1]&quot;, newRaceLeader.getDisplayName()),
                    -10.0d, false);

                string lowContentionString = customConsts.getStringConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_contentionLowMenuText&quot;, out success);
                if (!success) lowContentionString = &quot;Almost all [2] celebrate this choice, and look forward to advancing their place in the community.&quot;;
                contentionString = lowContentionString;
            }
            else
            {
                //no happiness change, but the text is necessary to create:
                string medContentionString = customConsts.getStringConst(&quot;evt_&quot; + &quot;Race Leader Elected&quot; + &quot;_contentionLowMenuText&quot;, out success);
                if (!success) medContentionString = &quot;No shift in [3] attitudes has been made clear.&quot;;
                contentionString = medContentionString;
            }
            report.setResolutionTextOverride(contentionString.Replace(&quot;[0]&quot;, raceInQuestion.getCollectiveNoun()).Replace(&quot;[1]&quot;, newRaceLeader.getDisplayName()).Replace("[2]", raceInQuestion.getPluralNoun()).Replace("[3]", raceInQuestion.getAdjective()));
            return null;
    </mScriptUponHappening>
    <mDefaultMenuText>
A new Race Leader has been elected.
    </mDefaultMenuText>
    <mInvisible>0</mInvisible>
    <mStopTimeAndForceEvaluate>0</mStopTimeAndForceEvaluate>
    <mCanHappenWhileReportPending>1</mCanHappenWhileReportPending>
    <mChoiceCombo>
      <i>
        <name>Are they pleased with their new leader?</name>
        <appears_script>
List&lt;object&gt; toReturn = new List&lt;object&gt;();
                         toReturn.Add(true);
                     return toReturn;
        </appears_script>
        <selection_script>
return null;
        </selection_script>
        <predict_diff>0</predict_diff>
        <prechoice>
Learn more and dismiss report.
        </prechoice>
        <resolution>
It remains to be seen how the new Race Leader will guide their constituents.
        </resolution>
      </i>
    </mChoiceCombo>
  </igEvent>

</core_data>
