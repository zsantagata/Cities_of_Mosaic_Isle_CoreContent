<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>
	<!-- this file implements the pathfinding information and scripts necessary for pathfinding of pops in the EnemyFleeingMapStealing state -->
	<!-- for this purpose, we use custom consts, custom scripts, and pathfinding scripts -->
	<!-- you can think of the custom scripts as help transitioning *into* a state, and the pathfinding script as help transitioning *out of* a state (though the next state might be the same as the current) -->
	<Pathfinding name="default">
		<mListOfPathfindingStatesAndTimings kind="add">
		<!-- intent: A pop is fleeing the map after a successful theft if the pop belongs to an enemy community, and this pop has stolen resources from a distribution building. -->
		<i1><a>EnemyFleeingMapStealing</a> 
		<b>1.5</b><c>40.0</c></i1>
		</mListOfPathfindingStatesAndTimings>
	</Pathfinding>

	<!-- custom consts related to EnemyFleeingMapStealing: -->
	<!-- to prevent collision with other custom consts, the custom consts here will be prepended with pathfinding_state_EnemyFleeingMapStealing -->
	<customconsts name="default">
		<mCustomVariableList kind="add">
			<i1><a>pathfinding_state_EnemyFleeingMapStealing leave_map radius</a> <b>double</b> <c>0.25</c></i1> <!-- if a pop is closer than this to a map edge when pathfinding, it will escape the map -->
			
			<i1><a>pathfinding_state_EnemyFleeingMapStealing history action before_replace_text</a> <b>string</b>
			<c>plundered resources from</c></i1>
			<i1><a>pathfinding_state_EnemyFleeingMapStealing history major_adjective before_replace_text</a> <b>string</b>
			<c>theft</c></i1>
			<i1><a>pathfinding_state_EnemyFleeingMapStealing history minor_adjectives before_replace_text</a> <b>list</b>
			<c>hostile</c></i1>
			<i1><a>pathfinding_state_EnemyFleeingMapStealing history other_effects_strings before_replace_text</a> <b>list</b>
			<c>safety</c></i1>
			<i1><a>pathfinding_state_EnemyFleeingMapStealing history other_effects_values</a> <b>list</b>
			<c>-5</c></i1>
			<i1><a>pathfinding_state_EnemyFleeingMapStealing history costBenefit value</a> <b>int</b>
			<c>-5</c></i1>
			
			<!-- logging const for a custom script is always "log_script_custom script undercase_script_name" where undercase_script_name is the thing you put as the name, but with all capitals made lowercase -->
			<i1><a>log_script_custom script pathfinding_state_enemyfleeingmapstealing_hasvalidtargetfortransitionin</a> <b>int</b> <c>1</c></i1>
			<i1><a>log_script_custom script pathfinding_state_enemyfleeingmapstealing_findtargetfortransitionin</a> <b>int</b> <c>1</c></i1>
			<i1><a>log_script_mscriptsdeterminingstateandtarget state_enemyfleeingmapstealing</a> <b>int</b> <c>1</c></i1>
		</mCustomVariableList>
	</customconsts>
	
	<!-- custom scripts related to EnemyFleeingMapStealing: -->
	<!-- to prevent collision with other custom consts, the custom scripts here will be prepended with pathfinding_state_EnemyFleeingMapStealing -->
	<!-- furthermore, in order to ease detection by other scripts, I will name custom scripts associated with pathfinding states in a consistent manner: -->
	<!-- _hasValidTargetForTransitionIn is a script called to check if a pop can transition *into* this pathfinding state, from any other state.  It will check if any appropriate target exists. -->
	<!-- _findTargetForTransitionIn is a script called when a pop transitions *into* this pathfinding state, from any other state.  It will find an appropriate target for the pop. -->
	<customscripts name="default">
		<mCustomScriptsList kind="add">
			<!-- this script has three input arguments: IFPop inPop, IFMap inLocalMap, and bool inBattleOngoing -->
			<!-- this script returns one value: bool outSuccess.  If there is at least one valid target for the pop to target as it transitions into this state, outSuccess will be true; otherwise it will be false. -->
			<!-- note that this script doesn't have to find *the* target, just *a* target -->
			<i1><a>pathfinding_state_EnemyFleeingMapStealing_hasValidTargetForTransitionIn</a>
			<b>
				//input count and type check:
				var customScripts = getAPI().getCustomScripts();
				if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
					{typeof(IFPop), typeof(IFMap), typeof(bool)}
				  }, out _))
				{
					throw new ArgumentException("pathfinding_state_EnemyFleeingMapStealing_hasValidTargetForTransitionIn custom script received invalid arguments");
					return null;
				}

				IFPop inPop = (IFPop)inArguments[0];
				IFMap inLocalMap = (IFMap)inArguments[1];
				bool inBattleOngoing = (bool)inArguments[2];

				var consts = getAPI().getConsts();
				var customConsts = getAPI().getCustomConsts();
				var variableHandler = getAPI().getVariableHandler();

				addDebugMessage(inScriptInstance, "script pathfinding_state_EnemyFleeingMapStealing_hasValidTargetForTransitionIn is checking if target exists for " + inPop.getDebugName());
				List&lt;object&gt; toReturn = new List&lt;object&gt;();
				
				//two considerations:
				//the first consideration is if the pop is an enemy pop during battle:
				bool first_consideration = getAPI().isHostileCommunity(inPop.getCommunity()) &amp;&amp; inBattleOngoing;
				
				//the second consideration is if this pop has stolen resources:
				IFConnectedVariable listPlunderedResources = variableHandler.getConnectedVariable("battleAI_listOfPlunderedResourceCounts_pop" + inPop.getUID());
				bool second_consideration = (listPlunderedResources != null) &amp;&amp; (listPlunderedResources.getVariableAsInt() != 0L);
				
				toReturn.Add(first_consideration &amp;&amp; second_consideration);
				
				addDebugMessage(inScriptInstance, "return value=" + (bool)toReturn[0]);
				return toReturn;
			</b></i1>
		
			<!-- this script has three input arguments: IFPop inPop, IFMap inLocalMap, and bool inBattleOngoing -->
			<!-- this script returns five values: IFBuilding outBuildingToMoveTo, IFPop outPopToChase, bool outShouldPopTryToLeaveMap, double outPopTargetOnMapX, double outPopTargetOnMapX.  These values are acceptable to return as the final five return values of a script in mScriptsDeterminingStateAndTarget -->
			<i1><a>pathfinding_state_EnemyFleeingMapStealing_findTargetForTransitionIn</a>
			<b>
				//input count and type check:
				var customScripts = getAPI().getCustomScripts();
				if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
					{typeof(IFPop), typeof(IFMap), typeof(bool)}
				  }, out _))
				{
					throw new ArgumentException("pathfinding_state_EnemyFleeingMapStealing_hasValidTargetForTransitionIn custom script received invalid arguments");
					return null;
				}

				IFPop inPop = (IFPop)inArguments[0];
				IFMap inLocalMap = (IFMap)inArguments[1];
				bool inBattleOngoing = (bool)inArguments[2];

				var consts = getAPI().getConsts();
				var customConsts = getAPI().getCustomConsts();
				var variableHandler = getAPI().getVariableHandler();
				
				addDebugMessage(inScriptInstance, "script pathfinding_state_EnemyFleeingMapStealing_findTargetForTransitionIn finding target for " + inPop.getDebugName());
				List&lt;object&gt; toReturn = new List&lt;object&gt;();
				
				//this is simple: just tell the pop to leave the map
				toReturn.Add(null);
				toReturn.Add(null);
				toReturn.Add(true);
				toReturn.Add(-1.0d);
				toReturn.Add(-1.0d);
				return toReturn;
			</b></i1>
		</mCustomScriptsList>
	</customscripts>
	
	<!-- this script is part of the pathfinding scripts called when a pop needs a destination.  This is the default pathfinding script for the category "state_EnemyFleeingMapStealing" -->
	<Pathfinding name="default">
		<mScriptsDeterminingStateAndTarget kind="add">
		<i1>
			<a>
				//input count check:
				if(inArguments.Length &lt; 3)
				{
					return null;
				}

				IFPop inPop = (IFPop)inArguments[0];
				IFMap inLocalMap = (IFMap)inArguments[1];
				bool inBattleOngoing = (bool)inArguments[2];

				var consts = getAPI().getConsts();
				var customConsts = getAPI().getCustomConsts();
				var variableHandler = getAPI().getVariableHandler();
				var customScripts = getAPI().getCustomScripts();

				addDebugMessage(inScriptInstance, "default state_EnemyFleeingMapStealing script is finding target for " + inPop.getDebugName());
				List&lt;object&gt; toReturn = new List&lt;object&gt;();
				
				//if we are close enough to a map edge that we can leave the map, do so:
				bool close_to_map_edge = false;
				double x_loc = inPop.getMapLocationX();
				double y_loc = inPop.getMapLocationY();
				double radiusToLeaveMap = customConsts.getDoubleConst("pathfinding_state_EnemyFleeingMapStealing leave_map radius", out bool success);
				if(!success) radiusToLeaveMap = 0.25d;
				if((x_loc &lt;= radiusToLeaveMap) || (y_loc &lt;= radiusToLeaveMap))
				{
					close_to_map_edge = true;
				}
				else if((inLocalMap.getMapDimensions().Item1 &lt;= (x_loc + radiusToLeaveMap)) || (inLocalMap.getMapDimensions().Item2 &lt;= (y_loc + radiusToLeaveMap)))
				{
					close_to_map_edge = true;
				}
				if(close_to_map_edge)
				{
					inPop.removePopFromMap(IFPop.ePopLocation.cUnspecifiedNowhere);
					addDebugMessage(inScriptInstance, "pop has escaped the battle; removing from map (pathfinding scripts will return information for Idle state)");
					
					//the resources have already been removed from the player's pool, so no need to do anything here but clean up the connected variables:
					IFConnectedVariable listPlunderedResources = variableHandler.getConnectedVariable("battleAI_listOfPlunderedResourceCounts_pop" + inPop.getUID());
					if(listPlunderedResources != null)
					{
						variableHandler.clearConnectedVariable(listPlunderedResources); //the lowers shouldn't be connected to anything else so we don't need to iterate over them and call cleanUpVariable
						
						//make a historical event for this theft:
						string text = customConsts.getStringConst("pathfinding_state_EnemyFleeingMapStealing history action before_replace_text", out success);
						if(!success) text = "plundered resources from";
						string majorAdjective = customConsts.getStringConst("pathfinding_state_EnemyFleeingMapStealing history major_adjective before_replace_text", out success);
						if(!success) majorAdjective = "theft";
						ReadOnlyCollection&lt;string&gt; minorAdjectives = customConsts.getListConst("pathfinding_state_EnemyFleeingMapStealing history minor_adjectives before_replace_text", out success);
						if(!success) minorAdjectives = (new List&lt;string&gt;() { "hostile" }).AsReadOnly();
						
						ReadOnlyCollection&lt;string&gt; otherEffectsNames = customConsts.getListConst("pathfinding_state_EnemyFleeingMapStealing history other_effects_strings before_replace_text", out success);
						if(!success) otherEffectsNames = (new List&lt;string&gt;() { "safety" }).AsReadOnly();
						ReadOnlyCollection&lt;string&gt; otherEffectsValues = customConsts.getListConst("pathfinding_state_EnemyFleeingMapStealing history other_effects_values", out success);
						if(!success) otherEffectsValues = (new List&lt;string&gt;() { "-5" }).AsReadOnly();
						
						Dictionary&lt;string, int&gt; otherEffects = new Dictionary&lt;string, int&gt;();
						for(int i = 0; (i &lt; otherEffectsNames.Count) &amp;&amp; (i &lt; otherEffectsValues.Count); i++)
						{
							if(int.TryParse(otherEffectsValues[i], out int value))
							{
								otherEffects.Add(otherEffectsNames[i], value);
							}
						}
						
						Int64 costBenefit = customConsts.getIntConst("pathfinding_state_EnemyFleeingMapStealing history costBenefit value", out success);
						if(!success) costBenefit = -5;
						
						IFHistoricalOccurrence newHistoryOccurrence = getAPI().createNewHistoricalOccurrenceToday(
							IFHistoryActor.eActorKind.cPop, inPop.getUID(),
							text, majorAdjective, minorAdjectives,
							IFHistoryTarget.eTargetKind.cCommunity, getAPI().getLocalCommunity().getUID(),
							costBenefit, otherEffects);
						getAPI().getLocalCommunity().getHistory().add(newHistoryOccurrence);
					}
					
					toReturn.Add("Idle");
					toReturn.Add(null);
					toReturn.Add(null);
					toReturn.Add(false);
					toReturn.Add(-1.0d);
					toReturn.Add(-1.0d);
					return toReturn;
				}
				
				//if the battle goal has been lost, now start to leave the map with a broken mindset (broken pops don't look to fight or steal goods)
				if(customScripts.runCustomScriptCheckTypes("attemptPathfindStateTransition", new List&lt;object&gt;() {"EnemyFleeingMapBroken", inPop, inLocalMap, inBattleOngoing},
					out List&lt;object&gt; validTgt2, true, typeof(bool), typeof(IFBuilding), typeof(IFPop), typeof(bool), typeof(double), typeof(double)))
				{
					if((bool)validTgt2[0])
					{
						addDebugMessage(inScriptInstance, "custom scripts indicated pop can and should transition to the EnemyFleeingMapBroken state due to: " + " wargoal is now abandoned");
						toReturn.Add("EnemyFleeingMapBroken");
						toReturn.Add((IFBuilding)validTgt2[1]);
						toReturn.Add((IFPop)validTgt2[2]);
						toReturn.Add((bool)validTgt2[3]);
						toReturn.Add((double)validTgt2[4]);
						toReturn.Add((double)validTgt2[5]);
						return toReturn;
					}
				}
				else
				{
					//we failed to call a script correctly somehow.  Transition to Idle instead:
					addDebugMessage(inScriptInstance, "custom scripts indicated pop could not transition to the EnemyFleeingMapBroken state so pop is transitioning directly to Idle state");
					toReturn.Add("Idle");
					toReturn.Add(null);
					toReturn.Add(null);
					toReturn.Add(false);
					toReturn.Add(-1.0d);
					toReturn.Add(-1.0d);
					return toReturn;
				}
				
				//we're here because the pop is not close enough to a map edge to escape; keep moving
				if(customScripts.runCustomScriptCheckTypes("attemptPathfindStateTransition", new List&lt;object&gt;() {"EnemyFleeingMapStealing", inPop, inLocalMap, inBattleOngoing},
					out List&lt;object&gt; validTgt, true, typeof(bool), typeof(IFBuilding), typeof(IFPop), typeof(bool), typeof(double), typeof(double)))
				{
					if((bool)validTgt[0])
					{
						addDebugMessage(inScriptInstance, "custom scripts indicated pop can and should stay in the EnemyFleeingMapStealing state due to: " + " pop is not done moving");
						toReturn.Add("EnemyFleeingMapStealing");
						toReturn.Add((IFBuilding)validTgt[1]);
						toReturn.Add((IFPop)validTgt[2]);
						toReturn.Add((bool)validTgt[3]);
						toReturn.Add((double)validTgt[4]);
						toReturn.Add((double)validTgt[5]);
						return toReturn;
					}
				}				
				//we failed to call a script correctly somehow.  Transition to Idle instead:
				addDebugMessage(inScriptInstance, "custom scripts indicated pop could not stay in the EnemyFleeingMapStealing state so pop is transitioning directly to Idle state");
				toReturn.Add("Idle");
				toReturn.Add(null);
				toReturn.Add(null);
				toReturn.Add(false);
				toReturn.Add(-1.0d);
				toReturn.Add(-1.0d);
				return toReturn;
			</a>
			<b>state_EnemyFleeingMapStealing</b> <!-- category names can be anything but the empty string (also they are trimmed of whitespace).  In this case, it is just the state name.  Note that only scripts in the exact same category will fall through to the next script.  Category names are trimmed of whitespace and not case-sensitive. -->
			<c>0x7FFFFFFFFFFFFFFF</c> <!-- priority int is "lower value gets executed first".  Value cannot be negative.  If values are tied, the scripts are not necessarily executed in any guaranteed order (this means you can't be sure that making the value '0' will cause your script to be executed before all others, so plan around that). --> <!-- the value 0x7FFFFFFFFFFFFFFF means this script, which is the default behavior, should come after everything else. -->
		</i1>
		</mScriptsDeterminingStateAndTarget>
	</Pathfinding>

</core_data>