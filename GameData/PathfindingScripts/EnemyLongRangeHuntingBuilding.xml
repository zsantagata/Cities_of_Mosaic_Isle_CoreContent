<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>
	<!-- this file implements the pathfinding information and scripts necessary for pathfinding of pops in the EnemyLongRangeHuntingBuilding state -->
	<!-- for this purpose, we use custom consts, custom scripts, and pathfinding scripts -->
	<!-- you can think of the custom scripts as help transitioning *into* a state, and the pathfinding script as help transitioning *out of* a state (though the next state might be the same as the current) -->
	<Pathfinding name="default">
		<mListOfPathfindingStatesAndTimings kind="add">
		<!-- intent: A pop is long range hunting a building if it is an enemy, part of the wargoal includes targeting a building or a pop in that building, and such a building is far on the map. -->
		<i1><a>EnemyLongRangeHuntingBuilding</a> 
		<b>0.1</b><c>2.5</c></i1>
		</mListOfPathfindingStatesAndTimings>
	</Pathfinding>

	<!-- custom consts related to EnemyLongRangeHuntingBuilding: -->
	<!-- to prevent collision with other custom consts, the custom consts here will be prepended with pathfinding_state_EnemyLongRangeHuntingBuilding -->
	<customconsts name="default">
		<mCustomVariableList kind="add">
		
			<!-- logging const for a custom script is always "log_script_custom script undercase_script_name" where undercase_script_name is the thing you put as the name, but with all capitals made lowercase -->
			<i1><a>log_script_custom script pathfinding_state_enemylongrangehuntingbuilding_hasvalidtargetfortransitionin</a> <b>int</b> <c>1</c></i1>
			<i1><a>log_script_custom script pathfinding_state_enemylongrangehuntingbuilding_findtargetfortransitionin</a> <b>int</b> <c>1</c></i1>
			<i1><a>log_script_mscriptsdeterminingstateandtarget state_enemylongrangehuntingbuilding</a> <b>int</b> <c>1</c></i1>
		</mCustomVariableList>
	</customconsts>
	
	<!-- custom scripts related to EnemyLongRangeHuntingBuilding: -->
	<!-- to prevent collision with other custom consts, the custom scripts here will be prepended with pathfinding_state_EnemyLongRangeHuntingBuilding -->
	<!-- furthermore, in order to ease detection by other scripts, I will name custom scripts associated with pathfinding states in a consistent manner: -->
	<!-- _hasValidTargetForTransitionIn is a script called to check if a pop can transition *into* this pathfinding state, from any other state.  It will check if any appropriate target exists. -->
	<!-- _findTargetForTransitionIn is a script called when a pop transitions *into* this pathfinding state, from any other state.  It will find an appropriate target for the pop. -->
	<customscripts name="default">
		<mCustomScriptsList kind="add">
			<!-- this script has three input arguments: IFPop inPop, IFMap inLocalMap, and bool inBattleOngoing -->
			<!-- this script returns one value: bool outSuccess.  If there is at least one valid target for the pop to target as it transitions into this state, outSuccess will be true; otherwise it will be false. -->
			<!-- note that this script doesn't have to find *the* target, just *a* target -->
			<i1><a>pathfinding_state_EnemyLongRangeHuntingBuilding_hasValidTargetForTransitionIn</a>
			<b>
				//input count and type check:
				var customScripts = getAPI().getCustomScripts();
				if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
					{typeof(IFPop), typeof(IFMap), typeof(bool)}
				  }, out _))
				{
					throw new ArgumentException("pathfinding_state_EnemyLongRangeHuntingBuilding_hasValidTargetForTransitionIn custom script received invalid arguments");
					return null;
				}

				IFPop inPop = (IFPop)inArguments[0];
				IFMap inLocalMap = (IFMap)inArguments[1];
				bool inBattleOngoing = (bool)inArguments[2];

				var consts = getAPI().getConsts();
				var customConsts = getAPI().getCustomConsts();
				var variableHandler = getAPI().getVariableHandler();

				addDebugMessage(inScriptInstance, "script pathfinding_state_EnemyLongRangeHuntingBuilding_hasValidTargetForTransitionIn is checking if target exists for " + inPop.getDebugName());
				List&lt;object&gt; toReturn = new List&lt;object&gt;();
				
				//two considerations:
				//the first consideration is if the pop is an enemy pop during battle:
				bool first_consideration = getAPI().isHostileCommunity(inPop.getCommunity()) &amp;&amp; inBattleOngoing;
				
				//the second consideration is if there is a building that the pop wants to target:
				bool second_consideration = false;
				foreach(IFBuilding building in inLocalMap.getAllBuildingsOnMap())
				{
					//we have to check what the wargoal is and determine if the enemy pop wants to target the given building:
					if(customScripts.runCustomScriptCheckTypes("battleAIEnemyWantsTargetBuilding", new List&lt;object&gt;() {inPop, building},
						out List&lt;object&gt; validTgt2, true, typeof(bool)))
					{
						if((bool)validTgt2[0])
						{
							second_consideration = true;
							break;
						}
					}
				}
				
				toReturn.Add(first_consideration &amp;&amp; second_consideration);
				
				addDebugMessage(inScriptInstance, "return value=" + (bool)toReturn[0]);
				return toReturn;
			</b></i1>
		
			<!-- this script has three input arguments: IFPop inPop, IFMap inLocalMap, and bool inBattleOngoing -->
			<!-- this script returns five values: IFBuilding outBuildingToMoveTo, IFPop outPopToChase, bool outShouldPopTryToLeaveMap, double outPopTargetOnMapX, double outPopTargetOnMapX.  These values are acceptable to return as the final five return values of a script in mScriptsDeterminingStateAndTarget -->
			<i1><a>pathfinding_state_EnemyLongRangeHuntingBuilding_findTargetForTransitionIn</a>
			<b>
				//input count and type check:
				var customScripts = getAPI().getCustomScripts();
				if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
					{typeof(IFPop), typeof(IFMap), typeof(bool)}
				  }, out _))
				{
					throw new ArgumentException("pathfinding_state_EnemyLongRangeHuntingBuilding_hasValidTargetForTransitionIn custom script received invalid arguments");
					return null;
				}

				IFPop inPop = (IFPop)inArguments[0];
				IFMap inLocalMap = (IFMap)inArguments[1];
				bool inBattleOngoing = (bool)inArguments[2];

				var consts = getAPI().getConsts();
				var customConsts = getAPI().getCustomConsts();
				var variableHandler = getAPI().getVariableHandler();
				
				addDebugMessage(inScriptInstance, "script pathfinding_state_EnemyLongRangeHuntingBuilding_findTargetForTransitionIn finding target for " + inPop.getDebugName());
				List&lt;object&gt; toReturn = new List&lt;object&gt;();
				
				//when long-range hunting buildings, don't just choose the closest one; instead choose a random one
				//but make sure that we keep this random target if we were in the EnemyLongRangeHuntingBuilding state already
				List&lt;IFBuilding&gt; buildingTargets = new List&lt;IFBuilding&gt;();
				List&lt;IFBuilding&gt; buildingTargetsLowPrio = new List&lt;IFBuilding&gt;();
				Int64 uidOfTargetBuilding = variableHandler.getInt("pathfinding_state_EnemyLongRangeHuntingBuilding target override pop" + inPop.getUID(), out bool success);
				bool usingExistingTarget = false;
				if(success &amp;&amp; (inPop.getPathfindingState().ToLower() == "enemylongrangehuntingbuilding"))
				{
					IFBuilding targetBuilding = (IFBuilding)getAPI().getSO("buildings", uidOfTargetBuilding);
					if(targetBuilding != null)
					{
						if(inLocalMap.isBuildingOnThisMap(targetBuilding))
						{
							//we have to check what the wargoal is and determine if the enemy pop wants to target the given building:
							if(customScripts.runCustomScriptCheckTypes("battleAIEnemyWantsTargetBuilding", new List&lt;object&gt;() {inPop, targetBuilding},
								out List&lt;object&gt; validTgt2, true, typeof(bool)))
							{
								if((bool)validTgt2[0])
								{
									buildingTargets.Add(targetBuilding);
									usingExistingTarget = true;
								}
							}
						}
					}
				}
				if(!usingExistingTarget)
				{
					foreach(IFBuilding building in inLocalMap.getAllBuildingsOnMap())
					{
						//we have to check what the wargoal is and determine if the enemy pop wants to target the given building:
						if(customScripts.runCustomScriptCheckTypes("battleAIEnemyWantsTargetBuilding", new List&lt;object&gt;() {inPop, building},
							out List&lt;object&gt; validTgt2, true, typeof(bool)))
						{
							if((bool)validTgt2[0])
							{
								if(building.getBuildingKind().hasTag("hostile low priority target"))
									buildingTargetsLowPrio.Add(building);
								else
									buildingTargets.Add(building);
							}
						}
					}
				}
				if(buildingTargets.Count == 0)
				{
					buildingTargets = buildingTargetsLowPrio;
				}
				if(buildingTargets.Count == 0)
				{
					addDebugMessage(inScriptInstance, "somehow we did not find an appropriate pop to target");
					toReturn.Add(null);
					toReturn.Add(null);
					toReturn.Add(false);
					toReturn.Add(-1.0d);
					toReturn.Add(-1.0d);
					return toReturn;
				}
				//choose the closest building:
				IFBuilding target = buildingTargets[0];
				double closestDist = double.MaxValue;
				IFMap map = getAPI().getLocalCommunity().getDomesticComponent().getMap();
				foreach(IFBuilding blding in buildingTargets)
				{
					double dist = getAPI().calcDistanceBetweenPopAndBuildingOnMap(inPop, blding, map);
					if(dist &lt; closestDist)
					{
						closestDist = dist;
						target = blding;
					}
				}
				
				addDebugMessage(inScriptInstance, inPop.getDebugName() + " will hunt closest target building, which is " + target.getDebugName());
				
				if(!usingExistingTarget)
				{
					variableHandler.storeIntVariable(getAPI().getCalendar().getCurrentDate(), "pathfinding_state_EnemyLongRangeHuntingBuilding target override pop" + inPop.getUID(), (Int64)target.getUID());
				}
				
				//this is simple: just tell the pop to hunt the indicated building
				toReturn.Add(target);
				toReturn.Add(null);
				toReturn.Add(false);
				toReturn.Add(-1.0d);
				toReturn.Add(-1.0d);
				return toReturn;
			</b></i1>
		</mCustomScriptsList>
	</customscripts>
	
	<!-- this script is part of the pathfinding scripts called when a pop needs a destination.  This is the default pathfinding script for the category "state_EnemyLongRangeHuntingBuilding" -->
	<Pathfinding name="default">
		<mScriptsDeterminingStateAndTarget kind="add">
		<i1>
			<a>
				//input count check:
				if(inArguments.Length &lt; 3)
				{
					return null;
				}

				IFPop inPop = (IFPop)inArguments[0];
				IFMap inLocalMap = (IFMap)inArguments[1];
				bool inBattleOngoing = (bool)inArguments[2];

				var consts = getAPI().getConsts();
				var customConsts = getAPI().getCustomConsts();
				var variableHandler = getAPI().getVariableHandler();
				var customScripts = getAPI().getCustomScripts();

				addDebugMessage(inScriptInstance, "default state_EnemyLongRangeHuntingBuilding script is finding target for " + inPop.getDebugName());
				List&lt;object&gt; toReturn = new List&lt;object&gt;();
				
				//if the battle goal has been lost, now start to leave the map with a broken mindset (broken pops don't look to fight)
				if(customScripts.runCustomScriptCheckTypes("attemptPathfindStateTransition", new List&lt;object&gt;() {"EnemyFleeingMapBroken", inPop, inLocalMap, inBattleOngoing},
					out List&lt;object&gt; validTgt, true, typeof(bool), typeof(IFBuilding), typeof(IFPop), typeof(bool), typeof(double), typeof(double)))
				{
					if((bool)validTgt[0])
					{
						addDebugMessage(inScriptInstance, "custom scripts indicated pop can and should transition to the EnemyFleeingMapBroken state due to: " + " wargoal is now abandoned");
						toReturn.Add("EnemyFleeingMapBroken");
						toReturn.Add((IFBuilding)validTgt[1]);
						toReturn.Add((IFPop)validTgt[2]);
						toReturn.Add((bool)validTgt[3]);
						toReturn.Add((double)validTgt[4]);
						toReturn.Add((double)validTgt[5]);
						return toReturn;
					}
				}
				else
				{
					//we failed to call a script correctly somehow.  Transition to Idle instead:
					addDebugMessage(inScriptInstance, "custom scripts indicated pop could not transition to the EnemyFleeingMapBroken state so pop is transitioning directly to Idle state");
					toReturn.Add("Idle");
					toReturn.Add(null);
					toReturn.Add(null);
					toReturn.Add(false);
					toReturn.Add(-1.0d);
					toReturn.Add(-1.0d);
					return toReturn;
				}
				
				//if the battle goal has been achieved, leave the map:
				if(customScripts.runCustomScriptCheckTypes("attemptPathfindStateTransition", new List&lt;object&gt;() {"EnemyFleeingMapSuccess", inPop, inLocalMap, inBattleOngoing},
					out List&lt;object&gt; validTgt2, true, typeof(bool), typeof(IFBuilding), typeof(IFPop), typeof(bool), typeof(double), typeof(double)))
				{
					if((bool)validTgt2[0])
					{
						addDebugMessage(inScriptInstance, "custom scripts indicated pop can and should transition to the EnemyFleeingMapSuccess state due to: " + " wargoal has been accomplished");
						toReturn.Add("EnemyFleeingMapSuccess");
						toReturn.Add((IFBuilding)validTgt2[1]);
						toReturn.Add((IFPop)validTgt2[2]);
						toReturn.Add((bool)validTgt2[3]);
						toReturn.Add((double)validTgt2[4]);
						toReturn.Add((double)validTgt2[5]);
						return toReturn;
					}
				}
				else
				{
					//we failed to call a script correctly somehow.  Transition to Idle instead:
					addDebugMessage(inScriptInstance, "custom scripts indicated pop could not transition to the EnemyFleeingMapSuccess state so pop is transitioning directly to Idle state");
					toReturn.Add("Idle");
					toReturn.Add(null);
					toReturn.Add(null);
					toReturn.Add(false);
					toReturn.Add(-1.0d);
					toReturn.Add(-1.0d);
					return toReturn;
				}
				
				//if a target pop is close enough that this pop should start a chase, do so:
				//(in the chasing state, this pop is more blind to general ongoings, and updates their pathfinding more often)
				if(customScripts.runCustomScriptCheckTypes("attemptPathfindStateTransition", new List&lt;object&gt;() {"EnemyChasingFriendly", inPop, inLocalMap, inBattleOngoing},
					out List&lt;object&gt; validTgt3, true, typeof(bool), typeof(IFBuilding), typeof(IFPop), typeof(bool), typeof(double), typeof(double)))
				{
					if((bool)validTgt3[0])
					{
						addDebugMessage(inScriptInstance, "custom scripts indicated pop can and should transition to the EnemyChasingFriendly state due to: " + " a target is close nearby");
						toReturn.Add("EnemyChasingFriendly");
						toReturn.Add((IFBuilding)validTgt3[1]);
						toReturn.Add((IFPop)validTgt3[2]);
						toReturn.Add((bool)validTgt3[3]);
						toReturn.Add((double)validTgt3[4]);
						toReturn.Add((double)validTgt3[5]);
						return toReturn;
					}
				}
				else
				{
					//we failed to call a script correctly somehow.  Transition to Idle instead:
					addDebugMessage(inScriptInstance, "custom scripts indicated pop could not transition to the EnemyChasingFriendly state so pop is transitioning directly to Idle state");
					toReturn.Add("Idle");
					toReturn.Add(null);
					toReturn.Add(null);
					toReturn.Add(false);
					toReturn.Add(-1.0d);
					toReturn.Add(-1.0d);
					return toReturn;
				}
				
				//if a target building is close enough that this pop should steal from it, do so:
				if(customScripts.runCustomScriptCheckTypes("attemptPathfindStateTransition", new List&lt;object&gt;() {"EnemyStealingFromBuilding", inPop, inLocalMap, inBattleOngoing},
					out List&lt;object&gt; validTgt4, true, typeof(bool), typeof(IFBuilding), typeof(IFPop), typeof(bool), typeof(double), typeof(double)))
				{
					if((bool)validTgt4[0])
					{
						addDebugMessage(inScriptInstance, "custom scripts indicated pop can and should transition to the EnemyStealingFromBuilding state due to: " + " a target for theft is close nearby");
						toReturn.Add("EnemyStealingFromBuilding");
						toReturn.Add((IFBuilding)validTgt4[1]);
						toReturn.Add((IFPop)validTgt4[2]);
						toReturn.Add((bool)validTgt4[3]);
						toReturn.Add((double)validTgt4[4]);
						toReturn.Add((double)validTgt4[5]);
						return toReturn;
					}
				}
				else
				{
					//we failed to call a script correctly somehow.  Transition to Idle instead:
					addDebugMessage(inScriptInstance, "custom scripts indicated pop could not transition to the EnemyStealingFromBuilding state so pop is transitioning directly to Idle state");
					toReturn.Add("Idle");
					toReturn.Add(null);
					toReturn.Add(null);
					toReturn.Add(false);
					toReturn.Add(-1.0d);
					toReturn.Add(-1.0d);
					return toReturn;
				}
				
				//if a target building is close enough that this pop should damage it, do so:
				if(customScripts.runCustomScriptCheckTypes("attemptPathfindStateTransition", new List&lt;object&gt;() {"EnemyDamagingBuilding", inPop, inLocalMap, inBattleOngoing},
					out List&lt;object&gt; validTgt5, true, typeof(bool), typeof(IFBuilding), typeof(IFPop), typeof(bool), typeof(double), typeof(double)))
				{
					if((bool)validTgt5[0])
					{
						addDebugMessage(inScriptInstance, "custom scripts indicated pop can and should transition to the EnemyDamagingBuilding state due to: " + " a target to damage is close nearby");
						toReturn.Add("EnemyDamagingBuilding");
						toReturn.Add((IFBuilding)validTgt5[1]);
						toReturn.Add((IFPop)validTgt5[2]);
						toReturn.Add((bool)validTgt5[3]);
						toReturn.Add((double)validTgt5[4]);
						toReturn.Add((double)validTgt5[5]);
						return toReturn;
					}
				}
				else
				{
					//we failed to call a script correctly somehow.  Transition to Idle instead:
					addDebugMessage(inScriptInstance, "custom scripts indicated pop could not transition to the EnemyDamagingBuilding state so pop is transitioning directly to Idle state");
					toReturn.Add("Idle");
					toReturn.Add(null);
					toReturn.Add(null);
					toReturn.Add(false);
					toReturn.Add(-1.0d);
					toReturn.Add(-1.0d);
					return toReturn;
				}
				
				//if there are still buildings on the map to target, do so:
				if(customScripts.runCustomScriptCheckTypes("attemptPathfindStateTransition", new List&lt;object&gt;() {"EnemyLongRangeHuntingBuilding", inPop, inLocalMap, inBattleOngoing},
					out List&lt;object&gt; validTgt6, true, typeof(bool), typeof(IFBuilding), typeof(IFPop), typeof(bool), typeof(double), typeof(double)))
				{
					if((bool)validTgt6[0])
					{
						addDebugMessage(inScriptInstance, "custom scripts indicated pop can and should stay in the EnemyLongRangeHuntingBuilding state due to: " + " there is still a building to target");
						toReturn.Add("EnemyLongRangeHuntingBuilding");
						toReturn.Add((IFBuilding)validTgt6[1]);
						toReturn.Add((IFPop)validTgt6[2]);
						toReturn.Add((bool)validTgt6[3]);
						toReturn.Add((double)validTgt6[4]);
						toReturn.Add((double)validTgt6[5]);
						return toReturn;
					}
				}
				else
				{
					//we failed to call a script correctly somehow.  Transition to Idle instead:
					addDebugMessage(inScriptInstance, "custom scripts indicated pop could not stay in the EnemyLongRangeHuntingBuilding state so pop is transitioning directly to Idle state");
					toReturn.Add("Idle");
					toReturn.Add(null);
					toReturn.Add(null);
					toReturn.Add(false);
					toReturn.Add(-1.0d);
					toReturn.Add(-1.0d);
					return toReturn;
				}
				
				//otherwise, target a pop on the map if one exists to hunt:
				if(customScripts.runCustomScriptCheckTypes("attemptPathfindStateTransition", new List&lt;object&gt;() {"EnemyLongRangeHuntingPop", inPop, inLocalMap, inBattleOngoing},
					out List&lt;object&gt; validTgt7, true, typeof(bool), typeof(IFBuilding), typeof(IFPop), typeof(bool), typeof(double), typeof(double)))
				{
					if((bool)validTgt7[0])
					{
						addDebugMessage(inScriptInstance, "custom scripts indicated pop can and should transition to the EnemyLongRangeHuntingPop state due to: " + " no building to target but there is a pop to target");
						toReturn.Add("EnemyLongRangeHuntingPop");
						toReturn.Add((IFBuilding)validTgt7[1]);
						toReturn.Add((IFPop)validTgt7[2]);
						toReturn.Add((bool)validTgt7[3]);
						toReturn.Add((double)validTgt7[4]);
						toReturn.Add((double)validTgt7[5]);
						return toReturn;
					}
				}
				//we failed to call a script correctly somehow.  Transition to EnemyIdleEval instead:
				addDebugMessage(inScriptInstance, "custom scripts indicated pop could not transition to the EnemyLongRangeHuntingPop state so pop is transitioning directly to EnemyIdleEval state");
				toReturn.Add("EnemyIdleEval");
				toReturn.Add(null);
				toReturn.Add(null);
				toReturn.Add(false);
				toReturn.Add(-1.0d);
				toReturn.Add(-1.0d);
				return toReturn;
			</a>
			<b>state_EnemyLongRangeHuntingBuilding</b> <!-- category names can be anything but the empty string (also they are trimmed of whitespace).  In this case, it is just the state name.  Note that only scripts in the exact same category will fall through to the next script.  Category names are trimmed of whitespace and not case-sensitive. -->
			<c>0x7FFFFFFFFFFFFFFF</c> <!-- priority int is "lower value gets executed first".  Value cannot be negative.  If values are tied, the scripts are not necessarily executed in any guaranteed order (this means you can't be sure that making the value '0' will cause your script to be executed before all others, so plan around that). --> <!-- the value 0x7FFFFFFFFFFFFFFF means this script, which is the default behavior, should come after everything else. -->
		</i1>
		</mScriptsDeterminingStateAndTarget>
	</Pathfinding>

</core_data>