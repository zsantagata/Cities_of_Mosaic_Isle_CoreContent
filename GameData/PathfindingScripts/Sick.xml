<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>
	<!-- this file implements the pathfinding information and scripts necessary for pathfinding of pops in the Sick state -->
	<!-- for this purpose, we use custom consts, custom scripts, and pathfinding scripts -->
	<!-- you can think of the custom scripts as help transitioning *into* a state, and the pathfinding script as help transitioning *out of* a state (though the next state might be the same as the current) -->
	<!-- note that the core game will forcibly transition any sick pop to the Sick pathfinding state with a certain percentage chance.  When a pop exits the sick pathfinding state, it will go into the appropriate idle/psuedo-idle state. -->
	<!-- when a pop's wound/illness/pregnancy/death status changes, a re-evaluation of the pop's pathfinding is hardcoded to occur, so these pops will start moving again once they are able -->
	<Pathfinding name="default">
		<mListOfPathfindingStatesAndTimings kind="add">
		<!-- intent: A pop is sick.  It cannot move while it is being sick. -->
		<i1><a>Sick</a> 
		<b>2.0</b><c>2.1</c></i1>
		</mListOfPathfindingStatesAndTimings>
	</Pathfinding>

	<!-- custom consts related to Sick: -->
	<!-- to prevent collision with other custom consts, the custom consts here will be prepended with pathfinding_state_Sick -->
	<customconsts name="default">
		<mCustomVariableList kind="add">
			<i1><a>pathfinding_state_Sick enter_state chance</a> <b>double</b> <c>0.25</c></i1> <!-- also remember that there is a speed debuff for being sick -->
			
			<!-- logging const for a custom script is always "log_script_custom script undercase_script_name" where undercase_script_name is the thing you put as the name, but with all capitals made lowercase -->
			<i1><a>log_script_custom script pathfinding_state_sick_hasvalidtargetfortransitionin</a> <b>int</b> <c>1</c></i1>
			<i1><a>log_script_custom script pathfinding_state_sick_findtargetfortransitionin</a> <b>int</b> <c>1</c></i1>
			<i1><a>log_script_mscriptsdeterminingstateandtarget state_sick</a> <b>int</b> <c>1</c></i1>
		</mCustomVariableList>
	</customconsts>
	
	<!-- custom scripts related to Sick: -->
	<!-- to prevent collision with other custom consts, the custom scripts here will be prepended with pathfinding_state_Sick -->
	<!-- furthermore, in order to ease detection by other scripts, I will name custom scripts associated with pathfinding states in a consistent manner: -->
	<!-- _hasValidTargetForTransitionIn is a script called to check if a pop can transition *into* this pathfinding state, from any other state.  It will check if any appropriate target exists. -->
	<!-- _findTargetForTransitionIn is a script called when a pop transitions *into* this pathfinding state, from any other state.  It will find an appropriate target for the pop. -->
	<customscripts name="default">
		<mCustomScriptsList kind="add">
			<!-- this script has three input arguments: IFPop inPop, IFMap inLocalMap, and bool inBattleOngoing -->
			<!-- this script returns one value: bool outSuccess.  If there is at least one valid target for the pop to target as it transitions into this state, outSuccess will be true; otherwise it will be false. -->
			<!-- note that this script doesn't have to find *the* target, just *a* target -->
			<i1><a>pathfinding_state_Sick_hasValidTargetForTransitionIn</a>
			<b>
				//input count and type check:
				var customScripts = getAPI().getCustomScripts();
				if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
					{typeof(IFPop), typeof(IFMap), typeof(bool)}
				  }, out _))
				{
					throw new ArgumentException("pathfinding_state_Sick_hasValidTargetForTransitionIn custom script received invalid arguments");
					return null;
				}

				IFPop inPop = (IFPop)inArguments[0];
				IFMap inLocalMap = (IFMap)inArguments[1];
				bool inBattleOngoing = (bool)inArguments[2];

				var consts = getAPI().getConsts();
				var customConsts = getAPI().getCustomConsts();
				var variableHandler = getAPI().getVariableHandler();

				addDebugMessage(inScriptInstance, "script pathfinding_state_Sick_hasValidTargetForTransitionIn is checking if target exists for " + inPop.getDebugName());
				List&lt;object&gt; toReturn = new List&lt;object&gt;();
				
				//considerations: is the pop sick, and is it not currently BeingAbducted or Sick, and a chance based on the ratio between current pathfinding state's time and sick time
				double chanceToEnterState = customConsts.getDoubleConst("pathfinding_state_Sick enter_state chance", out bool success);
				if(!success) chanceToEnterState = 0.25d;
				chanceToEnterState *= (getAPI().getMinTimePathfindingState(inPop.getPathfindingState()) / getAPI().getMinTimePathfindingState("sick"));
				bool enterState = (getAPI().calcRand() &lt; chanceToEnterState);
				toReturn.Add(inPop.isIll() &amp;&amp; (inPop.getPathfindingState() != "beingabducted") &amp;&amp; (inPop.getPathfindingState() != "sick") &amp;&amp; enterState);
				
				addDebugMessage(inScriptInstance, "return value=" + (bool)toReturn[0]);
				return toReturn;
			</b></i1>
		
			<!-- this script has three input arguments: IFPop inPop, IFMap inLocalMap, and bool inBattleOngoing -->
			<!-- this script returns five values: IFBuilding outBuildingToMoveTo, IFPop outPopToChase, bool outShouldPopTryToLeaveMap, double outPopTargetOnMapX, double outPopTargetOnMapX.  These values are acceptable to return as the final five return values of a script in mScriptsDeterminingStateAndTarget -->
			<i1><a>pathfinding_state_Sick_findTargetForTransitionIn</a>
			<b>
				//input count and type check:
				var customScripts = getAPI().getCustomScripts();
				if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
					{typeof(IFPop), typeof(IFMap), typeof(bool)}
				  }, out _))
				{
					throw new ArgumentException("pathfinding_state_Sick_hasValidTargetForTransitionIn custom script received invalid arguments");
					return null;
				}

				IFPop inPop = (IFPop)inArguments[0];
				IFMap inLocalMap = (IFMap)inArguments[1];
				bool inBattleOngoing = (bool)inArguments[2];

				var consts = getAPI().getConsts();
				var customConsts = getAPI().getCustomConsts();
				var variableHandler = getAPI().getVariableHandler();
				
				addDebugMessage(inScriptInstance, "script pathfinding_state_Sick_findTargetForTransitionIn finding target for " + inPop.getDebugName());
				List&lt;object&gt; toReturn = new List&lt;object&gt;();
				
				//this is simple: just tell the pop to idle; it's sick
				toReturn.Add(null);
				toReturn.Add(null);
				toReturn.Add(false);
				toReturn.Add(-1.0d);
				toReturn.Add(-1.0d);
				return toReturn;
			</b></i1>
		</mCustomScriptsList>
	</customscripts>
	
	<!-- this script is part of the pathfinding scripts called when a pop needs a destination.  This is the default pathfinding script for the category "state_Sick" -->
	<Pathfinding name="default">
		<mScriptsDeterminingStateAndTarget kind="add">
		<i1>
			<a>
				//input count check:
				if(inArguments.Length &lt; 3)
				{
					return null;
				}

				IFPop inPop = (IFPop)inArguments[0];
				IFMap inLocalMap = (IFMap)inArguments[1];
				bool inBattleOngoing = (bool)inArguments[2];

				var consts = getAPI().getConsts();
				var customConsts = getAPI().getCustomConsts();
				var variableHandler = getAPI().getVariableHandler();
				var customScripts = getAPI().getCustomScripts();

				addDebugMessage(inScriptInstance, "default state_Sick script is finding target for " + inPop.getDebugName());
				List&lt;object&gt; toReturn = new List&lt;object&gt;();
				
				//first: this is one of the few states where we can use this ScriptDeterminingStateAndTarget while not being in the state.  In this case, that indicates that the pop *should* be Sick but isn't yet.
				if(inPop.getPathfindingState() != "sick")
				{
					//if the pop is currently Ordered, store its target here (so that when it transitions out of the Sick state it continues on its way):
					if(inPop.getPathfindingState() == "ordered")
					{
						variableHandler.storeDoubleVariable(getAPI().getCalendar().getCurrentDate(), "battleAI_orderedPopSavedTargetX_pop" + inPop.getUID(), inPop.getPathfindingTgtTuple().Item1);
						variableHandler.storeDoubleVariable(getAPI().getCalendar().getCurrentDate(), "battleAI_orderedPopSavedTargetY_pop" + inPop.getUID(), inPop.getPathfindingTgtTuple().Item2);
					}
				
					addDebugMessage(inScriptInstance, "pop is not currently sick, so this script has been called because pop *should* be made sick");
					toReturn.Add("Sick");
					toReturn.Add(null);
					toReturn.Add(null);
					toReturn.Add(false);
					toReturn.Add(-1.0d);
					toReturn.Add(-1.0d);
					return toReturn;
				}
				
				//if this pop is an enemy, transition to EnemyIdleEval
				bool enemy = getAPI().isHostileCommunity(inPop.getCommunity());
				if(enemy)
				{
					if(customScripts.runCustomScriptCheckTypes("attemptPathfindStateTransition", new List&lt;object&gt;() {"EnemyIdleEval", inPop, inLocalMap, inBattleOngoing},
						out List&lt;object&gt; validTgt, true, typeof(bool), typeof(IFBuilding), typeof(IFPop), typeof(bool), typeof(double), typeof(double)))
					{
						if((bool)validTgt[0])
						{
							addDebugMessage(inScriptInstance, "custom scripts indicated pop can and should transition to the EnemyIdleEval state due to: " + " pop is enemy and is done being sick");
							toReturn.Add("EnemyIdleEval");
							toReturn.Add((IFBuilding)validTgt[1]);
							toReturn.Add((IFPop)validTgt[2]);
							toReturn.Add((bool)validTgt[3]);
							toReturn.Add((double)validTgt[4]);
							toReturn.Add((double)validTgt[5]);
							return toReturn;
						}
					}
					else
					{
						//we failed to call a script correctly somehow.  Transition to Idle instead:
						addDebugMessage(inScriptInstance, "custom scripts indicated pop could not transition to the EnemyIdleEval state so pop is transitioning directly to Idle state");
						toReturn.Add("Idle");
						toReturn.Add(null);
						toReturn.Add(null);
						toReturn.Add(false);
						toReturn.Add(-1.0d);
						toReturn.Add(-1.0d);
						return toReturn;
					}
				}
				
				//if this pop was Ordered and has a preserved target, continue on the way to the target:
				bool hasStoredTarget = inPop.isMustered() &amp;&amp; (inPop.getCommunity() == getAPI().getLocalCommunity());
				double xTgt = variableHandler.getDouble("battleAI_orderedPopSavedTargetX_pop" + inPop.getUID(), out bool success);
				hasStoredTarget = hasStoredTarget &amp;&amp; success;
				double yTgt = variableHandler.getDouble("battleAI_orderedPopSavedTargetY_pop" + inPop.getUID(), out success);
				hasStoredTarget = hasStoredTarget &amp;&amp; success &amp;&amp; (xTgt &gt;= 0.0d) &amp;&amp; (yTgt &gt;= 0.0d) &amp;&amp; (xTgt &lt;= inLocalMap.getMapDimensions().Item1) &amp;&amp; (yTgt &lt;= inLocalMap.getMapDimensions().Item2);
				if(hasStoredTarget)
				{
					//clear stored target:
					variableHandler.storeDoubleVariable(getAPI().getCalendar().getCurrentDate(), "battleAI_orderedPopSavedTargetX_pop" + inPop.getUID(), -1.0d);
					variableHandler.storeDoubleVariable(getAPI().getCalendar().getCurrentDate(), "battleAI_orderedPopSavedTargetY_pop" + inPop.getUID(), -1.0d);
				
					addDebugMessage(inScriptInstance, "pop has stored target for the Ordered state; transitioning back to Ordered state with same target");
					toReturn.Add("Ordered");
					toReturn.Add(null);
					toReturn.Add(null);
					toReturn.Add(false);
					toReturn.Add(xTgt);
					toReturn.Add(yTgt);
					return toReturn;
				}
				
				//if this pop is neutral or unmustered during battle, transition to UnmusteredInBattle
				bool neutral = !enemy &amp;&amp; (inPop.getCommunity() != getAPI().getLocalCommunity());
				bool unmustered = !(enemy || neutral || inPop.isMustered());
				if(neutral || unmustered)
				{
					if(customScripts.runCustomScriptCheckTypes("attemptPathfindStateTransition", new List&lt;object&gt;() {"UnmusteredInBattle", inPop, inLocalMap, inBattleOngoing},
						out List&lt;object&gt; validTgt, true, typeof(bool), typeof(IFBuilding), typeof(IFPop), typeof(bool), typeof(double), typeof(double)))
					{
						if((bool)validTgt[0])
						{
							addDebugMessage(inScriptInstance, "custom scripts indicated pop can and should transition to the UnmusteredInBattle state due to: " + " pop is neutral or unmustered in battle and is done being sick");
							toReturn.Add("UnmusteredInBattle");
							toReturn.Add((IFBuilding)validTgt[1]);
							toReturn.Add((IFPop)validTgt[2]);
							toReturn.Add((bool)validTgt[3]);
							toReturn.Add((double)validTgt[4]);
							toReturn.Add((double)validTgt[5]);
							return toReturn;
						}
					}
					else
					{
						//we failed to call a script correctly somehow.  Transition to Idle instead:
						addDebugMessage(inScriptInstance, "custom scripts indicated pop could not transition to the UnmusteredInBattle state so pop is transitioning directly to Idle state");
						toReturn.Add("Idle");
						toReturn.Add(null);
						toReturn.Add(null);
						toReturn.Add(false);
						toReturn.Add(-1.0d);
						toReturn.Add(-1.0d);
						return toReturn;
					}
				}
				
				//transition to Idle:
				addDebugMessage(inScriptInstance, "pop is no longer being sick, so it will now transition directly to Idle state");
				toReturn.Add("Idle");
				toReturn.Add(null);
				toReturn.Add(null);
				toReturn.Add(false);
				toReturn.Add(-1.0d);
				toReturn.Add(-1.0d);
				return toReturn;
			</a>
			<b>state_Sick</b> <!-- category names can be anything but the empty string (also they are trimmed of whitespace).  In this case, it is just the state name.  Note that only scripts in the exact same category will fall through to the next script.  Category names are trimmed of whitespace and not case-sensitive. -->
			<c>0x7FFFFFFFFFFFFFFF</c> <!-- priority int is "lower value gets executed first".  Value cannot be negative.  If values are tied, the scripts are not necessarily executed in any guaranteed order (this means you can't be sure that making the value '0' will cause your script to be executed before all others, so plan around that). --> <!-- the value 0x7FFFFFFFFFFFFFFF means this script, which is the default behavior, should come after everything else. -->
		</i1>
		</mScriptsDeterminingStateAndTarget>
	</Pathfinding>

</core_data>