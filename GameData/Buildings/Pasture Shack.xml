<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>
  <igBuildingKind name="Pasture Shack">
    <Encyclopedia_Entry>
	  <full_path>Buildings/Pasture Shack</full_path>
	  <body_text>Pasture Shack.  Put encyclopedia description here.</body_text><!-- in order to prevent the encyclopedia entry from being visible, we set the body text to empty -->
	  <image_SS></image_SS>
	  <related_entries_full_paths>
	  <!-- nothing in this list of entries -->
	  </related_entries_full_paths>
	</Encyclopedia_Entry>
	<mBuildingKindQualities>0x2006</mBuildingKindQualities><!-- 0x2 = overwater enable, 0x4 = passable, 0x2000 = workplace that uses land sources around it -->
    <mWidth>2</mWidth>
    <mHeight>2</mHeight>

	<mPopDaysToBuild>3</mPopDaysToBuild>
	<mBaseDurability>50</mBaseDurability>
	
	<mResourcesToBuild> <!-- this is a list of: reference to resource, int value (positive) -->
	  <i1>
	    <a>TAG:woody</a>
		<b>25</b>
	  </i1>
	  <i1>
	    <a>TAG:stony</a>
		<b>25</b>
	  </i1>
	  <i5>
	    <a>TAG:metallic</a>
		<b>25</b>
	  </i5>
	</mResourcesToBuild>
	
	<mOutputMultBasedOnConstructionResources> <!-- this is a list of: reference to resource, double value -->
	</mOutputMultBasedOnConstructionResources>
	
	<mDurabilityMultBasedOnConstructionResources> <!-- this is a list of: reference to resource, floating pt value -->
	  <i1>
	    <a>TAG:woody</a>
		<b>1.25</b>
	  </i1>
	  <i1>
	    <a>TAG:stony</a>
		<b>2.5</b>
	  </i1>
	  <i1>
	    <a>TAG:metallic</a>
		<b>1.75</b>
	  </i1>
	</mDurabilityMultBasedOnConstructionResources>
	
	<mBeautyValue>0</mBeautyValue>
	<mBeautyRadius>0</mBeautyRadius>
    <mBeautySynergyBuildings><!-- basic list of names -->
	</mBeautySynergyBuildings>
	
    <mSSIDs>
		<i>Pasture Shack</i>
	</mSSIDs>
	
	<mMaxWorkers>6</mMaxWorkers>
	<mIndustry>Husbandry</mIndustry>
	<mRadius>15</mRadius>
	<mDesolationRateInRadius>1.0</mDesolationRateInRadius> <!-- TODO check this for balance once desolation is actually done.  -->
	
	<mResourceInputs_NotForOutputs_RequiredOther_Exclusive_AmountWeight_FitnessFactor>
	  <i1>
	    <a>TAG:overwater-grazer</a>
		<b>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>0.0</e>
		<f>1.0</f>
	  </i1>
	</mResourceInputs_NotForOutputs_RequiredOther_Exclusive_AmountWeight_FitnessFactor>
	
	<mRequiredResourceInputs>
	</mRequiredResourceInputs>
	
	<mOutputResources>
	  <i1>Animal Feed</i1>
	</mOutputResources>
	
	<mScriptCalledDaily></mScriptCalledDaily> <!-- exactly what it says on the tin: if this building is fully constructed, this script is called daily.  First input is the building itself. -->
	<mScriptCalledBetweenOutputCalculationAndResolution>
		//intent: call through to the common script to use animal feed to, surprisingly, feed animals
		
		//common to all workplace scripts:
		if(inArguments.Length &lt; 7)
		{
		  return null;
		}
		IFBuilding inWorkplace = (IFBuilding)inArguments[0];
		Dictionary&lt;IFResource, double&gt; inResourcesConsumedAsInput = (Dictionary&lt;IFResource, double&gt;)inArguments[1];
		Dictionary&lt;IFResource, double&gt; inResourcesConsumedOtherwise = (Dictionary&lt;IFResource, double&gt;)inArguments[2];
		Dictionary&lt;IFResource, double&gt; inResourcesCreated = (Dictionary&lt;IFResource, double&gt;)inArguments[3];
		double inQuality = (double)inArguments[4];
		bool inWorkplaceOn = (bool)inArguments[5];
		bool inJustPredicting = (bool)inArguments[6];
		
		List&lt;object&gt; toReturn = new List&lt;object&gt;();
		var customConsts = getAPI().getCustomConsts();
		var consts = getAPI().getConsts();
		var customScripts = getAPI().getCustomScripts();
		var variableHandler = getAPI().getVariableHandler();
		bool success = false;
		
		string outPredictionText = "";
		
		//start of unique part of script:
		//gather quantity:
		IFResource animalFeedRes = (IFResource)getAPI().getMOFromInternalName("resources", "Animal Feed");
		if(animalFeedRes != null)
		{
			double quantityAnimalFeed = 0.0d;
			if(inResourcesCreated.ContainsKey(animalFeedRes))
			{
				quantityAnimalFeed = inResourcesCreated[animalFeedRes];
			}
			else
			{
				quantityAnimalFeed = 0;
			}
			if(customScripts.runCustomScriptCheckTypes("animal_husbandry_workplace_production", new List&lt;object&gt;() { inWorkplace, quantityAnimalFeed, inQuality, inJustPredicting },
				out List&lt;object&gt; stringToOutput, false, typeof(string), typeof(Dictionary&lt;IFResource, double&gt;)))
		    {
				outPredictionText = (string)stringToOutput[0];
				inResourcesCreated = (Dictionary&lt;IFResource, double&gt;)stringToOutput[1];
		    }
		}

		//outputs: generally if they do not need to be changed, don't modify the values going out, even as a "sanity/safety check".  Doing so would force changes to this script if other scripts change (from, for example, mods)
		toReturn.Add(inResourcesConsumedAsInput);
		toReturn.Add(inResourcesConsumedOtherwise);
		toReturn.Add(inResourcesCreated);
		toReturn.Add(inQuality);
		toReturn.Add(inWorkplaceOn);
		toReturn.Add(outPredictionText);
		return toReturn;
	</mScriptCalledBetweenOutputCalculationAndResolution> 
	
	<mOutputResourceQuanDailyFactor>5.45</mOutputResourceQuanDailyFactor> <!-- TODO double check this once everything is established.  This value will make output goods per day approximately equal to 10 for a single unskilled worker using one perfectly-average common good, for a workplace that does not work the land. -->
	<mInputResourceQuanDailyFactor>1</mInputResourceQuanDailyFactor> <!-- TODO double check this once everything is established.  This value will make input goods per day per worker approximately equal to 1, spread over all inputs (not counting those which are required to be consumed TODO figure that out?). -->
	
	<mIsHousing>0</mIsHousing> <!-- bool, true if nonzero -->
	<mIsWorkplace>1</mIsWorkplace> <!-- bool, true if nonzero -->
	
	<mTagList>
	  <i1>road benefit increase leader control count</i1>
	  <!-- description tags: -->
	  <i1>description_shape_top_noun:eaves</i1>
	  <i1>description_shape_side_noun:walls</i1>
	  <i1>description_shape_middle_noun:pens</i1>
	  <i1>description_shape_bottom_noun:hays</i1>
	</mTagList>
  </igBuildingKind>
  
  
</core_data>