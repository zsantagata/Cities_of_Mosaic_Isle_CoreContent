<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>
	<customconsts name="default">
		<mCustomVariableList kind="add">
			<!-- consts related to this file's scripts can have any name (though they probably shouldn't overwrite other consts) -->
			<i1><a>publicprivatequarters custom no_output before_replace_text</a> <b>string</b>
			<c>This workplace will cause 0 pregnancies and provide service of quality [1].</c></i1>
			<i1><a>publicprivatequarters custom output before_replace_text</a> <b>string</b>
			<c>This workplace will cause up to [0] pregnancies and provide service of quality [1].</c></i1>
			
			<i1><a>log_script_public private quarters script called between output calculation and resolution</a> <b>int</b> <c>1</c></i1>
		</mCustomVariableList>
	</customconsts>
	
  <igBuildingKind name="Public Private Quarters">
    <Encyclopedia_Entry>
	  <full_path>Buildings/Public Private Quarters</full_path>
	  <body_text>Public Private Quarters.  Put encyclopedia description here.</body_text><!-- in order to prevent the encyclopedia entry from being visible, we set the body text to empty -->
	  <image_SS></image_SS>
	  <related_entries_full_paths>
	  <!-- nothing in this list of entries -->
	  </related_entries_full_paths>
	</Encyclopedia_Entry>
	<mBuildingKindQualities>0x18003</mBuildingKindQualities><!-- 0x1 = underwater enable, 0x2 = overwater enable, 0x8000 = this is a service workplace (outputs no goods), 0x10000 = workplace can use no inputs -->
    <mWidth>4</mWidth>
    <mHeight>4</mHeight>

	<mPopDaysToBuild>4</mPopDaysToBuild>
	<mBaseDurability>125</mBaseDurability>
	
	<mResourcesToBuild> <!-- this is a list of: reference to resource, int value (positive) -->
	  <i1>
	    <a>TAG:woody</a>
		<b>120</b>
	  </i1>
	  <i1>
	    <a>TAG:stony</a>
		<b>120</b>
	  </i1>
	</mResourcesToBuild>
	
	<mOutputMultBasedOnConstructionResources> <!-- this is a list of: reference to resource, double value -->
	</mOutputMultBasedOnConstructionResources>
	
	<mDurabilityMultBasedOnConstructionResources> <!-- this is a list of: reference to resource, floating pt value -->
	  <i1>
	    <a>TAG:woody</a>
		<b>1.25</b>
	  </i1>
	  <i1>
	    <a>TAG:stony</a>
		<b>2.5</b>
	  </i1>
	</mDurabilityMultBasedOnConstructionResources>
	
	<mBeautyValue>35</mBeautyValue>
	<mBeautyRadius>10</mBeautyRadius>
    <mBeautySynergyBuildings>
	</mBeautySynergyBuildings>
	
    <mSSIDs>
		<i>Public Private Quarters</i>
	</mSSIDs>
	
	<mMaxWorkers>16</mMaxWorkers>
	<mIndustry>Companionship</mIndustry>
	<mRadius>12</mRadius>
	
	<mResourceInputs_NotForOutputs_RequiredOther_Exclusive_AmountWeight_FitnessFactor> <!-- this is a list of: reference to resource (rare input resource), list of references to resources (outputs for which consumption of the rare-input-resource is disabled), list of references to resources (other resources which must be consumed while the rare-input-resource is being consumed), list of references to resources (other resources which cannot be consumed while the rare-input-resource is being consumed) -->
	  <i3>
	    <a>Feathers</a>
		<b>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>1.0</e>
		<f>1.0</f>
	  </i3>
	  <i3>
	    <a>TAG:conspicuous consumption</a>
		<b>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>0.25</e>
		<f>1.125</f>
	  </i3>
	  <i1>
	    <a>TAG:drug</a>
		<b>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>1.0</e>
		<f>1.5</f>
	  </i1>
	</mResourceInputs_NotForOutputs_RequiredOther_Exclusive_AmountWeight_FitnessFactor>
	
	<mRequiredResourceInputs><!-- basic list of names: if the workplace is on at all, these resources must be consumed -->
	</mRequiredResourceInputs>
	
	<mScriptCalledDaily></mScriptCalledDaily> <!-- exactly what it says on the tin: if this building is fully constructed, this script is called daily.  First input is the building itself. -->
	<mScriptCalledBetweenOutputCalculationAndResolution>
	    //intent: the "quantity" of this service industry, unlike many other (core) service industries, actually matters.  "quantity" refers to making new pregnancies, whereas "quality" is simply for happiness reasons.  "Quality" will be unchanged by this script.
		//divide workers and pops provided with service into two groups.  Then based on the count, make some babies.
		
		//common to all workplace scripts:
		if(inArguments.Length &lt; 7)
		{
		  return null;
		}
		IFBuilding inWorkplace = (IFBuilding)inArguments[0];
		Dictionary&lt;IFResource, double&gt; inResourcesConsumedAsInput = (Dictionary&lt;IFResource, double&gt;)inArguments[1];
		Dictionary&lt;IFResource, double&gt; inResourcesConsumedOtherwise = (Dictionary&lt;IFResource, double&gt;)inArguments[2];
		Dictionary&lt;IFResource, double&gt; inResourcesCreated = (Dictionary&lt;IFResource, double&gt;)inArguments[3];
		double inQuality = (double)inArguments[4];
		bool inWorkplaceOn = (bool)inArguments[5];
		bool inJustPredicting = (bool)inArguments[6];
		
		List&lt;object&gt; toReturn = new List&lt;object&gt;();
		var customConsts = getAPI().getCustomConsts();
		var consts = getAPI().getConsts();
		var customScripts = getAPI().getCustomScripts();
		var variableHandler = getAPI().getVariableHandler();
		bool success = false;
		
		string outPredictionText = "";
		
		//start of unique part of script:
		if(inWorkplaceOn)
		{
			double countAttemptsAtPregnancy = 0.0d;
			//the following code is a small recreation of what is in workplaceproduction_resourcecreationbuilding_common
			{
			  //fetch values:
			  double productionValue = variableHandler.getDouble("workplace" + inWorkplace.getUID().ToString() + "_inProductionValue", out success);
			  if(!success) productionValue = 0.0d;
			  double minQualChooseable = consts.getResourceQualityMinChoosable();
			  double maxQualChooseable = consts.getResourceQualityMaxChoosable();
			  double minQual = consts.getResourceQualityMin();
			  double maxQual = consts.getResourceQualityMax();
			  double quantityRawMin = customConsts.getDoubleConst("workplaceproduction_resourcecreationbuilding_common quantity_total_raw minimum", out success);
			  if(!success) quantityRawMin = 0.025d;
			  double quantityMultMax = customConsts.getDoubleConst("workplaceproduction_resourcecreationbuilding_common quantity_total_mult maximum", out success);
			  if(!success) quantityMultMax = 2.0d;
			  
			  if(productionValue * quantityMultMax &lt;= quantityRawMin)
			  {
				countAttemptsAtPregnancy = 0.0d;
				inQuality = minQualChooseable;
			  }
			  else
			  {
				double quantityMax = productionValue * quantityMultMax;
				double slope = quantityMax / (minQualChooseable - maxQual); //this should be negative.  Deliberately use maxQual instead of maxQualChooseable so that maxQualChooseable is not a fixed point
				double offset = (-1.0d) * slope * maxQual; //should be positive
				
				//now that we have the actual quality at which the goods will be created, calculate total quantity created:
				countAttemptsAtPregnancy = slope * inQuality + offset; //will be positive and greater than quantityRawMin
			  }
			}
			
			if(countAttemptsAtPregnancy &lt; 1.0d)
			{
				addDebugMessage(inScriptInstance, "quantity babies produced by " + inWorkplace.getDebugName() + " is less than 1, returning");
				outPredictionText = customConsts.getStringConst("publicprivatequarters custom no_output before_replace_text", out success);
				if(!success) outPredictionText = "This workplace will cause no pregnancies and provide service of quality [1].";
				outPredictionText = outPredictionText
					.Replace("[1]", getAPI().getDisplayStringForQuality(inQuality));
			}
			else
			{
				//this code fetches all buildings in a radius and puts them in a set
				IFBuildingKind kind = inWorkplace.getBuildingKind();
				IFMap map = getAPI().getLocalCommunity().getDomesticComponent().getMap();
				ReadOnlyCollection&lt;IFMapTile&gt; tiles = map.getMapTilesInBuildingRadius(inWorkplace);
				List&lt;IFBuilding&gt; served_buildings = new List&lt;IFBuilding&gt;();
				for(int i = 0; i &lt; tiles.Count; i++)
				{
					if(tiles[i].hasBuilding())
					{
						if(tiles[i].getBuilding().isHousing())
						{
							if(!served_buildings.Contains(tiles[i].getBuilding()))
							{
								addDebugMessage(inScriptInstance, tiles[i].getBuilding().getDebugName() + " has a tile within radius and is served by this Private Public Quarters");
								served_buildings.Add(tiles[i].getBuilding());
							}
						}
					}
				}
				
				//pops served: all those in surrounding buildings
				List&lt;IFPop&gt; pops_served = new List&lt;IFPop&gt;();
				foreach(IFBuilding tgt in served_buildings)
				{
					pops_served.AddRange(tgt.getHousingComponent().getHousedPops());
				}
				if(!inJustPredicting) addDebugMessage(inScriptInstance, inWorkplace.getDebugName() + " has " + pops_served.Count.ToString() + " pops served");
				
				int whole_number_babies = (int)countAttemptsAtPregnancy;
				ReadOnlyCollection&lt;IFPop&gt; workers = inWorkplace.getWorkplaceComponent().getWorkerPops();
				if((pops_served.Count != 0) &amp;&amp; (workers.Count != 0))
				{
					bool breakbig = false;
					foreach(var worker in workers)
					{
						if(breakbig)
							break;
						for(int j = 0; j &lt; pops_served.Count; j++)
						{
							if(worker.canMakeBabyWithPop(pops_served[j])) //this also checks that the two pops are not the same pop.  no pops should self-impregnate.
							{
								if(!inJustPredicting)
								{
									worker.letMakeBabyWithPop(pops_served[j]);
									addDebugMessage(inScriptInstance, worker.getDebugName() + " and " + pops_served[j].getDebugName() + " have tried to make a baby");
								}
								else
								{
									addDebugMessage(inScriptInstance, worker.getDebugName() + " and " + pops_served[j].getDebugName() + " would try to make a baby but the script is being called predictively");
								}

								whole_number_babies--;
								if(whole_number_babies == 0)
									break;
							}
						}
					}
				}
				
				outPredictionText = customConsts.getStringConst("publicprivatequarters custom output before_replace_text", out success);
				if(!success) outPredictionText = "This workplace will cause up to [0] pregnancies and provide service of quality [1].";
				outPredictionText = outPredictionText
					.Replace("[0]", ((int)countAttemptsAtPregnancy).ToString())
					.Replace("[1]", getAPI().getDisplayStringForQuality(inQuality));
			}
		}
		else
		{
			//must do this for any custom-script-having service workplace that does not force best quality service:
			inQuality = consts.getResourceQualityMin();
		}
		
		//outputs: generally if they do not need to be changed, don't modify the values going out, even as a "sanity/safety check".  Doing so would force changes to this script if other scripts change (from, for example, mods)
		toReturn.Add(inResourcesConsumedAsInput);
		toReturn.Add(inResourcesConsumedOtherwise);
		toReturn.Add(inResourcesCreated);
		toReturn.Add(inQuality);
		toReturn.Add(inWorkplaceOn);
		toReturn.Add(outPredictionText);
		return toReturn;
	</mScriptCalledBetweenOutputCalculationAndResolution> 
	
	<mOutputResourceQuanDailyFactor>0.545</mOutputResourceQuanDailyFactor> <!-- TODO double check this once everything is established.  This value will make output goods per day approximately equal to 1 for a single unskilled worker using one perfectly-average common good, for a workplace that does not work the land. -->
	<mInputResourceQuanDailyFactor>1</mInputResourceQuanDailyFactor> <!-- This value will make input goods per day approximately equal to 1, spread over all inputs (not counting those which are required to be consumed TODO figure that out?). -->
	
	<mIsHousing>0</mIsHousing> <!-- bool, true if nonzero -->
	<mIsWorkplace>1</mIsWorkplace> <!-- bool, true if nonzero -->
	<mTagList>
	  <i1>road benefit increase leader control count</i1>
	  
	  <!-- description tags: -->
	  <i1>description_shape_top_noun:thatches</i1>
	  <i1>description_shape_side_noun:walls</i1>
	  <i1>description_shape_middle_noun:beds</i1>
	  <i1>description_shape_bottom_noun:floors</i1>
	</mTagList>
  </igBuildingKind>
  
  
</core_data>