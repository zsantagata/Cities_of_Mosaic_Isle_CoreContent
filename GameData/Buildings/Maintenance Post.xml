<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>
	<customconsts name="default">
		<mCustomVariableList kind="add">
			<i1><a>maintenance_post repair_mult max</a> <b>double</b> <c>10.0</c></i1> <!-- this many days of wear and tear can be repaired by a Maintenance Post that would output max quality service -->
			<i1><a>maintenance_post no_repair prediction_text before_replace_text</a> <b>string</b>
			<c>This workplace will not repair durability to buildings in its radius.</c></i1>
			<i1><a>maintenance_post repair prediction_text before_replace_text</a> <b>string</b>
			<c>This workplace will repair [0] durability to buildings in its radius.</c></i1>
		</mCustomVariableList>
	</customconsts>

  <igBuildingKind name="Maintenance Post">
    <Encyclopedia_Entry>
	  <full_path>Buildings/Maintenance Post</full_path>
	  <body_text>Workers at a Maintenance Post will repair, and preserve, buildings in its radius.</body_text><!-- in order to prevent the encyclopedia entry from being visible, we set the body text to empty -->
	  <image_SS></image_SS>
	  <related_entries_full_paths>
	  <!-- nothing in this list of entries -->
	  </related_entries_full_paths>
	</Encyclopedia_Entry>
	<mBuildingKindQualities>0x28003</mBuildingKindQualities><!-- 0x1 = underwater enable, 0x2 = overwater enable, 0x8000 = this is a service workplace (outputs no goods), 0x20000 = workplace forces best quality (only valid for service industry buildings) -->
    <mWidth>2</mWidth>
    <mHeight>2</mHeight>
	
	<mVisualFeedbackFlag>0x1</mVisualFeedbackFlag>

	<mPopDaysToBuild>1</mPopDaysToBuild>
	<mBaseDurability>50</mBaseDurability>
	
	<mResourcesToBuild> <!-- this is a list of: reference to resource, int value (positive).  If nothing exists, this building does not require any resources to build -->
	</mResourcesToBuild>
	
	<mBeautyValue>-3</mBeautyValue>
	<mBeautyRadius>5</mBeautyRadius>
    <mBeautySynergyBuildings>
	</mBeautySynergyBuildings>
	
    <mSSIDs>
		<i>Maintenance Post</i>
	</mSSIDs>
	
	<mMaxWorkers>24</mMaxWorkers>
	<mIndustry>Repair</mIndustry>
	<mRadius>16</mRadius>
	
	<mResourceInputs_NotForOutputs_RequiredOther_Exclusive_AmountWeight_FitnessFactor> <!-- this is a list of: reference to resource (common input resource), list of references to resources (outputs for which consumption of the common-input-resource is disabled), list of references to resources (other resources which must be consumed while the common-input-resource is being consumed), list of references to resources (other resources which cannot be consumed while the common-input-resource is being consumed) -->
	  <i1>
	    <a>TAG:woody</a>
		<b>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>1.0</e>
		<f>1.0</f>
	  </i1>
	  <i1>
	    <a>TAG:metallic</a>
		<b>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>1.0</e>
		<f>1.125</f>
	  </i1>
	  <i2>
	    <a>TAG:stony</a>
		<b>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>1.0</e>
		<f>1.3</f>
	  </i2>
	</mResourceInputs_NotForOutputs_RequiredOther_Exclusive_AmountWeight_FitnessFactor>
	
	<mScriptCalledBetweenOutputCalculationAndResolution>
		//intent: repair from 0 to 5x of daily damage, but not for buildings which cannot be repaired
		
		//common to all workplace scripts:
		if(inArguments.Length &lt; 7)
		{
		  return null;
		}
		IFBuilding inWorkplace = (IFBuilding)inArguments[0];
		Dictionary&lt;IFResource, double&gt; inResourcesConsumedAsInput = (Dictionary&lt;IFResource, double&gt;)inArguments[1];
		Dictionary&lt;IFResource, double&gt; inResourcesConsumedOtherwise = (Dictionary&lt;IFResource, double&gt;)inArguments[2];
		Dictionary&lt;IFResource, double&gt; inResourcesCreated = (Dictionary&lt;IFResource, double&gt;)inArguments[3];
		double inQuality = (double)inArguments[4];
		bool inWorkplaceOn = (bool)inArguments[5];
		bool inJustPredicting = (bool)inArguments[6];
		
		List&lt;object&gt; toReturn = new List&lt;object&gt;();
		var customConsts = getAPI().getCustomConsts();
		var consts = getAPI().getConsts();
		var customScripts = getAPI().getCustomScripts();
		var variableHandler = getAPI().getVariableHandler();
		bool success = false;
		
		string outPredictionText = "";
		
		//start of unique part of script:
		double min_quality_possible = consts.getResourceQualityMin();
		double max_quality_possible = consts.getResourceQualityMax();
		double max_repair_multiplier = customConsts.getDoubleConst("maintenance_post repair_value max", out success);
		if(!success) max_repair_multiplier = 10.0d;
		
		double daily_damage_value = customConsts.getDoubleConst("map building damage_daily value", out success);
		if(!success) daily_damage_value = 1.0d;
		double amount_repaired = inQuality - min_quality_possible;
		amount_repaired = (amount_repaired) / (max_quality_possible - min_quality_possible);
		amount_repaired = max_repair_multiplier * amount_repaired * daily_damage_value;
		if(amount_repaired == 0.0d || amount_repaired &lt; 0.0d) //this is AKA quality = min_quality_possible and happens if we are not providing any resources to this Maintenance Post, or have no workers
		{
			outPredictionText = customConsts.getStringConst("maintenance_post no_repair prediction_text before_replace_text", out success);
			if(!success) outPredictionText = "This workplace will not repair durability to buildings in its radius.";
			inWorkplaceOn = false;
		}
		else
		{
			if(amount_repaired &lt; 1.0d)
				amount_repaired = daily_damage_value; //always repair at least one day of damage
				
		    outPredictionText = customConsts.getStringConst("maintenance_post repair prediction_text before_replace_text", out success);
		    if(!success) outPredictionText = "This workplace will repair [0] durability to buildings in its radius.";
			outPredictionText = outPredictionText.Replace("[0]", getAPI().getDisplayStringForDouble(amount_repaired));
			
			if(!inJustPredicting)
			{
				addDebugMessage(inScriptInstance, inWorkplace.getDebugName() + " will repair " + amount_repaired + " durability on surrounding buildings");

				//this code fetches all buildings in a radius and puts them in a set
				IFMap map = getAPI().getLocalCommunity().getDomesticComponent().getMap();
				ReadOnlyCollection&lt;IFMapTile&gt; tiles = map.getMapTilesInBuildingRadius(inWorkplace);
				HashSet&lt;IFBuilding&gt; served_buildings = new HashSet&lt;IFBuilding&gt;();
				HashSet&lt;IFBuilding&gt; unserved_buildings = new HashSet&lt;IFBuilding&gt;(); //this is just for cleaning up debug messages
				for(int i = 0; i &lt; tiles.Count; i++)
				{
					if(tiles[i].hasBuilding())
					{
						if(!tiles[i].getBuilding().getBuildingKind().hasTag("disable repair"))
						{
							if(!served_buildings.Contains(tiles[i].getBuilding()))
							{
								served_buildings.Add(tiles[i].getBuilding());
								addDebugMessage(inScriptInstance, tiles[i].getBuilding().getDebugName() + " has a tile within radius and is served by this Maintenance Post");
							}
						}
						else
						{
							if(!unserved_buildings.Contains(tiles[i].getBuilding()))
							{
								unserved_buildings.Add(tiles[i].getBuilding());
								addDebugMessage(inScriptInstance, tiles[i].getBuilding().getDebugName() + " has a tile within radius but is not a repairable buildingkind");
							}
						}
					}
				}

				foreach(IFBuilding blding in served_buildings)
				{
					Int64 new_durab = (Int64)(blding.getCurrentBuildingDurability() + amount_repaired);
					addDebugMessage(inScriptInstance, blding.getDebugName() + " being repaired to " + new_durab.ToString() + " of " + blding.getMaxBuildingDurability() + " durability");
					Int64 existingNewDurab = variableHandler.getInt("maintenancePost_repairTarget_blding" + blding.getUID(), out success);
					if(success &amp;&amp; (existingNewDurab &gt;= new_durab))
					{
						//don't store new durability
					}
					else
					{
						//store new durability so building-decay script (which will run after this script during midnight processing) does not degrade the building back down if we've "overhealed"
						variableHandler.storeIntVariable(getAPI().getCalendar().getCurrentDate(), "maintenancePost_repairTarget_blding" + blding.getUID(), new_durab);
					}
					blding.setCurrentBuildingDurability(new_durab); //the C# function will limit to max durability
				}
			}
		}

		//outputs: generally if they do not need to be changed, don't modify the values going out, even as a "sanity/safety check".  Doing so would force changes to this script if other scripts change (from, for example, mods)
		//force the output quality to minimum quality here to prevent housing quality calculations caring about this as a service; that calculation uses durability directly anyway
		inQuality = min_quality_possible;
		
		toReturn.Add(inResourcesConsumedAsInput);
		toReturn.Add(inResourcesConsumedOtherwise);
		toReturn.Add(inResourcesCreated);
		toReturn.Add(inQuality);
		toReturn.Add(inWorkplaceOn);
		toReturn.Add(outPredictionText);
		return toReturn;
  </mScriptCalledBetweenOutputCalculationAndResolution>
	
	<mOutputResourceQuanDailyFactor>0.545</mOutputResourceQuanDailyFactor> <!-- TODO double check this once everything is established.  This value will make output goods per day approximately equal to 1 for a single unskilled worker using one perfectly-average common good, for a workplace that does not work the land. -->
	<mInputResourceQuanDailyFactor>1</mInputResourceQuanDailyFactor> <!-- This value will make input goods per day approximately equal to 1, spread over all inputs (not counting those which are required to be consumed TODO figure that out?). -->
	
	<mIsHousing>0</mIsHousing> <!-- bool, true if nonzero -->
	<mIsWorkplace>1</mIsWorkplace> <!-- bool, true if nonzero -->
	
	<mTagList>
	  <i1>road benefit increase leader control count</i1>
	  <i1>workers danger</i1>
	
	  <!-- description tags: -->
	  <i1>description_shape_top_noun:roof tiles</i1>
	  <i1>description_shape_side_noun:walls</i1>
	  <i1>description_shape_middle_noun:tool chests</i1>
	  <i1>description_shape_bottom_noun:stones</i1>
	</mTagList>
  </igBuildingKind>
  

  
</core_data>