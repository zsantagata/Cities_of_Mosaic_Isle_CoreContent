<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>
	<customconsts name="default">
		<mCustomVariableList kind="add">
			<!-- consts related to this file's scripts can have any name (though they probably shouldn't overwrite other consts) -->
			<i1><a>architecthall custom output predition before_replace_text</a> <b>string</b>
			<c>This workplace will increase tomorrow's construction effort by [0] pop-days.</c></i1>
			
			<i1><a>architecthall popdays_per_pop min</a> <b>double</b> <c>0.5</c></i1> <!-- when the output quality is minimum, each pop working in the building will add this many pop days (for reference, unemployed and healthy = 1) -->
			<i1><a>architecthall popdays_per_pop max</a> <b>double</b> <c>2.0</c></i1> <!-- when the output quality is maximum, each pop working in the building will add this many pop days (for reference, unemployed and healthy = 1) -->
		</mCustomVariableList>
	</customconsts>
	
  <igBuildingKind name="Architect's Hall">
    <Encyclopedia_Entry>
	  <full_path>Buildings/Architect's Hall</full_path>
	  <body_text>Architect's Hall.  Put encyclopedia description here.</body_text><!-- in order to prevent the encyclopedia entry from being visible, we set the body text to empty -->
	  <image_SS></image_SS>
	  <related_entries_full_paths>
	  <!-- nothing in this list of entries -->
	  </related_entries_full_paths>
	</Encyclopedia_Entry>
	<mBuildingKindQualities>0x28003</mBuildingKindQualities><!-- 0x1 = underwater enable, 0x2 = overwater enable, 0x8000 = this is a service workplace (outputs no goods), 0x20000 = workplace forces best quality (only valid for service industry buildings) -->
	<mWidth>2</mWidth>
    <mHeight>2</mHeight>
	<mPopDaysToBuild>12</mPopDaysToBuild> <!-- values below 1 will be treated as 1 -->
	<mBaseDurability>80</mBaseDurability>
	
	<mResourcesToBuild> <!-- this is a list of: reference to resource, int value (positive).  If nothing exists, this building does not require any resources to build.  If one entry has a quantity of 0, then this building can be built with resources or not. -->	  
	  <i1>
	    <a>TAG:stony</a>
	    <b>75</b>
	  </i1>
	  <i1>
	    <a>TAG:woody</a>
	    <b>75</b>
	  </i1>
	  <i1>
	    <a>TAG:metallic</a>
	    <b>50</b>
	  </i1>
	</mResourcesToBuild>
	
	<mOutputMultBasedOnConstructionResources> <!-- this is a list of: reference to resource, int value.  If nothing exists, this building does not shift output based on construction resources.  Names here that do not appear in mResourcesToBuild will have no effect -->
	</mOutputMultBasedOnConstructionResources>
	
	<mDurabilityMultBasedOnConstructionResources> <!-- this is a list of: reference to resource, floating pt value -->
	  <i1>
	    <a>TAG:woody</a>
		<b>1.25</b>
	  </i1>
	  <i1>
	    <a>TAG:stony</a>
		<b>2.5</b>
	  </i1>
	  <i1>
	    <a>TAG:metallic</a>
		<b>1.75</b>
	  </i1>
	</mDurabilityMultBasedOnConstructionResources>
	
	<mBeautyValue>5</mBeautyValue>
	<mBeautyRadius>3</mBeautyRadius>
    <mBeautySynergyBuildings><!-- basic list of names -->
	</mBeautySynergyBuildings>
	
    <mSSIDs>
		<i>Architect's Hall</i>
	</mSSIDs>
	
	<mMaxWorkers>24</mMaxWorkers>
	<mIndustry>Construction</mIndustry>
	
	<mResourceInputs_NotForOutputs_RequiredOther_Exclusive_AmountWeight_FitnessFactor> <!-- this is a list of: reference to resource (common input resource), list of references to resources (outputs for which consumption of the common-input-resource is disabled), list of references to resources (other resources which must be consumed while the common-input-resource is being consumed), list of references to resources (other resources which cannot be consumed while the common-input-resource is being consumed) -->
	  <i1>
	    <a>TAG:boney</a>
		<b>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>1.0</e>
		<f>0.8</f>
	  </i1>
	  <i1>
	    <a>TAG:woody</a>
		<b>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>1.0</e>
		<f>1.0</f>
	  </i1>
	  <i1>
	    <a>TAG:stony</a>
		<b>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>1.0</e>
		<f>1.125</f>
	  </i1>
	  <i1>
	    <a>TAG:metallic</a>
		<b>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>1.0</e>
		<f>1.3</f>
	  </i1>
	</mResourceInputs_NotForOutputs_RequiredOther_Exclusive_AmountWeight_FitnessFactor>
	
	<mRequiredResourceInputs><!-- basic list of names: if the workplace is on at all, these resources must be consumed -->
	</mRequiredResourceInputs>
	
	<mOutputResources><!-- basic list of names: possibilities, chosen by player in the moment.  Not all created at once -->
	</mOutputResources>
	
	<mScriptCalledDaily></mScriptCalledDaily> <!-- exactly what it says on the tin: if this building is fully constructed, this script is called daily.  First input is the building itself. -->
	<mScriptCalledBetweenOutputCalculationAndResolution>
		//intent: add to the pop-days of construction that will occur tomorrow
		
		//common to all workplace scripts:
		if(inArguments.Length &lt; 7)
		{
		  return null;
		}
		IFBuilding inWorkplace = (IFBuilding)inArguments[0];
		Dictionary&lt;IFResource, double&gt; inResourcesConsumedAsInput = (Dictionary&lt;IFResource, double&gt;)inArguments[1];
		Dictionary&lt;IFResource, double&gt; inResourcesConsumedOtherwise = (Dictionary&lt;IFResource, double&gt;)inArguments[2];
		Dictionary&lt;IFResource, double&gt; inResourcesCreated = (Dictionary&lt;IFResource, double&gt;)inArguments[3];
		double inQuality = (double)inArguments[4];
		bool inWorkplaceOn = (bool)inArguments[5];
		bool inJustPredicting = (bool)inArguments[6];
		
		List&lt;object&gt; toReturn = new List&lt;object&gt;();
		var customConsts = getAPI().getCustomConsts();
		var consts = getAPI().getConsts();
		var customScripts = getAPI().getCustomScripts();
		var variableHandler = getAPI().getVariableHandler();
		bool success = false;
		
		string outPredictionText = "";
		
		//start of unique part of script:
		double min_quality_possible = consts.getResourceQualityMin();
		double max_quality_possible = consts.getResourceQualityMax();
		
		double min_perpop = customConsts.getDoubleConst("architecthall popdays_per_pop min", out success);
		if(!success) min_perpop = 0.5d;
		double max_perpop = customConsts.getDoubleConst("architecthall popdays_per_pop max", out success);
		if(!success) max_perpop = 2.0d;
		
		double perpop = (min_perpop) + (max_perpop - min_perpop) * (inQuality - min_quality_possible) / (max_quality_possible - min_quality_possible);
		//correction: if quality is exactly minimum, then treat the workplace as if it is off:
		if((inQuality == min_quality_possible) || (!inWorkplaceOn))
		{
			perpop = 0;
		}
		double constructionDaysAdded = perpop * inWorkplace.getWorkplaceComponent().getWorkerPops().Count;
		
		outPredictionText = customConsts.getStringConst("architecthall custom output predition before_replace_text", out success);
		if(!success) outPredictionText = "This workplace will increase tomorrow's construction effort by [0] pop-days.";
		outPredictionText = outPredictionText.Replace("[0]", constructionDaysAdded.ToString());
		if(inQuality == min_quality_possible)
		{
			outPredictionText = ""; //this will let the default building text indicate the problem
		}
		
		if(!inJustPredicting)
		{
			bool needConnection = false;
			string upperConnectedVariableName = customConsts.getStringConst("mBuildingConstruction additional_days_from_other_sources variable name", out success);
			if(!success) upperConnectedVariableName = "constructionAdditionalEffort";
			IFMap map = getAPI().getLocalCommunity().getDomesticComponent().getMap();
			upperConnectedVariableName += "_map" + map.getUID();
			IFConnectedVariable upperVar = null;
			if(!variableHandler.connectedVariableExists(upperConnectedVariableName))
			{
				variableHandler.addConnectedDouble(upperConnectedVariableName, 0.0d, out upperVar, 
					getAPI().getCalendar().getCurrentDate() + 1, IFConnectedVariable.eCombinationType.cAdd); //+1 because it needs to persist until tomorrow (construction already happened today)
				needConnection = true;
			}
			else
			{
				upperVar = variableHandler.getConnectedVariable(upperConnectedVariableName);
				upperVar.setExpirationDate(getAPI().getCalendar().getCurrentDate() + 1); //+1 because it needs to persist until tomorrow (construction already happened today)
			}
			IFConnectedVariable lowerVar = null;
			string lowerConnectedVariableName = "architecthall" + inWorkplace.getUID() + "_" + upperConnectedVariableName;
			if(!variableHandler.connectedVariableExists(lowerConnectedVariableName))
			{
				variableHandler.addConnectedDouble(lowerConnectedVariableName, 0.0d, out lowerVar, 
					getAPI().getCalendar().getCurrentDate() + 1); //+1 because it needs to persist until tomorrow (construction already happened today)
				needConnection = true;
			}
			else
			{
				lowerVar = variableHandler.getConnectedVariable(lowerConnectedVariableName);
				lowerVar.setExpirationDate(getAPI().getCalendar().getCurrentDate() + 1); //+1 because it needs to persist until tomorrow (construction already happened today)
			}
			if(needConnection)
			{
				variableHandler.connectVariables(lowerVar, upperVar);
			}
			lowerVar.setVariable(constructionDaysAdded);
		}

		//outputs: generally if they do not need to be changed, don't modify the values going out, even as a "sanity/safety check".  Doing so would force changes to this script if other scripts change (from, for example, mods)
		//force the output quality to minimum quality here to prevent housing quality calculations caring about this as a service
		inQuality = min_quality_possible;
		
		toReturn.Add(inResourcesConsumedAsInput);
		toReturn.Add(inResourcesConsumedOtherwise);
		toReturn.Add(inResourcesCreated);
		toReturn.Add(inQuality);
		toReturn.Add(inWorkplaceOn);
		toReturn.Add(outPredictionText);
		return toReturn;
	</mScriptCalledBetweenOutputCalculationAndResolution> 
	
	<mOutputResourceQuanDailyFactor>0.2725</mOutputResourceQuanDailyFactor> <!-- TODO double check this once everything is established.  This value will make output goods per day approximately equal to 0.5 for a single unskilled worker using one perfectly-average common good, for a workplace that does not work the land. -->
	<mInputResourceQuanDailyFactor>1</mInputResourceQuanDailyFactor> <!-- TODO double check this once everything is established.  This value will make input goods per day per worker approximately equal to 1, spread over all inputs (not counting those which are required to be consumed TODO figure that out?). -->
	
	<mIsHousing>0</mIsHousing> <!-- bool, true if nonzero -->
	<mIsWorkplace>1</mIsWorkplace> <!-- bool, true if nonzero -->
	<mTagList>
	
	  <!-- description tags: -->
	  <i1>description_shape_top_noun:roof tiles</i1>
	  <i1>description_shape_side_noun:walls</i1>
	  <i1>description_shape_middle_noun:desks</i1>
	  <i1>description_shape_bottom_noun:stones</i1>
	</mTagList>
  </igBuildingKind>
</core_data>