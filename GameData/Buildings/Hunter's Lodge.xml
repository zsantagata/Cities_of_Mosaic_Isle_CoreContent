<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>
  <igBuildingKind name="Hunter's Lodge">
    <Encyclopedia_Entry>
	  <full_path>Buildings/Hunter's Lodge</full_path>
	  <body_text>A preparation area where hunters store their tools, and a butcher's block awaiting their success.</body_text><!-- in order to prevent the encyclopedia entry from being visible, we set the body text to empty -->
	  <image_SS></image_SS>
	  <related_entries_full_paths>
	  <!-- nothing in this list of entries -->
	  </related_entries_full_paths>
	</Encyclopedia_Entry>
	<mBuildingKindQualities>0x16003</mBuildingKindQualities><!-- 0x1 = underwater enable, 0x2 = overwater enable, 0x2000 = workplace that uses land sources around it, 0x4000 = workplace chooses one output resource instead of making all at once, 0x10000 = workplace can use no inputs -->
    <mWidth>2</mWidth>
    <mHeight>4</mHeight>
	
	<mVisualFeedbackFlag>0x20</mVisualFeedbackFlag>

	<mPopDaysToBuild>2</mPopDaysToBuild> <!-- values below 1 will be treated as 1 -->
	<mBaseDurability>80</mBaseDurability>
	
	<mResourcesToBuild> <!-- this is a list of: reference to resource, int value (positive).  If one entry has a quantity of 0, then this building can be built with resources or not. -->
      <i1>
	    <a>Monument</a>
		<b>0</b>
	  </i1>
      <i1>
	    <a>TAG:woody</a>
		<b>40</b>
	  </i1>
      <i1>
	    <a>TAG:stony</a>
		<b>40</b>
	  </i1>
	  <i1>
	    <a>TAG:metallic</a>
		<b>35</b>
	  </i1>
	</mResourcesToBuild>
	
	<mOutputMultBasedOnConstructionResources>
      <i1>
	    <a>Monument</a>
		<b>0.9</b>
	  </i1>
	  <i1>
	    <a>TAG:metallic</a>
		<b>1.05</b>
	  </i1>
	</mOutputMultBasedOnConstructionResources>
	
	<mDurabilityMultBasedOnConstructionResources> <!-- this is a list of: reference to resource, floating pt value -->
	  <i1>
	    <a>TAG:woody</a>
		<b>1.25</b>
	  </i1>
	  <i1>
	    <a>TAG:stony</a>
		<b>2.5</b>
	  </i1>
	  <i1>
	    <a>TAG:metallic</a>
		<b>1.75</b>
	  </i1>
	  <i1>
	    <a>Monument</a>
		<b>0.8</b>
	  </i1>
	</mDurabilityMultBasedOnConstructionResources>
	
	<mBeautyValue>-30</mBeautyValue>
	<mBeautyRadius>7</mBeautyRadius>
    <mBeautySynergyBuildings><!-- basic list of names -->
	</mBeautySynergyBuildings>
	
    <mSSIDs>
		<i>Hunter's Lodge</i>
	</mSSIDs>
	
	<mMaxWorkers>8</mMaxWorkers>
	<mIndustry>Hunting</mIndustry>
	<mRadius>13</mRadius>
	<mDesolationRateInRadius>1.0</mDesolationRateInRadius>
	
	<mResourceInputs_NotForOutputs_RequiredOther_Exclusive_AmountWeight_FitnessFactor> <!-- this is a list of: reference to resource (common input resource), list of references to resources (outputs for which consumption of the common-input-resource is disabled), list of references to resources (other resources which must be consumed while the common-input-resource is being consumed), list of references to resources (other resources which cannot be consumed while the common-input-resource is being consumed) -->
	  <i1>
	    <a>TAG:woody</a>
		<b></b>
		<c></c>
		<d></d>
		<e>1.0</e>
		<f>0.95</f>
	  </i1>
	  <i1>
	    <a>TAG:boney</a>
		<b></b>
		<c></c>
		<d></d>
		<e>1.0</e>
		<f>1.0</f>
	  </i1>
	  <i1>
	    <a>TAG:plant-food</a>
		<b>
		  <i3>TAG:eats-animal-food-only</i3>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>1.0</e>
		<f>1.0</f>
	  </i1>
	  <i1>
	    <a>TAG:animal-food</a>
		<b>
		  <i2>TAG:eats-plant-food-only</i2>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>0.8</e>
		<f>1.0</f>
	  </i1>
	  <i1>
	    <a>TAG:metallic</a>
		<b>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>1.0</e>
		<f>1.125</f>
	  </i1>
	  <i1>
	    <a>Salt</a>
		<b>
		  <i1>*</i1>
		  <i1>Deer</i1>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>0.2</e>
		<f>1.3</f>
	  </i1>
	  <i1>
	    <a>TAG:milequip</a>
		<b>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>0.5</e>
		<f>2.0</f>
	  </i1>
	</mResourceInputs_NotForOutputs_RequiredOther_Exclusive_AmountWeight_FitnessFactor>
	
	<mRequiredResourceInputs><!-- basic list of names: if the workplace is on at all, these resources must be consumed -->
	</mRequiredResourceInputs>
	
	<mOutputResources><!-- basic list of names: possibilities, chosen by player in the moment.  Not all created at once -->
	  <i1>TAG:hunt-animal</i1>
	</mOutputResources>
	
	<mScriptCalledDaily></mScriptCalledDaily> <!-- exactly what it says on the tin: if this building is fully constructed, this script is called daily.  First input is the building itself. -->
	<mScriptCalledBetweenOutputCalculationAndResolution>
		//intent: call through to the common script to encounter animals, then calculate results of that encounter
		
		//common to all workplace scripts:
		if(inArguments.Length &lt; 7)
		{
		  return null;
		}
		IFBuilding inWorkplace = (IFBuilding)inArguments[0];
		Dictionary&lt;IFResource, double&gt; inResourcesConsumedAsInput = (Dictionary&lt;IFResource, double&gt;)inArguments[1];
		Dictionary&lt;IFResource, double&gt; inResourcesConsumedOtherwise = (Dictionary&lt;IFResource, double&gt;)inArguments[2];
		Dictionary&lt;IFResource, double&gt; inResourcesCreated = (Dictionary&lt;IFResource, double&gt;)inArguments[3];
		double inQuality = (double)inArguments[4];
		bool inWorkplaceOn = (bool)inArguments[5];
		bool inJustPredicting = (bool)inArguments[6];
		
		List&lt;object&gt; toReturn = new List&lt;object&gt;();
		var customConsts = getAPI().getCustomConsts();
		var consts = getAPI().getConsts();
		var customScripts = getAPI().getCustomScripts();
		var variableHandler = getAPI().getVariableHandler();
		bool success = false;
		
		string outPredictionText = "";
		
		//start of unique part of script:
		//gather quantity:
		double quantity = 0.0d;
		IFResource animalTarget = inWorkplace.getWorkplaceComponent().getOutputResourceChosen();
		if(inResourcesCreated.ContainsKey(animalTarget))
		{
			quantity = inResourcesCreated[animalTarget];
			inResourcesCreated.Clear();
			if(customScripts.runCustomScriptCheckTypes("animal_seeking_workplace_production", new List&lt;object&gt;() { inWorkplace, quantity, inQuality, inJustPredicting }, out List&lt;object&gt; scriptOutput, false, typeof(string), typeof(double)))
			{
				outPredictionText = (string)scriptOutput[0];
				double outQuantity = (double)scriptOutput[1];
				
				//take advantage of existing description scripts:
				Dictionary&lt;IFResource, Tuple&lt;double, double&gt;&gt; resourcesAdded = new Dictionary&lt;IFResource, Tuple&lt;double, double&gt;&gt;();
				foreach(var tuple in animalTarget.getBreakdownResources())
				{
					resourcesAdded.Add(tuple.Item1, Tuple.Create(tuple.Item2 * outQuantity, inQuality));
					//now, make the resource count correct:
					inResourcesCreated.Add(tuple.Item1, tuple.Item2 * outQuantity);
				}
				if(customScripts.runCustomScriptCheckTypes("replaceDescriptionMarkupKind_common_resourcedictionary", new List&lt;object&gt;() { resourcesAdded, true }, out List&lt;object&gt; replacedMarkup2, false, typeof(string)))
				{
					outPredictionText = outPredictionText.Replace("[1]", replacedMarkup2[0].ToString());
				}
			}
		}
		else
		{
			inResourcesCreated.Clear();
		}

		//outputs: generally if they do not need to be changed, don't modify the values going out, even as a "sanity/safety check".  Doing so would force changes to this script if other scripts change (from, for example, mods)
		toReturn.Add(inResourcesConsumedAsInput);
		toReturn.Add(inResourcesConsumedOtherwise);
		toReturn.Add(inResourcesCreated);
		toReturn.Add(inQuality);
		toReturn.Add(inWorkplaceOn);
		toReturn.Add(outPredictionText);
		return toReturn;
	</mScriptCalledBetweenOutputCalculationAndResolution> 
	
	<mOutputResourceQuanDailyFactor>5.45</mOutputResourceQuanDailyFactor> <!-- TODO double check this once everything is established.  This value will make output goods per day approximately equal to 1 for a single unskilled worker using one perfectly-average common good, for a workplace that does not work the land. -->
	<mInputResourceQuanDailyFactor>0.5</mInputResourceQuanDailyFactor> <!-- TODO double check this once everything is established.  This value will make input goods per day per worker approximately equal to 1, spread over all inputs (not counting those which are required to be consumed TODO figure that out?). -->
	
	<mIsHousing>0</mIsHousing> <!-- bool, true if nonzero -->
	<mIsWorkplace>1</mIsWorkplace> <!-- bool, true if nonzero -->
	
	<mTagList>
	  <i1>road benefit increase leader control count</i1>
	  <i1>workplace scale radius to worker count</i1>
	  <i1>workers danger</i1>
	  
	  <!-- description tags: -->
	  <i1>description_shape_top_noun:thatches</i1>
	  <i1>description_shape_side_noun:walls</i1>
	  <i1>description_shape_middle_noun:hooks</i1>
	  <i1>description_shape_bottom_noun:refuse holes</i1>
	</mTagList>
  </igBuildingKind>
  
  
</core_data>