<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>
	<customconsts name="default">
		<mCustomVariableList kind="add">
			<!-- consts related to this file's scripts can have any name (though they probably shouldn't overwrite other consts) -->
			<i1><a>water_carrier boiler quality_mult</a> <b>double</b> <c>1.15</c></i1>
		</mCustomVariableList>
	</customconsts>
	
  <igBuildingKind name="Water Carrier">
    <Encyclopedia_Entry>
	  <full_path>Buildings/Water Carrier</full_path>
	  <body_text>A well dug into the ground, and buckets for workers to carry water.  Provides Water to surrounding houses.</body_text><!-- in order to prevent the encyclopedia entry from being visible, we set the body text to empty -->
	  <image_SS></image_SS>
	  <related_entries_full_paths>
	  <!-- nothing in this list of entries -->
	  </related_entries_full_paths>
	</Encyclopedia_Entry>
	<mBuildingKindQualities>0x38006</mBuildingKindQualities><!-- 0x2 = overwater enable, 0x4 = passable, 0x8000 = this is a service workplace (outputs no goods), 0x10000 = workplace can use no inputs, 0x20000 = workplace forces best quality (only valid for service industry buildings) -->
    <mWidth>2</mWidth>
    <mHeight>3</mHeight>
	
	<mVisualFeedbackFlag>0x4</mVisualFeedbackFlag>

	<mPopDaysToBuild>1</mPopDaysToBuild>
	<mBaseDurability>60</mBaseDurability>
	
	<mResourceCombinationsToBuild> <!-- this is a list of lists.  The inner list elements are pairs of Resource, double quantity.  If nothing exists, this building does not require any resources to build.  If one entry has a sum quantity of 0, then this building can be built with resources or not. -->
		<i1>
			<i1>
				<a>TAG:hard construction</a>
				<b>30</b>
			</i1>
		</i1>
		<i1>
			<i1>
				<a>TAG:hard construction</a>
				<b>15</b>
			</i1>
			<i1>
				<a>TAG:flexible construction</a>
				<b>15</b>
			</i1>
		</i1>
		<i1>
			<i1>
				<a>Monument</a>
				<b>0</b>
			</i1>
		</i1>
	</mResourceCombinationsToBuild>
	
	<mOutputMultBasedOnConstructionResources> <!-- this is a list of: reference to resource, double value -->
	  <i1>
	    <a>TAG:metallic</a>
		<b>1.15</b>
	  </i1>
	  <i1>
	    <a>Monument</a> 
		<b>0.9</b>
	  </i1>
	</mOutputMultBasedOnConstructionResources>
	
	<mDurabilityMultBasedOnConstructionResources> <!-- this is a list of: reference to resource, floating pt value -->
	  <i1>
	    <a>TAG:woody</a>
		<b>1.25</b>
	  </i1>
	  <i1>
	    <a>TAG:stony</a>
		<b>2.5</b>
	  </i1>
	  <i1>
	    <a>TAG:metallic</a>
		<b>1.75</b>
	  </i1>
	  <i1>
	    <a>Monument</a>
		<b>0.8</b>
	  </i1>
	</mDurabilityMultBasedOnConstructionResources>
	
	<mBeautyValue>20</mBeautyValue>
	<mBeautyRadius>10</mBeautyRadius>
    <mBeautySynergyBuildings>
	</mBeautySynergyBuildings>
	
    <mSSIDs>
		<i>Water Carrier</i>
	</mSSIDs>
	
	<mMaxWorkers>4</mMaxWorkers>
	<mIndustry>Water Bearing</mIndustry>
	<mRadius>8</mRadius>
	
	<mResourceInputs_NotForOutputs_RequiredOther_Exclusive_AmountWeight_FitnessFactor> <!-- this is a list of: reference to resource (common input resource), list of references to resources (outputs for which consumption of the common-input-resource is disabled), list of references to resources (other resources which must be consumed while the common-input-resource is being consumed), list of references to resources (other resources which cannot be consumed while the common-input-resource is being consumed) -->	  <i1>
	    <a>TAG:illHeal</a>
		<b>
		</b>
		<c>
		</c>
		<d>
		</d>
		<e>1.0</e>
		<f>1.3</f>
	  </i1>
	</mResourceInputs_NotForOutputs_RequiredOther_Exclusive_AmountWeight_FitnessFactor>
	
	<mRequiredResourceInputs><!-- basic list of names: if the workplace is on at all, these resources must be consumed -->
	</mRequiredResourceInputs>
	
	<mScriptCalledBetweenOutputCalculationAndResolution>
	    //script intent: if there is a Boiler being worked within this building's radius, output quality is increased
	
		//common to all workplace scripts:
		if(inArguments.Length &lt; 7)
		{
		  return null;
		}
		IFBuilding inWorkplace = (IFBuilding)inArguments[0];
		Dictionary&lt;IFResource, double&gt; inResourcesConsumedAsInput = (Dictionary&lt;IFResource, double&gt;)inArguments[1];
		Dictionary&lt;IFResource, double&gt; inResourcesConsumedOtherwise = (Dictionary&lt;IFResource, double&gt;)inArguments[2];
		Dictionary&lt;IFResource, double&gt; inResourcesCreated = (Dictionary&lt;IFResource, double&gt;)inArguments[3];
		double inQuality = (double)inArguments[4];
		bool inWorkplaceOn = (bool)inArguments[5];
		bool inJustPredicting = (bool)inArguments[6];
		
		List&lt;object&gt; toReturn = new List&lt;object&gt;();
		var customConsts = getAPI().getCustomConsts();
		var consts = getAPI().getConsts();
		var customScripts = getAPI().getCustomScripts();
		var variableHandler = getAPI().getVariableHandler();
		bool success = false;
		
		string outPredictionText = "";
		
		//start of unique part of script:
		//start of unique part of script:
		bool boiler_exists = false;
		IFBuildingKind kind = inWorkplace.getBuildingKind();
		IFMap map = getAPI().getLocalCommunity().getDomesticComponent().getMap();
		ReadOnlyCollection&lt;IFMapTile&gt; tiles = map.getMapTilesInBuildingRadius(inWorkplace);
		for(int i = 0; i &lt; tiles.Count; i++)
		{
		  if(tiles[i].hasBuilding())
		  {
		    if(tiles[i].getBuilding().getBuildingKind().getInternalName() == "Boiler")
			{
			  if(tiles[i].getBuilding().getWorkplaceComponent().isWorkplaceOn())
			  {
			    addDebugMessage(inScriptInstance, tiles[i].getBuilding().getDebugName() + " is a Boiler which is being worked in the radius of Water Bearing building " + inWorkplace.getDebugName());
				boiler_exists = true;
				break;
			  }
		    }
		  }
		}
		
		if(boiler_exists)
		{
			double qualMult = customConsts.getDoubleConst("water_carrier boiler quality_mult", out success);
			if(!success) qualMult = 1.15d;
			if(!inJustPredicting) addDebugMessage(inScriptInstance, inWorkplace.getDebugName() + " has a Boiler being worked within radius, increasing output quality from " + inQuality + " to " + (inQuality * qualMult).ToString());
			inQuality = (inQuality * qualMult);
		}
		
		//outputs: generally if they do not need to be changed, don't modify the values going out, even as a "sanity/safety check".  Doing so would force changes to this script if other scripts change (from, for example, mods)
		toReturn.Add(inResourcesConsumedAsInput);
		toReturn.Add(inResourcesConsumedOtherwise);
		toReturn.Add(inResourcesCreated);
		toReturn.Add(inQuality);
		toReturn.Add(inWorkplaceOn);
		toReturn.Add(outPredictionText);
		return toReturn;
	</mScriptCalledBetweenOutputCalculationAndResolution>
	
	<mOutputResourceQuanDailyFactor>0.545</mOutputResourceQuanDailyFactor> <!-- TODO double check this once everything is established.  This value will make output goods per day approximately equal to 1 for a single unskilled worker using one perfectly-average common good, for a workplace that does not work the land. -->
	<mInputResourceQuanDailyFactor>1</mInputResourceQuanDailyFactor>
	
	<mIsHousing>0</mIsHousing> <!-- bool, true if nonzero -->
	<mIsWorkplace>1</mIsWorkplace> <!-- bool, true if nonzero -->
	
	<mTagList>
	  <i1>road benefit increase leader control count</i1>
	  
	  <!-- description tags: -->
	  <i1>description_shape_top_noun:spouts</i1>
	  <i1>description_shape_side_noun:rims</i1>
	  <i1>description_shape_middle_noun:spires</i1>
	  <i1>description_shape_bottom_noun:pools</i1>
	</mTagList>
  </igBuildingKind>
  
  
</core_data>