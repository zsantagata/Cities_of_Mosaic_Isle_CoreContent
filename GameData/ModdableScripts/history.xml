<?xml version="1.0" encoding="UTF-8"?>
<!-- The above is a default, but its inclusion should be everywhere just to indicate that all files, for our purposes, are UTF-8 encoded.  Also, as a reminder, the less than, greater than, ampersand, apostrophe, and quotation mark (quotation mark only in certain contexts) are invalid XML and must be replaced with the literal text &lt; &gt; &amp; &apos; &quot; with the semicolons -->
<core_data>
  <!-- custom consts related to hardcoded history: -->
  
  <!-- The following is the full list of identifiers for hard-coded historical occurrences, and a description of when they happen and what their inDetailsToReplace are:
  HISTORY_OCCURRENCE_IDENTIFIER || DESCRIPTION OF HISTORY OCCURRENCE
  city_settled || pops settled a community (domestic only)
  rename_player_community || the player chose to rename the local community
  rename_servant_community || the player chose to rename a servant community
  
  building_built || the player community has built a building
  building_deleted || the player chose to delete a building
  building_crumble || the slow march of time has caused a building to crumble (it was not maintained)
  building_destroy || enemies of the player community destroyed a building
  
  pop_died_violence || a violent attack by another pop has killed a pop
  pop_died_wound || a pop has succumbed to injuries and died
  pop_died_illness || a pop has succumbed to illness and died
  pop_died_oldage || a pop has died from old age
  pop_died_unspecified || a pop has died from an unspecified or unknown cause
  
  pop_wound_workplace || a pop was wounded due to a workplace accident
  pop_wound_exposure || a pop was wounded due to exposure to the elements
  pop_wound_combat || a pop was wounded due to combat
  pop_wound_illness || a pop was wounded due to illness
  pop_wound_unspecified || a pop was wounded from an unspecified or unknown cause
  
  pop_illness_environment || a pop became ill due to exposure to the environment
  pop_illness_another || a pop became ill due to exposure to another sick pop
  pop_illness_unspecified || a pop became ill due to an unspecified or unknown cause
  
  child_born_dead || a mother gave birth but the child was lost
  child_born_alive || a mother gave birth to a healthy child
  created_child_together || a pop became pregnant due to interaction with another pop //TODO this is script-only
  created_child_alone || a pop became pregnant but who knows how?  //TODO this is script-only
  lady_raised_child || The Lady took and raised a healthy child to adulthood, in an instant (this happens to all children of Mosaic Isle)
  
  //NOTE TO SELF AND MODDERS: remember that delegation "historical" occurrences can be in the calendar future, because delegations are resolved like that
  
  pop_sent_on_delegation || a pop was sent on a delegation
  delegation_started || a delegation was started //minor adjectives will include the delegation kind
  delegation_arrived_at_community || a delegation has arrived at its target community //minor adjectives will include the delegation kind //note that this is only called if the player community is the source, or the target, community
  delegation_returned || a delegation has returned home //minor adjectives will include the delegation kind
  delegation_lost || a delegation was lost away from home //minor adjectives will include the delegation kind
  
  playerdelegation_violent_nocombat_leave || a player-sourced delegation retreated from their target without fighting
  playerdelegation_violent_siege_end || a player-sourced delegation fought against a target community //(TODO this is the full end results)
  playerdelegation_diplomacy_gift || a player-sourced delegation gave a gift to a target community
  playerdelegation_diplomacy_leave || a player-sourced delegation did not give a gift to a target community
  playerdelegation_trade_success || a player-sourced delegation made a trade with a target community
  playerdelegation_trade_failure || a player-sourced delegation failed to make a trade with a target community
  playerdelegation_trade_leave || a player-sourced delegation chose not to make a trade with a target community
  playerdelegation_emigration_join || a player-sourced delegation chose to join the target community
  playerdelegation_emigration_wander || a player-sourced delegation chose to become wanderers
  playerdelegation_emigration_return || a player-sourced delegation chose to return home
  
  pop_change_loyaltyloss || a pop has changed its loyalty to another community (this is for loss)
  pop_change_loyaltygain || a pop has changed its loyalty to another community (this is for gain)
  pop_abducted || a pop has been abducted from its home by force
  
  pop_became_city_leader || a pop has become the City Leader
  pop_nolonger_city_leader || a pop is no longer City Leader
  pop_became_race_leader || a pop has become the Race Leader //minor adjectives will include the race adjective
  pop_nolonger_race_leader || a pop is no longer Race Leader //minor adjectives will include the race adjective
  pop_became_industry_leader || a pop has become an industry Leader  //minor adjectives will include the industry name
  pop_nolonger_industry_leader || a pop is no longer industry Leader //minor adjectives will include the industry name
  
  //note that these two are never called by C# code but are useful to have here
  rebels_succeed || rebels in the player community took power
  rebels_failure || rebels in the player community failed to take power
  
  became_servant || a community has become a servant of another community
  nolonger_servant || a community has become free of its master community
  became_master || a community has become a master of another community
  nolonger_master || a community is no longer the master of another community
  
  -->
  <customconsts name="default">
	<mCustomVariableList kind="add">
		<i1><a>mHardcodedHistory city_settled enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory city_settled actiontext before_replace_text</a> <b>string</b>
		<c>settled the land and called itself, for the first time,</c></i1>
		<i1><a>mHardcodedHistory city_settled majoradj before_replace_text</a> <b>string</b>
		<c>settlement</c></i1>
		<i1><a>mHardcodedHistory city_settled minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory city_settled impact value</a> <b>int</b> <c>100</c></i1>
		<i1><a>mHardcodedHistory city_settled otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_city_settled</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory rename_player_community enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory rename_player_community actiontext before_replace_text</a> <b>string</b>
		<c>declared that the community once called [0] would now be called a new name: [1].  Today, the community is known as</c></i1>
		<i1><a>mHardcodedHistory rename_player_community majoradj before_replace_text</a> <b>string</b>
		<c>dedication</c></i1>
		<i1><a>mHardcodedHistory rename_player_community minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory rename_player_community impact value</a> <b>int</b> <c>0</c></i1>
		<i1><a>mHardcodedHistory rename_player_community otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_rename_player_community</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory rename_servant_community enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory rename_servant_community actiontext before_replace_text</a> <b>string</b>
		<c>, lording over this community once called [0], declared it would now be called a new name: [1].  Today, the community is now known as</c></i1>
		<i1><a>mHardcodedHistory rename_servant_community majoradj before_replace_text</a> <b>string</b>
		<c>dedication</c></i1>
		<i1><a>mHardcodedHistory rename_servant_community minoradjlist before_replace_text</a> <b>string</b>
		<c>diplomatic</c></i1>
		<i1><a>mHardcodedHistory rename_servant_community impact value</a> <b>int</b> <c>-5</c></i1>
		<i1><a>mHardcodedHistory rename_servant_community otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_rename_servant_community</a> <b>int</b> <c>1</c></i1>
		
		
		<i1><a>mHardcodedHistory building_built enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory building_built actiontext before_replace_text</a> <b>string</b>
		<c>constructed</c></i1>
		<i1><a>mHardcodedHistory building_built majoradj before_replace_text</a> <b>string</b>
		<c>construction</c></i1>
		<i1><a>mHardcodedHistory building_built minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory building_built impact value</a> <b>int</b> <c>100</c></i1>
		<i1><a>mHardcodedHistory building_built otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_building_built</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory building_deleted enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory building_deleted actiontext before_replace_text</a> <b>string</b>
		<c>ordered the deconstruction of</c></i1>
		<i1><a>mHardcodedHistory building_deleted majoradj before_replace_text</a> <b>string</b>
		<c>deconstruction</c></i1>
		<i1><a>mHardcodedHistory building_deleted minoradjlist before_replace_text</a> <b>string</b>
		<c>destruction</c></i1>
		<i1><a>mHardcodedHistory building_deleted impact value</a> <b>int</b> <c>-100</c></i1>
		<i1><a>mHardcodedHistory building_deleted otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_building_deleted</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory building_crumble enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory building_crumble actiontext before_replace_text</a> <b>string</b>
		<c>allowed time and decay to ruin</c></i1>
		<i1><a>mHardcodedHistory building_crumble majoradj before_replace_text</a> <b>string</b>
		<c>decay</c></i1>
		<i1><a>mHardcodedHistory building_crumble minoradjlist before_replace_text</a> <b>string</b>
		<c>destruction</c></i1>
		<i1><a>mHardcodedHistory building_crumble impact value</a> <b>int</b> <c>-100</c></i1>
		<i1><a>mHardcodedHistory building_crumble otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_building_crumble</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory building_destroy enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory building_destroy actiontext before_replace_text</a> <b>string</b>
		<c>with burning anger and force, destroyed</c></i1>
		<i1><a>mHardcodedHistory building_destroy majoradj before_replace_text</a> <b>string</b>
		<c>destruction</c></i1>
		<i1><a>mHardcodedHistory building_destroy minoradjlist before_replace_text</a> <b>string</b>
		<c>violent</c></i1>
		<i1><a>mHardcodedHistory building_destroy impact value</a> <b>int</b> <c>-100</c></i1>
		<i1><a>mHardcodedHistory building_destroy otherImpacts before_replace_text</a> <b>string</b>
		<c>safety|-12</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_building_destroy</a> <b>int</b> <c>1</c></i1>
		
		
		<i1><a>mHardcodedHistory pop_died_violence enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_died_violence actiontext before_replace_text</a> <b>string</b>
		<c>killed</c></i1>
		<i1><a>mHardcodedHistory pop_died_violence majoradj before_replace_text</a> <b>string</b>
		<c>murder</c></i1>
		<i1><a>mHardcodedHistory pop_died_violence minoradjlist before_replace_text</a> <b>string</b>
		<c>violent,death</c></i1>
		<i1><a>mHardcodedHistory pop_died_violence impact value</a> <b>int</b> <c>-100</c></i1>
		<i1><a>mHardcodedHistory pop_died_violence otherImpacts before_replace_text</a> <b>string</b>
		<c>safety|-5</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_died_violence</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_died_wound enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_died_wound actiontext before_replace_text</a> <b>string</b>
		<c>witnessed the death, due to wounds, of</c></i1>
		<i1><a>mHardcodedHistory pop_died_wound majoradj before_replace_text</a> <b>string</b>
		<c>death</c></i1>
		<i1><a>mHardcodedHistory pop_died_wound minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory pop_died_wound impact value</a> <b>int</b> <c>-100</c></i1>
		<i1><a>mHardcodedHistory pop_died_wound otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_died_wound</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_died_illness enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_died_illness actiontext before_replace_text</a> <b>string</b>
		<c>witnessed the death, due to illness, of</c></i1>
		<i1><a>mHardcodedHistory pop_died_illness majoradj before_replace_text</a> <b>string</b>
		<c>death</c></i1>
		<i1><a>mHardcodedHistory pop_died_illness minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory pop_died_illness impact value</a> <b>int</b> <c>-100</c></i1>
		<i1><a>mHardcodedHistory pop_died_illness otherImpacts before_replace_text</a> <b>string</b>
		<c>cleanliness|-5</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_died_illness</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_died_oldage enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_died_oldage actiontext before_replace_text</a> <b>string</b>
		<c>witnessed the natural death, in old age, of</c></i1>
		<i1><a>mHardcodedHistory pop_died_oldage majoradj before_replace_text</a> <b>string</b>
		<c>death</c></i1>
		<i1><a>mHardcodedHistory pop_died_oldage minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory pop_died_oldage impact value</a> <b>int</b> <c>-100</c></i1>
		<i1><a>mHardcodedHistory pop_died_oldage otherImpacts before_replace_text</a> <b>string</b>
		<c>civic_trust|5</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_died_oldage</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_died_unspecified enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_died_unspecified actiontext before_replace_text</a> <b>string</b>
		<c>is inhabited no longer by</c></i1>
		<i1><a>mHardcodedHistory pop_died_unspecified majoradj before_replace_text</a> <b>string</b>
		<c>death</c></i1>
		<i1><a>mHardcodedHistory pop_died_unspecified minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory pop_died_unspecified impact value</a> <b>int</b> <c>-100</c></i1>
		<i1><a>mHardcodedHistory pop_died_unspecified otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_died_unspecified</a> <b>int</b> <c>1</c></i1>
		
		
		<i1><a>mHardcodedHistory pop_wound_workplace enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_wound_workplace actiontext before_replace_text</a> <b>string</b>
		<c>ordered work to be done, which injured</c></i1>
		<i1><a>mHardcodedHistory pop_wound_workplace majoradj before_replace_text</a> <b>string</b>
		<c>wound</c></i1>
		<i1><a>mHardcodedHistory pop_wound_workplace minoradjlist before_replace_text</a> <b>string</b>
		<c>workplace</c></i1>
		<i1><a>mHardcodedHistory pop_wound_workplace impact value</a> <b>int</b> <c>-50</c></i1>
		<i1><a>mHardcodedHistory pop_wound_workplace otherImpacts before_replace_text</a> <b>string</b>
		<c>work_happiness|-6</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_wound_workplace</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_wound_exposure enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_wound_exposure actiontext before_replace_text</a> <b>string</b>
		<c>noticed that exposure to the elements caused a wound to</c></i1>
		<i1><a>mHardcodedHistory pop_wound_exposure majoradj before_replace_text</a> <b>string</b>
		<c>wound</c></i1>
		<i1><a>mHardcodedHistory pop_wound_exposure minoradjlist before_replace_text</a> <b>string</b>
		<c>weather</c></i1>
		<i1><a>mHardcodedHistory pop_wound_exposure impact value</a> <b>int</b> <c>-50</c></i1>
		<i1><a>mHardcodedHistory pop_wound_exposure otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_wound_exposure</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_wound_combat enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_wound_combat actiontext before_replace_text</a> <b>string</b>
		<c>caused a combat injury to</c></i1>
		<i1><a>mHardcodedHistory pop_wound_combat majoradj before_replace_text</a> <b>string</b>
		<c>wound</c></i1>
		<i1><a>mHardcodedHistory pop_wound_combat minoradjlist before_replace_text</a> <b>string</b>
		<c>combat</c></i1>
		<i1><a>mHardcodedHistory pop_wound_combat impact value</a> <b>int</b> <c>-50</c></i1>
		<i1><a>mHardcodedHistory pop_wound_combat otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_wound_combat</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_wound_illness enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_wound_illness actiontext before_replace_text</a> <b>string</b>
		<c>saw that illness caused a harmful wound to</c></i1>
		<i1><a>mHardcodedHistory pop_wound_illness majoradj before_replace_text</a> <b>string</b>
		<c>wound</c></i1>
		<i1><a>mHardcodedHistory pop_wound_illness minoradjlist before_replace_text</a> <b>string</b>
		<c>illness</c></i1>
		<i1><a>mHardcodedHistory pop_wound_illness impact value</a> <b>int</b> <c>-50</c></i1>
		<i1><a>mHardcodedHistory pop_wound_illness otherImpacts before_replace_text</a> <b>string</b>
		<c>cleanliness|-5</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_wound_illness</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_wound_unspecified enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_wound_unspecified actiontext before_replace_text</a> <b>string</b>
		<c>discovered a wound on</c></i1>
		<i1><a>mHardcodedHistory pop_wound_unspecified majoradj before_replace_text</a> <b>string</b>
		<c>wound</c></i1>
		<i1><a>mHardcodedHistory pop_wound_unspecified minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory pop_wound_unspecified impact value</a> <b>int</b> <c>-100</c></i1>
		<i1><a>mHardcodedHistory pop_wound_unspecified otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_wound_unspecified</a> <b>int</b> <c>1</c></i1>
		
		
		<i1><a>mHardcodedHistory pop_illness_environment enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_illness_environment actiontext before_replace_text</a> <b>string</b>
		<c>brought outside sickness to</c></i1>
		<i1><a>mHardcodedHistory pop_illness_environment majoradj before_replace_text</a> <b>string</b>
		<c>illness</c></i1>
		<i1><a>mHardcodedHistory pop_illness_environment minoradjlist before_replace_text</a> <b>string</b>
		<c>natural</c></i1>
		<i1><a>mHardcodedHistory pop_illness_environment impact value</a> <b>int</b> <c>-30</c></i1>
		<i1><a>mHardcodedHistory pop_illness_environment otherImpacts before_replace_text</a> <b>string</b>
		<c>cleanliness|-5</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_illness_environment</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_illness_another enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_illness_another actiontext before_replace_text</a> <b>string</b>
		<c>spread their disease to</c></i1>
		<i1><a>mHardcodedHistory pop_illness_another majoradj before_replace_text</a> <b>string</b>
		<c>illness</c></i1>
		<i1><a>mHardcodedHistory pop_illness_another minoradjlist before_replace_text</a> <b>string</b>
		<c>contagious</c></i1>
		<i1><a>mHardcodedHistory pop_illness_another impact value</a> <b>int</b> <c>-30</c></i1>
		<i1><a>mHardcodedHistory pop_illness_another otherImpacts before_replace_text</a> <b>string</b>
		<c>cleanliness|-5,civic_trust|-2</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_illness_another</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_illness_unspecified enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_illness_unspecified actiontext before_replace_text</a> <b>string</b>
		<c>brought sickness to</c></i1>
		<i1><a>mHardcodedHistory pop_illness_unspecified majoradj before_replace_text</a> <b>string</b>
		<c>illness</c></i1>
		<i1><a>mHardcodedHistory pop_illness_unspecified minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory pop_illness_unspecified impact value</a> <b>int</b> <c>-30</c></i1>
		<i1><a>mHardcodedHistory pop_illness_unspecified otherImpacts before_replace_text</a> <b>string</b>
		<c>cleanliness|-5</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_illness_unspecified</a> <b>int</b> <c>1</c></i1>
		
		
		<i1><a>mHardcodedHistory child_born_dead enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory child_born_dead actiontext before_replace_text</a> <b>string</b>
		<c>gave birth to the stillborn</c></i1>
		<i1><a>mHardcodedHistory child_born_dead majoradj before_replace_text</a> <b>string</b>
		<c>birth</c></i1>
		<i1><a>mHardcodedHistory child_born_dead minoradjlist before_replace_text</a> <b>string</b>
		<c>stillborn,death</c></i1>
		<i1><a>mHardcodedHistory child_born_dead impact value</a> <b>int</b> <c>-100</c></i1>
		<i1><a>mHardcodedHistory child_born_dead otherImpacts before_replace_text</a> <b>string</b>
		<c>cleanliness|-1</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_child_born_dead</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory child_born_alive enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory child_born_alive actiontext before_replace_text</a> <b>string</b>
		<c>gave birth to the healthy</c></i1>
		<i1><a>mHardcodedHistory child_born_alive majoradj before_replace_text</a> <b>string</b>
		<c>birth</c></i1>
		<i1><a>mHardcodedHistory child_born_alive minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory child_born_alive impact value</a> <b>int</b> <c>100</c></i1>
		<i1><a>mHardcodedHistory child_born_alive otherImpacts before_replace_text</a> <b>string</b>
		<c>cleanliness|-1,population_increase|1</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_child_born_alive</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory created_child_together enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory created_child_together actiontext before_replace_text</a> <b>string</b>
		<c>made pregnant</c></i1>
		<i1><a>mHardcodedHistory created_child_together majoradj before_replace_text</a> <b>string</b>
		<c>pregnancy</c></i1>
		<i1><a>mHardcodedHistory created_child_together minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory created_child_together impact value</a> <b>int</b> <c>30</c></i1>
		<i1><a>mHardcodedHistory created_child_together otherImpacts before_replace_text</a> <b>string</b>
		<c>civic_trust|2</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_created_child_together</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory created_child_alone enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory created_child_alone actiontext before_replace_text</a> <b>string</b>
		<c>saw fit to grant a child in a fatherless way to</c></i1>
		<i1><a>mHardcodedHistory created_child_alone majoradj before_replace_text</a> <b>string</b>
		<c>pregnancy</c></i1>
		<i1><a>mHardcodedHistory created_child_alone minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory created_child_alone impact value</a> <b>int</b> <c>30</c></i1>
		<i1><a>mHardcodedHistory created_child_alone otherImpacts before_replace_text</a> <b>string</b>
		<c>lady_worship|2</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_created_child_alone</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory lady_raised_child enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory lady_raised_child actiontext before_replace_text</a> <b>string</b>
		<c>whisked away at midnight as a babe, then raised and returned as an adult,</c></i1>
		<i1><a>mHardcodedHistory lady_raised_child majoradj before_replace_text</a> <b>string</b>
		<c>divine</c></i1>
		<i1><a>mHardcodedHistory lady_raised_child minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory lady_raised_child impact value</a> <b>int</b> <c>50</c></i1>
		<i1><a>mHardcodedHistory lady_raised_child otherImpacts before_replace_text</a> <b>string</b>
		<c>lady_worship|1</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_lady_raised_child</a> <b>int</b> <c>1</c></i1>
		
		
		<i1><a>mHardcodedHistory pop_sent_on_delegation enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_sent_on_delegation actiontext before_replace_text</a> <b>string</b>
		<c>ordered to a delegation</c></i1>
		<i1><a>mHardcodedHistory pop_sent_on_delegation majoradj before_replace_text</a> <b>string</b>
		<c>delegation</c></i1>
		<i1><a>mHardcodedHistory pop_sent_on_delegation minoradjlist before_replace_text</a> <b>string</b>
		<c>travel</c></i1>
		<i1><a>mHardcodedHistory pop_sent_on_delegation impact value</a> <b>int</b> <c>0</c></i1>
		<i1><a>mHardcodedHistory pop_sent_on_delegation otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_sent_on_delegation</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory delegation_started enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory delegation_started actiontext before_replace_text</a> <b>string</b>
		<c>assembled</c></i1>
		<i1><a>mHardcodedHistory delegation_started majoradj before_replace_text</a> <b>string</b>
		<c>delegation</c></i1>
		<i1><a>mHardcodedHistory delegation_started minoradjlist before_replace_text</a> <b>string</b>
		<c>organized,[0]</c></i1>
		<i1><a>mHardcodedHistory delegation_started impact value</a> <b>int</b> <c>100</c></i1>
		<i1><a>mHardcodedHistory delegation_started otherImpacts before_replace_text</a> <b>string</b>
		<c>wanderer_notice|3</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_delegation_started</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory delegation_arrived_at_community enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory delegation_arrived_at_community actiontext before_replace_text</a> <b>string</b>
		<c>saw the arrival of</c></i1>
		<i1><a>mHardcodedHistory delegation_arrived_at_community majoradj before_replace_text</a> <b>string</b>
		<c>delegation</c></i1>
		<i1><a>mHardcodedHistory delegation_arrived_at_community minoradjlist before_replace_text</a> <b>string</b>
		<c>delegation arrival,[0]</c></i1> <!-- TODO this is not being found for some reason??? -->
		<i1><a>mHardcodedHistory delegation_arrived_at_community impact value</a> <b>int</b> <c>0</c></i1>
		<i1><a>mHardcodedHistory delegation_arrived_at_community otherImpacts before_replace_text</a> <b>string</b>
		<c>wanderer_notice|3</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_delegation_arrived_at_community</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory delegation_returned enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory delegation_returned actiontext before_replace_text</a> <b>string</b>
		<c>greeted home the returning</c></i1>
		<i1><a>mHardcodedHistory delegation_returned majoradj before_replace_text</a> <b>string</b>
		<c>delegation</c></i1>
		<i1><a>mHardcodedHistory delegation_returned minoradjlist before_replace_text</a> <b>string</b>
		<c>[0]</c></i1>
		<i1><a>mHardcodedHistory delegation_returned impact value</a> <b>int</b> <c>50</c></i1>
		<i1><a>mHardcodedHistory delegation_returned otherImpacts before_replace_text</a> <b>string</b>
		<c>wanderer_notice|5</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_delegation_returned</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory delegation_lost enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory delegation_lost actiontext before_replace_text</a> <b>string</b>
		<c>assumed a total loss of the pops and resources in</c></i1>
		<i1><a>mHardcodedHistory delegation_lost majoradj before_replace_text</a> <b>string</b>
		<c>delegation</c></i1>
		<i1><a>mHardcodedHistory delegation_lost minoradjlist before_replace_text</a> <b>string</b>
		<c>loss,[0]</c></i1>
		<i1><a>mHardcodedHistory delegation_lost impact value</a> <b>int</b> <c>-100</c></i1>
		<i1><a>mHardcodedHistory delegation_lost otherImpacts before_replace_text</a> <b>string</b>
		<c>wanderer_notice|-1</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_delegation_returned</a> <b>int</b> <c>1</c></i1>
		
		
		<i1><a>mHardcodedHistory playerdelegation_violent_nocombat_leave enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_violent_nocombat_leave actiontext before_replace_text</a> <b>string</b>
		<c>jeered and watched the retreat of</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_violent_nocombat_leave majoradj before_replace_text</a> <b>string</b>
		<c>siege</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_violent_nocombat_leave minoradjlist before_replace_text</a> <b>string</b>
		<c>cowardly</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_violent_nocombat_leave impact value</a> <b>int</b> <c>5</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_violent_nocombat_leave otherImpacts before_replace_text</a> <b>string</b>
		<c>civic_trust|-4</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_playerdelegation_violent_nocombat_leave</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory playerdelegation_violent_siege_end enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_violent_siege_end actiontext before_replace_text</a> <b>string</b>
		<c>[0]</c></i1> <!-- TODO custom scripts assemble this text alongside the ending siege summary -->
		<i1><a>mHardcodedHistory playerdelegation_violent_siege_end majoradj before_replace_text</a> <b>string</b>
		<c>siege</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_violent_siege_end minoradjlist before_replace_text</a> <b>string</b>
		<c>violent</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_violent_siege_end impact value</a> <b>int</b> <c>-40</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_violent_siege_end otherImpacts before_replace_text</a> <b>string</b>
		<c>civic_trust|5</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_playerdelegation_violent_siege_end</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory playerdelegation_diplomacy_gift enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_diplomacy_gift actiontext before_replace_text</a> <b>string</b>
		<c>gave a gift, via a diplomatic delegation, to</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_diplomacy_gift majoradj before_replace_text</a> <b>string</b>
		<c>diplomatic</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_diplomacy_gift minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory playerdelegation_diplomacy_gift impact value</a> <b>int</b> <c>14</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_diplomacy_gift otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_playerdelegation_diplomacy_gift</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory playerdelegation_diplomacy_leave enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_diplomacy_leave actiontext before_replace_text</a> <b>string</b>
		<c>ordered a diplomatic delegation to give no gift to</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_diplomacy_leave majoradj before_replace_text</a> <b>string</b>
		<c>diplomatic</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_diplomacy_leave minoradjlist before_replace_text</a> <b>string</b>
		<c>insulting</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_diplomacy_leave impact value</a> <b>int</b> <c>-2</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_diplomacy_leave otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_playerdelegation_diplomacy_leave</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory playerdelegation_trade_success enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_trade_success actiontext before_replace_text</a> <b>string</b>
		<c>negotiated a trade of goods with</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_trade_success majoradj before_replace_text</a> <b>string</b>
		<c>trade</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_trade_success minoradjlist before_replace_text</a> <b>string</b>
		<c>diplomatic</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_trade_success impact value</a> <b>int</b> <c>6</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_trade_success otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_playerdelegation_trade_success</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory playerdelegation_trade_failure enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_trade_failure actiontext before_replace_text</a> <b>string</b>
		<c>could not come to terms for a trade of goods with</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_trade_failure majoradj before_replace_text</a> <b>string</b>
		<c>trade</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_trade_failure minoradjlist before_replace_text</a> <b>string</b>
		<c>diplomatic</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_trade_failure impact value</a> <b>int</b> <c>-3</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_trade_failure otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_playerdelegation_trade_failure</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory playerdelegation_trade_leave enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_trade_leave actiontext before_replace_text</a> <b>string</b>
		<c>ordered a trade delegation to leave without bothering to negotiate with</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_trade_leave majoradj before_replace_text</a> <b>string</b>
		<c>trade</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_trade_leave minoradjlist before_replace_text</a> <b>string</b>
		<c>diplomatic</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_trade_leave impact value</a> <b>int</b> <c>-4</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_trade_leave otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_playerdelegation_trade_leave</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory playerdelegation_emigration_join enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_emigration_join actiontext before_replace_text</a> <b>string</b>
		<c>cast out unwanted pops, who were able to settle in</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_emigration_join majoradj before_replace_text</a> <b>string</b>
		<c>emigration</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_emigration_join minoradjlist before_replace_text</a> <b>string</b>
		<c>diplomatic</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_emigration_join impact value</a> <b>int</b> <c>-10</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_emigration_join otherImpacts before_replace_text</a> <b>string</b>
		<c>civic_trust|-5</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_playerdelegation_emigration_join</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory playerdelegation_emigration_wander enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_emigration_wander actiontext before_replace_text</a> <b>string</b>
		<c>cast out unwanted pops, who were also rejected by</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_emigration_wander majoradj before_replace_text</a> <b>string</b>
		<c>emigration</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_emigration_wander minoradjlist before_replace_text</a> <b>string</b>
		<c>diplomatic</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_emigration_wander impact value</a> <b>int</b> <c>-4</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_emigration_wander otherImpacts before_replace_text</a> <b>string</b>
		<c>wanderer_notice|4</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_playerdelegation_emigration_wander</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory playerdelegation_emigration_return enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_emigration_return actiontext before_replace_text</a> <b>string</b>
		<c>tried to exile pops to the unwanting</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_emigration_return majoradj before_replace_text</a> <b>string</b>
		<c>emigration</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_emigration_return minoradjlist before_replace_text</a> <b>string</b>
		<c>diplomatic</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_emigration_return impact value</a> <b>int</b> <c>-4</c></i1>
		<i1><a>mHardcodedHistory playerdelegation_emigration_return otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_playerdelegation_emigration_return</a> <b>int</b> <c>1</c></i1>
		
		
		<i1><a>mHardcodedHistory pop_change_loyaltyloss enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_change_loyaltyloss actiontext before_replace_text</a> <b>string</b>
		<c>has lost the loyalty of</c></i1>
		<i1><a>mHardcodedHistory pop_change_loyaltyloss majoradj before_replace_text</a> <b>string</b>
		<c>loyalty</c></i1>
		<i1><a>mHardcodedHistory pop_change_loyaltyloss minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory pop_change_loyaltyloss impact value</a> <b>int</b> <c>-3</c></i1>
		<i1><a>mHardcodedHistory pop_change_loyaltyloss otherImpacts before_replace_text</a> <b>string</b>
		<c>population_increase|-1</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_change_loyaltyloss</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_change_loyaltygain enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_change_loyaltygain actiontext before_replace_text</a> <b>string</b>
		<c>has gained the loyalty of</c></i1>
		<i1><a>mHardcodedHistory pop_change_loyaltygain majoradj before_replace_text</a> <b>string</b>
		<c>loyalty</c></i1>
		<i1><a>mHardcodedHistory pop_change_loyaltygain minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory pop_change_loyaltygain impact value</a> <b>int</b> <c>3</c></i1>
		<i1><a>mHardcodedHistory pop_change_loyaltygain otherImpacts before_replace_text</a> <b>string</b>
		<c>population_increase|1</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_change_loyaltygain</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_abducted enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_abducted actiontext before_replace_text</a> <b>string</b>
		<c>had warriors abduct, and bring home by force,</c></i1>
		<i1><a>mHardcodedHistory pop_abducted majoradj before_replace_text</a> <b>string</b>
		<c>abduction</c></i1>
		<i1><a>mHardcodedHistory pop_abducted minoradjlist before_replace_text</a> <b>string</b>
		<c>violence,theft</c></i1>
		<i1><a>mHardcodedHistory pop_abducted impact value</a> <b>int</b> <c>-50</c></i1>
		<i1><a>mHardcodedHistory pop_abducted otherImpacts before_replace_text</a> <b>string</b>
		<c>population_increase|1</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_abducted</a> <b>int</b> <c>1</c></i1>
		
		
		<i1><a>mHardcodedHistory pop_became_city_leader enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_became_city_leader actiontext before_replace_text</a> <b>string</b>
		<c>granted the position of City Leader to</c></i1>
		<i1><a>mHardcodedHistory pop_became_city_leader majoradj before_replace_text</a> <b>string</b>
		<c>leader</c></i1>
		<i1><a>mHardcodedHistory pop_became_city_leader minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory pop_became_city_leader impact value</a> <b>int</b> <c>75</c></i1>
		<i1><a>mHardcodedHistory pop_became_city_leader otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_became_city_leader</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_nolonger_city_leader enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_nolonger_city_leader actiontext before_replace_text</a> <b>string</b>
		<c>revoked the position of City Leader from</c></i1>
		<i1><a>mHardcodedHistory pop_nolonger_city_leader majoradj before_replace_text</a> <b>string</b>
		<c>leader</c></i1>
		<i1><a>mHardcodedHistory pop_nolonger_city_leader minoradjlist before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>mHardcodedHistory pop_nolonger_city_leader impact value</a> <b>int</b> <c>-75</c></i1>
		<i1><a>mHardcodedHistory pop_nolonger_city_leader otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_nolonger_city_leader</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_became_race_leader enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_became_race_leader actiontext before_replace_text</a> <b>string</b>
		<c>granted the position of Race Leader to</c></i1>
		<i1><a>mHardcodedHistory pop_became_race_leader majoradj before_replace_text</a> <b>string</b>
		<c>leader</c></i1>
		<i1><a>mHardcodedHistory pop_became_race_leader minoradjlist before_replace_text</a> <b>string</b>
		<c>race,[0]</c></i1>
		<i1><a>mHardcodedHistory pop_became_race_leader impact value</a> <b>int</b> <c>60</c></i1>
		<i1><a>mHardcodedHistory pop_became_race_leader otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_became_race_leader</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_nolonger_race_leader enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_nolonger_race_leader actiontext before_replace_text</a> <b>string</b>
		<c>revoked the position of Race Leader from</c></i1>
		<i1><a>mHardcodedHistory pop_nolonger_race_leader majoradj before_replace_text</a> <b>string</b>
		<c>leader</c></i1>
		<i1><a>mHardcodedHistory pop_nolonger_race_leader minoradjlist before_replace_text</a> <b>string</b>
		<c>race,[0]</c></i1>
		<i1><a>mHardcodedHistory pop_nolonger_race_leader impact value</a> <b>int</b> <c>-60</c></i1>
		<i1><a>mHardcodedHistory pop_nolonger_race_leader otherImpacts before_replace_text</a> <b>string</b>
		<c></c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_nolonger_race_leader</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_became_industry_leader enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_became_industry_leader actiontext before_replace_text</a> <b>string</b>
		<c>granted the position of Industry Leader to</c></i1>
		<i1><a>mHardcodedHistory pop_became_industry_leader majoradj before_replace_text</a> <b>string</b>
		<c>leader</c></i1>
		<i1><a>mHardcodedHistory pop_became_industry_leader minoradjlist before_replace_text</a> <b>string</b>
		<c>[0]</c></i1>
		<i1><a>mHardcodedHistory pop_became_industry_leader impact value</a> <b>int</b> <c>45</c></i1>
		<i1><a>mHardcodedHistory pop_became_industry_leader otherImpacts before_replace_text</a> <b>string</b>
		<c>work_happiness|1</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_became_industry_leader</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory pop_nolonger_industry_leader enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory pop_nolonger_industry_leader actiontext before_replace_text</a> <b>string</b>
		<c>revoked the position of Industry Leader from</c></i1>
		<i1><a>mHardcodedHistory pop_nolonger_industry_leader majoradj before_replace_text</a> <b>string</b>
		<c>leader</c></i1>
		<i1><a>mHardcodedHistory pop_nolonger_industry_leader minoradjlist before_replace_text</a> <b>string</b>
		<c>[0]</c></i1>
		<i1><a>mHardcodedHistory pop_nolonger_industry_leader impact value</a> <b>int</b> <c>-45</c></i1>
		<i1><a>mHardcodedHistory pop_nolonger_industry_leader otherImpacts before_replace_text</a> <b>string</b>
		<c>work_happiness|-1</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_pop_nolonger_industry_leader</a> <b>int</b> <c>1</c></i1>
		
		
		<i1><a>mHardcodedHistory rebels_succeed enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory rebels_succeed actiontext before_replace_text</a> <b>string</b>
		<c>celebrated the glorious victory of rebel</c></i1>
		<i1><a>mHardcodedHistory rebels_succeed majoradj before_replace_text</a> <b>string</b>
		<c>rebel</c></i1>
		<i1><a>mHardcodedHistory rebels_succeed minoradjlist before_replace_text</a> <b>string</b>
		<c>violent,strife</c></i1>
		<i1><a>mHardcodedHistory rebels_succeed impact value</a> <b>int</b> <c>35</c></i1>
		<i1><a>mHardcodedHistory rebels_succeed otherImpacts before_replace_text</a> <b>string</b>
		<c>civic_trust|-5</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_rebels_succeed</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory rebels_failure enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory rebels_failure actiontext before_replace_text</a> <b>string</b>
		<c>defeated the dishonorable and cowardly rebel</c></i1>
		<i1><a>mHardcodedHistory rebels_failure majoradj before_replace_text</a> <b>string</b>
		<c>rebel</c></i1>
		<i1><a>mHardcodedHistory rebels_failure minoradjlist before_replace_text</a> <b>string</b>
		<c>violent,strife</c></i1>
		<i1><a>mHardcodedHistory rebels_failure impact value</a> <b>int</b> <c>35</c></i1>
		<i1><a>mHardcodedHistory rebels_failure otherImpacts before_replace_text</a> <b>string</b>
		<c>civic_trust|5</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_rebels_failure</a> <b>int</b> <c>1</c></i1>
		
		
		<!-- these two are held by the servant community -->
		<i1><a>mHardcodedHistory became_servant enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory became_servant actiontext before_replace_text</a> <b>string</b>
		<c>made a servant community of</c></i1>
		<i1><a>mHardcodedHistory became_servant majoradj before_replace_text</a> <b>string</b>
		<c>conquest</c></i1>
		<i1><a>mHardcodedHistory became_servant minoradjlist before_replace_text</a> <b>string</b>
		<c>diplomatic</c></i1>
		<i1><a>mHardcodedHistory became_servant impact value</a> <b>int</b> <c>-50</c></i1>
		<i1><a>mHardcodedHistory became_servant otherImpacts before_replace_text</a> <b>string</b>
		<c>civic_trust|-10</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_became_servant</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory nolonger_servant enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory nolonger_servant actiontext before_replace_text</a> <b>string</b>
		<c>lost the bonds of servitude over</c></i1>
		<i1><a>mHardcodedHistory nolonger_servant majoradj before_replace_text</a> <b>string</b>
		<c>conquest</c></i1>
		<i1><a>mHardcodedHistory nolonger_servant minoradjlist before_replace_text</a> <b>string</b>
		<c>diplomatic</c></i1>
		<i1><a>mHardcodedHistory nolonger_servant impact value</a> <b>int</b> <c>35</c></i1>
		<i1><a>mHardcodedHistory nolonger_servant otherImpacts before_replace_text</a> <b>string</b>
		<c>civic_trust|15</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_nolonger_servant</a> <b>int</b> <c>1</c></i1>
		
		<!-- these two are held by the master community -->
		<i1><a>mHardcodedHistory became_master enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory became_master actiontext before_replace_text</a> <b>string</b>
		<c>recognized the mastery and guidance of</c></i1>
		<i1><a>mHardcodedHistory became_master majoradj before_replace_text</a> <b>string</b>
		<c>conquest</c></i1>
		<i1><a>mHardcodedHistory became_master minoradjlist before_replace_text</a> <b>string</b>
		<c>diplomatic</c></i1>
		<i1><a>mHardcodedHistory became_master impact value</a> <b>int</b> <c>40</c></i1>
		<i1><a>mHardcodedHistory became_master otherImpacts before_replace_text</a> <b>string</b>
		<c>civic_trust|15</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_became_master</a> <b>int</b> <c>1</c></i1>
		
		<i1><a>mHardcodedHistory nolonger_master enable_if_not_zero</a> <b>int</b> <c>1</c></i1>
		<i1><a>mHardcodedHistory nolonger_master actiontext before_replace_text</a> <b>string</b>
		<c>betrayed the oaths of loyalty once pledged to</c></i1>
		<i1><a>mHardcodedHistory nolonger_master majoradj before_replace_text</a> <b>string</b>
		<c>conquest</c></i1>
		<i1><a>mHardcodedHistory nolonger_master minoradjlist before_replace_text</a> <b>string</b>
		<c>diplomatic</c></i1>
		<i1><a>mHardcodedHistory nolonger_master impact value</a> <b>int</b> <c>-50</c></i1>
		<i1><a>mHardcodedHistory nolonger_master otherImpacts before_replace_text</a> <b>string</b>
		<c>civic_trust|-15</c></i1>
		<i1><a>log_script_custom script hardcodedHistory_nolonger_master</a> <b>int</b> <c>1</c></i1>
		
	</mCustomVariableList>
  </customconsts>
  
  <!-- this file holds the implementation of a script (and consts and sub-scripts) which handle(s) hard-coded history occurrences -->
  <gamescripts name="default">
	<!-- history script has two input arguments: string inHistoryIdentifier, List<object> inDetails
		inDetailsToReplace will hold all the following, in order:
		IFCommunity inCommunityToHoldHistory
		Int64 inDate, IFHistoryActor.eActorKind inActorKind, UInt64 inActorID,
		IFHistoryTarget.eTargetKind inTargetKind, UInt64 inTargetID,
		Int64 inImpactOverride //this can be provided by other custom scripts sometimes
		-->
	<!-- there are no outputs. -->
	<!-- the other parts of the historical event will be provided by subscripts and their access to custom consts (which are translatable) -->
	<!-- this script is called whenever the C# code has encountered something which I, the dev, think should possibly be told to the player and stored as history that other scripts (events, etc.) can "remember".  This script and the consts exist because players and modders might disagree and want to customize their historical events -->
	<mHardcodedHistory>
	//input count check:
	if (inArguments.Length &lt; 2)
	{
		return null;
	}
	
	string inHistoryIdentifier = (string)inArguments[0];
	List&lt;object&gt; inDetails = (List&lt;object&gt;)inArguments[1];
	
	var customScripts = getAPI().getCustomScripts();
	if(!customScripts.runCustomScript("hardcodedHistory_" + inHistoryIdentifier.ToLower(), inDetails, out _))
	{
		addDebugMessage(inScriptInstance, "failed to run (or possibly find) history subscript with name " + "hardcodedHistory_" + inHistoryIdentifier.ToLower());
	}
	
	return null;
    </mHardcodedHistory>
  </gamescripts>
  
  <customscripts name="default">
	<mCustomScriptsList kind="add">
	<!-- hardcodedHistory_city_settled has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle city_settled history occurrences -->
	<i1><a>hardcodedHistory_city_settled</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_city_settled custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_city_settled");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory city_settled enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory city_settled actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory city_settled majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory city_settled minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory city_settled impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory city_settled otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_rename_player_community has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle city_settled history occurrences -->
	<i1><a>hardcodedHistory_rename_player_community</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_rename_player_community custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_rename_player_community");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory rename_player_community enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory rename_player_community actiontext before_replace_text", out success);
		if(!success) actionText = "";
		actionText = actionText.Replace("[0]", inCommunityToHoldHistory.getDisplayName());
		actionText = actionText.Replace("[1]", getAPI().getNewNameOfCommunityBeingChangedRightNow());
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory rename_player_community majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory rename_player_community minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory rename_player_community impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory rename_player_community otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_rename_servant_community has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle city_settled history occurrences -->
	<i1><a>hardcodedHistory_rename_servant_community</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_rename_servant_community custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_rename_servant_community");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory rename_servant_community enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory rename_servant_community actiontext before_replace_text", out success);
		if(!success) actionText = "";
		actionText = actionText.Replace("[0]", inCommunityToHoldHistory.getDisplayName());
		actionText = actionText.Replace("[1]", getAPI().getNewNameOfCommunityBeingChangedRightNow());
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory rename_servant_community majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory rename_servant_community minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory rename_servant_community impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory rename_servant_community otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_building_built has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle building_built history occurrences -->
	<i1><a>hardcodedHistory_building_built</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_building_built custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_building_built");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory building_built enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory building_built actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory building_built majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory building_built minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory building_built impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory building_built otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_building_deleted has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle building_deleted history occurrences -->
	<i1><a>hardcodedHistory_building_deleted</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_building_deleted custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_building_deleted");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory building_deleted enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory building_deleted actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory building_deleted majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory building_deleted minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory building_deleted impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory building_deleted otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_building_crumble has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle building_crumble history occurrences -->
	<i1><a>hardcodedHistory_building_crumble</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_building_crumble custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_building_crumble");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory building_crumble enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory building_crumble actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory building_crumble majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory building_crumble minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory building_crumble impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory building_crumble otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_building_destroy has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle building_destroy history occurrences -->
	<i1><a>hardcodedHistory_building_destroy</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_building_destroy custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_building_destroy");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory building_destroy enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory building_destroy actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory building_destroy majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory building_destroy minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory building_destroy impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory building_destroy otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_died_record is a custom script which records some of the pop's qualities at time of death.  It has no outputs. -->
	<!-- this script is called by other hardcoded history scripts relating to pop deaths.  The variables stored by this script are accessed by the mPopDeletionDelay script and may be checked in other scripts as well -->
	<i1><a>hardcodedHistory_pop_died_record</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(UInt64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_died_record custom script received invalid arguments");
		  return null;
	  }
	  
	  UInt64 inActorID = (UInt64)inArguments[0];
	  
	  var consts = getAPI().getConsts();
	  
	  IFPop pop = (IFPop)getAPI().getSO("pops", inActorID);
	  if(pop != null)
	  {
		var variableHandler = getAPI().getVariableHandler();
		
		IFLeaderCollection leaders = pop.getCommunity().getLeaderCollection();
		Int64 currentDate = getAPI().getCalendar().getCurrentDate();
		if(leaders.getCityLeader() == pop)
		{
			variableHandler.storeIntVariable(currentDate + 1 + consts.getPopKeepAfterDeadDaysGeneral(), "popDeathRecord_wasCityLeader_pop" + pop.getUID(), 1L);
		}
		if(leaders.getRaceLeader(pop.getRace()) == pop)
		{
			variableHandler.storeIntVariable(currentDate + 1 + consts.getPopKeepAfterDeadDaysGeneral(), "popDeathRecord_wasRaceLeader_pop" + pop.getUID(), 1L);
		}
		if(leaders.getIndustryLeaders().Contains(pop))
		{
			variableHandler.storeIntVariable(currentDate + 1 + consts.getPopKeepAfterDeadDaysGeneral(), "popDeathRecord_wasIndustryLeader_pop" + pop.getUID(), 1L);
			variableHandler.storeIntVariable(currentDate + 1 + consts.getPopKeepAfterDeadDaysGeneral(), "popDeathRecord_industryMOIDLedByPop_pop" + pop.getUID(), 
				leaders.getIndustryLedByPop(pop).getUID());
		}
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_died_violence has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_died_violence history occurrences -->
	<i1><a>hardcodedHistory_pop_died_violence</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_died_violence custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_died_violence");
	  }
	  
	  //call the common pop_died_record script:
	  customScripts.runCustomScript("hardcodedHistory_pop_died_record", new List&lt;object&gt;() { inTargetID }, out _);
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_died_violence enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_died_violence actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_died_violence majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_died_violence minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_died_violence impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_died_violence otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_died_wound has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_died_wound history occurrences -->
	<i1><a>hardcodedHistory_pop_died_wound</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_died_wound custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_died_wound");
	  }
	  
	  //call the common pop_died_record script:
	  customScripts.runCustomScript("hardcodedHistory_pop_died_record", new List&lt;object&gt;() { inTargetID }, out _);
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_died_wound enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_died_wound actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_died_wound majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_died_wound minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_died_wound impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_died_wound otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_died_illness has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_died_illness history occurrences -->
	<i1><a>hardcodedHistory_pop_died_illness</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_died_illness custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_died_illness");
	  }
	  
	  //call the common pop_died_record script:
	  customScripts.runCustomScript("hardcodedHistory_pop_died_record", new List&lt;object&gt;() { inTargetID }, out _);
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_died_illness enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_died_illness actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_died_illness majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_died_illness minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_died_illness impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_died_illness otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_died_oldage has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_died_oldage history occurrences -->
	<i1><a>hardcodedHistory_pop_died_oldage</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_died_oldage custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_died_oldage");
	  }
	  
	  //call the common pop_died_record script:
	  customScripts.runCustomScript("hardcodedHistory_pop_died_record", new List&lt;object&gt;() { inTargetID }, out _);
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_died_oldage enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_died_oldage actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_died_oldage majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_died_oldage minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_died_oldage impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_died_oldage otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_died_unspecified has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_died_unspecified history occurrences -->
	<i1><a>hardcodedHistory_pop_died_unspecified</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_died_unspecified custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_died_unspecified");
	  }
	  
	  //call the common pop_died_record script:
	  customScripts.runCustomScript("hardcodedHistory_pop_died_record", new List&lt;object&gt;() { inTargetID }, out _);
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_died_unspecified enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_died_unspecified actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_died_unspecified majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_died_unspecified minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_died_unspecified impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_died_unspecified otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_wound_workplace has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_wound_workplace history occurrences -->
	<i1><a>hardcodedHistory_pop_wound_workplace</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_wound_workplace custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_wound_workplace");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_wound_workplace enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_wound_workplace actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_wound_workplace majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_wound_workplace minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_wound_workplace impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_wound_workplace otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_wound_exposure has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_wound_exposure history occurrences -->
	<i1><a>hardcodedHistory_pop_wound_exposure</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_wound_exposure custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_wound_exposure");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_wound_exposure enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_wound_exposure actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_wound_exposure majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_wound_exposure minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_wound_exposure impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_wound_exposure otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_wound_combat has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_wound_combat history occurrences -->
	<i1><a>hardcodedHistory_pop_wound_combat</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_wound_combat custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_wound_combat");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_wound_combat enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_wound_combat actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_wound_combat majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_wound_combat minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_wound_combat impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_wound_combat otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_wound_illness has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_wound_illness history occurrences -->
	<i1><a>hardcodedHistory_pop_wound_illness</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_wound_illness custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_wound_illness");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_wound_illness enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_wound_illness actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_wound_illness majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_wound_illness minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_wound_illness impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_wound_illness otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_wound_unspecified has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_wound_unspecified history occurrences -->
	<i1><a>hardcodedHistory_pop_wound_unspecified</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_wound_unspecified custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_wound_unspecified");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_wound_unspecified enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_wound_unspecified actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_wound_unspecified majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_wound_unspecified minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_wound_unspecified impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_wound_unspecified otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_illness_environment has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_illness_environment history occurrences -->
	<i1><a>hardcodedHistory_pop_illness_environment</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_illness_environment custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_illness_environment");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_illness_environment enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_illness_environment actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_illness_environment majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_illness_environment minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_illness_environment impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_illness_environment otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_illness_another has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_illness_another history occurrences -->
	<i1><a>hardcodedHistory_pop_illness_another</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_illness_another custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_illness_another");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_illness_another enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_illness_another actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_illness_another majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_illness_another minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_illness_another impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_illness_another otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_illness_unspecified has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_illness_unspecified history occurrences -->
	<i1><a>hardcodedHistory_pop_illness_unspecified</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_illness_unspecified custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_illness_unspecified");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_illness_unspecified enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_illness_unspecified actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_illness_unspecified majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_illness_unspecified minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_illness_unspecified impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_illness_unspecified otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_child_born_dead has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle child_born_dead history occurrences -->
	<i1><a>hardcodedHistory_child_born_dead</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_child_born_dead custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_child_born_dead");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory child_born_dead enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory child_born_dead actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory child_born_dead majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory child_born_dead minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory child_born_dead impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory child_born_dead otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_child_born_alive has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle child_born_alive history occurrences -->
	<i1><a>hardcodedHistory_child_born_alive</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_child_born_alive custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_child_born_alive");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory child_born_alive enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory child_born_alive actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory child_born_alive majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory child_born_alive minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory child_born_alive impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory child_born_alive otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_created_child_together has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle created_child_together history occurrences -->
	<i1><a>hardcodedHistory_created_child_together</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_created_child_together custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_created_child_together");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory created_child_together enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory created_child_together actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory created_child_together majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory created_child_together minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory created_child_together impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory created_child_together otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_created_child_alone has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle created_child_alone history occurrences -->
	<i1><a>hardcodedHistory_created_child_alone</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_created_child_alone custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_created_child_alone");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory created_child_alone enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory created_child_alone actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory created_child_alone majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory created_child_alone minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory created_child_alone impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory created_child_alone otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_lady_raised_child has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle lady_raised_child history occurrences -->
	<i1><a>hardcodedHistory_lady_raised_child</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_lady_raised_child custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_lady_raised_child");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory lady_raised_child enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory lady_raised_child actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory lady_raised_child majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory lady_raised_child minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory lady_raised_child impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory lady_raised_child otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_sent_on_delegation has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_sent_on_delegation history occurrences -->
	<i1><a>hardcodedHistory_pop_sent_on_delegation</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_sent_on_delegation custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_sent_on_delegation");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_sent_on_delegation enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_sent_on_delegation actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_sent_on_delegation majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_sent_on_delegation minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_sent_on_delegation impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_sent_on_delegation otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_delegation_started has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle delegation_started history occurrences -->
	<i1><a>hardcodedHistory_delegation_started</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_delegation_started custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_delegation_started");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory delegation_started enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory delegation_started actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory delegation_started majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory delegation_started minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		//custom to this historical occurrence, the delegation's kind is one of the minor adjectives:
		IFDelegation del = (IFDelegation)getAPI().getSO("delegations", inTargetID);
		if(del != null)
		{
			string kindName = getAPI().getTranslatedStrings().getDisplayStringOfName(
				IFDelegation.cDelegationTypeNames[(int)]del.getDelegationType());
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				minorAdjList[i] = minorAdjList[i].Replace("[0]", kindName);
			}
		}
		else
		{
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				if(minorAdjList[i].Contains("[0]"))
				{
					minorAdjList.RemoveAt(i);
					i--;
				}
			}
		}
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory delegation_started impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory delegation_started otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_delegation_arrived_at_community has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle delegation_arrived_at_community history occurrences -->
	<i1><a>hardcodedHistory_delegation_arrived_at_community</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_delegation_arrived_at_community custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_delegation_arrived_at_community");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory delegation_arrived_at_community enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory delegation_arrived_at_community actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory delegation_arrived_at_community majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory delegation_arrived_at_community minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		//custom to this historical occurrence, the delegation's kind is one of the minor adjectives:
		IFDelegation del = (IFDelegation)getAPI().getSO("delegations", inTargetID);
		if(del != null)
		{
			string kindName = getAPI().getTranslatedStrings().getDisplayStringOfName(
				IFDelegation.cDelegationTypeNames[(int)]del.getDelegationType());
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				minorAdjList[i] = minorAdjList[i].Replace("[0]", kindName);
			}
		}
		else
		{
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				if(minorAdjList[i].Contains("[0]"))
				{
					minorAdjList.RemoveAt(i);
					i--;
				}
			}
		}
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory delegation_arrived_at_community impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory delegation_arrived_at_community otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_delegation_returned has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle delegation_returned history occurrences -->
	<i1><a>hardcodedHistory_delegation_returned</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_delegation_returned custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_delegation_returned");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory delegation_returned enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory delegation_returned actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory delegation_returned majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory delegation_returned minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		//custom to this historical occurrence, the delegation's kind is one of the minor adjectives:
		IFDelegation del = (IFDelegation)getAPI().getSO("delegations", inTargetID);
		if(del != null)
		{
			string kindName = getAPI().getTranslatedStrings().getDisplayStringOfName(
				IFDelegation.cDelegationTypeNames[(int)]del.getDelegationType());
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				minorAdjList[i] = minorAdjList[i].Replace("[0]", kindName);
			}
		}
		else
		{
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				if(minorAdjList[i].Contains("[0]"))
				{
					minorAdjList.RemoveAt(i);
					i--;
				}
			}
		}
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory delegation_returned impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory delegation_returned otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_delegation_lost has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle delegation_lost history occurrences -->
	<i1><a>hardcodedHistory_delegation_lost</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_delegation_lost custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_delegation_lost");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory delegation_lost enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory delegation_lost actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory delegation_lost majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory delegation_lost minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		//custom to this historical occurrence, the delegation's kind is one of the minor adjectives:
		IFDelegation del = (IFDelegation)getAPI().getSO("delegations", inTargetID);
		if(del != null)
		{
			string kindName = getAPI().getTranslatedStrings().getDisplayStringOfName(
				IFDelegation.cDelegationTypeNames[(int)]del.getDelegationType());
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				minorAdjList[i] = minorAdjList[i].Replace("[0]", kindName);
			}
		}
		else
		{
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				if(minorAdjList[i].Contains("[0]"))
				{
					minorAdjList.RemoveAt(i);
					i--;
				}
			}
		}
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory delegation_lost impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory delegation_lost otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_playerdelegation_violent_nocombat_leave has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle playerdelegation_violent_nocombat_leave history occurrences -->
	<i1><a>hardcodedHistory_playerdelegation_violent_nocombat_leave</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_playerdelegation_violent_nocombat_leave custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_playerdelegation_violent_nocombat_leave");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory playerdelegation_violent_nocombat_leave enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory playerdelegation_violent_nocombat_leave actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory playerdelegation_violent_nocombat_leave majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory playerdelegation_violent_nocombat_leave minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory playerdelegation_violent_nocombat_leave impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory playerdelegation_violent_nocombat_leave otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_playerdelegation_violent_siege_end has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle playerdelegation_violent_siege_end history occurrences -->
	<i1><a>hardcodedHistory_playerdelegation_violent_siege_end</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_playerdelegation_violent_siege_end custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_playerdelegation_violent_siege_end");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory playerdelegation_violent_siege_end enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory playerdelegation_violent_siege_end actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory playerdelegation_violent_siege_end majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory playerdelegation_violent_siege_end minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory playerdelegation_violent_siege_end impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory playerdelegation_violent_siege_end otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_playerdelegation_diplomacy_gift has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle playerdelegation_diplomacy_gift history occurrences -->
	<i1><a>hardcodedHistory_playerdelegation_diplomacy_gift</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_playerdelegation_diplomacy_gift custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_playerdelegation_diplomacy_gift");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory playerdelegation_diplomacy_gift enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory playerdelegation_diplomacy_gift actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory playerdelegation_diplomacy_gift majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory playerdelegation_diplomacy_gift minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory playerdelegation_diplomacy_gift impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory playerdelegation_diplomacy_gift otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_playerdelegation_diplomacy_leave has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle playerdelegation_diplomacy_leave history occurrences -->
	<i1><a>hardcodedHistory_playerdelegation_diplomacy_leave</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_playerdelegation_diplomacy_leave custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_playerdelegation_diplomacy_leave");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory playerdelegation_diplomacy_leave enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory playerdelegation_diplomacy_leave actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory playerdelegation_diplomacy_leave majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory playerdelegation_diplomacy_leave minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory playerdelegation_diplomacy_leave impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory playerdelegation_diplomacy_leave otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_playerdelegation_trade_success has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle playerdelegation_trade_success history occurrences -->
	<i1><a>hardcodedHistory_playerdelegation_trade_success</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_playerdelegation_trade_success custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_playerdelegation_trade_success");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory playerdelegation_trade_success enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory playerdelegation_trade_success actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory playerdelegation_trade_success majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory playerdelegation_trade_success minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory playerdelegation_trade_success impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory playerdelegation_trade_success otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_playerdelegation_trade_failure has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle playerdelegation_trade_failure history occurrences -->
	<i1><a>hardcodedHistory_playerdelegation_trade_failure</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_playerdelegation_trade_failure custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_playerdelegation_trade_failure");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory playerdelegation_trade_failure enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory playerdelegation_trade_failure actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory playerdelegation_trade_failure majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory playerdelegation_trade_failure minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory playerdelegation_trade_failure impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory playerdelegation_trade_failure otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_playerdelegation_trade_leave has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle playerdelegation_trade_leave history occurrences -->
	<i1><a>hardcodedHistory_playerdelegation_trade_leave</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_playerdelegation_trade_leave custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_playerdelegation_trade_leave");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory playerdelegation_trade_leave enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory playerdelegation_trade_leave actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory playerdelegation_trade_leave majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory playerdelegation_trade_leave minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory playerdelegation_trade_leave impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory playerdelegation_trade_leave otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_playerdelegation_emigration_join has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle playerdelegation_emigration_join history occurrences -->
	<i1><a>hardcodedHistory_playerdelegation_emigration_join</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_playerdelegation_emigration_join custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_playerdelegation_emigration_join");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory playerdelegation_emigration_join enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory playerdelegation_emigration_join actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory playerdelegation_emigration_join majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory playerdelegation_emigration_join minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory playerdelegation_emigration_join impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory playerdelegation_emigration_join otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_playerdelegation_emigration_wander has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle playerdelegation_emigration_wander history occurrences -->
	<i1><a>hardcodedHistory_playerdelegation_emigration_wander</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_playerdelegation_emigration_wander custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_playerdelegation_emigration_wander");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory playerdelegation_emigration_wander enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory playerdelegation_emigration_wander actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory playerdelegation_emigration_wander majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory playerdelegation_emigration_wander minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory playerdelegation_emigration_wander impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory playerdelegation_emigration_wander otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_playerdelegation_emigration_return has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle playerdelegation_emigration_return history occurrences -->
	<i1><a>hardcodedHistory_playerdelegation_emigration_return</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_playerdelegation_emigration_return custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_playerdelegation_emigration_return");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory playerdelegation_emigration_return enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory playerdelegation_emigration_return actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory playerdelegation_emigration_return majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory playerdelegation_emigration_return minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory playerdelegation_emigration_return impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory playerdelegation_emigration_return otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_change_loyaltyloss has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_change_loyaltyloss history occurrences -->
	<i1><a>hardcodedHistory_pop_change_loyaltyloss</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_change_loyaltyloss custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_change_loyaltyloss");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_change_loyaltyloss enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_change_loyaltyloss actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_change_loyaltyloss majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_change_loyaltyloss minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_change_loyaltyloss impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_change_loyaltyloss otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_change_loyaltygain has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_change_loyaltygain history occurrences -->
	<i1><a>hardcodedHistory_pop_change_loyaltygain</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_change_loyaltygain custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_change_loyaltygain");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_change_loyaltygain enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_change_loyaltygain actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_change_loyaltygain majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_change_loyaltygain minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_change_loyaltygain impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_change_loyaltygain otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_abducted has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_abducted history occurrences -->
	<i1><a>hardcodedHistory_pop_abducted</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_abducted custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_abducted");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_abducted enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_abducted actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_abducted majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_abducted minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_abducted impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_abducted otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_became_city_leader has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_became_city_leader history occurrences -->
	<i1><a>hardcodedHistory_pop_became_city_leader</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_became_city_leader custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_became_city_leader");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_became_city_leader enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_became_city_leader actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_became_city_leader majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_became_city_leader minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_became_city_leader impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_became_city_leader otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_nolonger_city_leader has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_nolonger_city_leader history occurrences -->
	<i1><a>hardcodedHistory_pop_nolonger_city_leader</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_nolonger_city_leader custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_nolonger_city_leader");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_nolonger_city_leader enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_nolonger_city_leader actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_nolonger_city_leader majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_nolonger_city_leader minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_nolonger_city_leader impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_nolonger_city_leader otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_became_race_leader has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_became_race_leader history occurrences -->
	<i1><a>hardcodedHistory_pop_became_race_leader</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_became_race_leader custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_became_race_leader");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_became_race_leader enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_became_race_leader actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_became_race_leader majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_became_race_leader minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		//custom to this historical occurrence, the race's kind is one of the minor adjectives:
		IFPop pop = (IFPop)getAPI().getSO("pops", inTargetID);
		if(pop != null)
		{
			string adjective = pop.getRace().getAdjective();
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				minorAdjList[i] = minorAdjList[i].Replace("[0]", adjective);
			}
		}
		else
		{
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				if(minorAdjList[i].Contains("[0]"))
				{
					minorAdjList.RemoveAt(i);
					i--;
				}
			}
		}
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_became_race_leader impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_became_race_leader otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_nolonger_race_leader has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_nolonger_race_leader history occurrences -->
	<i1><a>hardcodedHistory_pop_nolonger_race_leader</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_nolonger_race_leader custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_nolonger_race_leader");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_nolonger_race_leader enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_nolonger_race_leader actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_nolonger_race_leader majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_nolonger_race_leader minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		//custom to this historical occurrence, the race's kind is one of the minor adjectives:
		IFPop pop = (IFPop)getAPI().getSO("pops", inTargetID);
		if(pop != null)
		{
			string adjective = pop.getRace().getAdjective();
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				minorAdjList[i] = minorAdjList[i].Replace("[0]", adjective);
			}
		}
		else
		{
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				if(minorAdjList[i].Contains("[0]"))
				{
					minorAdjList.RemoveAt(i);
					i--;
				}
			}
		}
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_nolonger_race_leader impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_nolonger_race_leader otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_became_industry_leader has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_became_industry_leader history occurrences -->
	<i1><a>hardcodedHistory_pop_became_industry_leader</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_became_industry_leader custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_became_industry_leader");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_became_industry_leader enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_became_industry_leader actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_became_industry_leader majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_became_industry_leader minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		//custom to this historical occurrence, the industry's name is one of the minor adjectives:
		IFPop pop = (IFPop)getAPI().getSO("pops", inTargetID);
		if(pop != null)
		{
			string industryName = pop.getCommunity().getLeaderCollection().getIndustryLedByPop(pop).getDisplayName();
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				minorAdjList[i] = minorAdjList[i].Replace("[0]", industryName);
			}
		}
		else
		{
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				if(minorAdjList[i].Contains("[0]"))
				{
					minorAdjList.RemoveAt(i);
					i--;
				}
			}
		}
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_became_industry_leader impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_became_industry_leader otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_pop_nolonger_industry_leader has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle pop_nolonger_industry_leader history occurrences -->
	<i1><a>hardcodedHistory_pop_nolonger_industry_leader</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_pop_nolonger_industry_leader custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_pop_nolonger_industry_leader");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory pop_nolonger_industry_leader enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory pop_nolonger_industry_leader actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory pop_nolonger_industry_leader majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory pop_nolonger_industry_leader minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		//custom to this historical occurrence, the industry's name is one of the minor adjectives:
		IFPop pop = (IFPop)getAPI().getSO("pops", inTargetID);
		if(pop != null)
		{
			string industryName = pop.getCommunity().getLeaderCollection().getIndustryLedByPop(pop).getDisplayName();
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				minorAdjList[i] = minorAdjList[i].Replace("[0]", industryName);
			}
		}
		else
		{
			for(int i = 0; i &lt; minorAdjList.Count; i++)
			{
				if(minorAdjList[i].Contains("[0]"))
				{
					minorAdjList.RemoveAt(i);
					i--;
				}
			}
		}
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory pop_nolonger_industry_leader impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory pop_nolonger_industry_leader otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_rebels_succeed has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle rebels_succeed history occurrences -->
	<i1><a>hardcodedHistory_rebels_succeed</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_rebels_succeed custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_rebels_succeed");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory rebels_succeed enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory rebels_succeed actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory rebels_succeed majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory rebels_succeed minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory rebels_succeed impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory rebels_succeed otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_rebels_failure has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle rebels_failure history occurrences -->
	<i1><a>hardcodedHistory_rebels_failure</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_rebels_failure custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_rebels_failure");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory rebels_failure enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory rebels_failure actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory rebels_failure majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory rebels_failure minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory rebels_failure impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory rebels_failure otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_became_servant has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle became_servant history occurrences -->
	<i1><a>hardcodedHistory_became_servant</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_became_servant custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_became_servant");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory became_servant enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory became_servant actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory became_servant majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory became_servant minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory became_servant impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory became_servant otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_nolonger_servant has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle nolonger_servant history occurrences -->
	<i1><a>hardcodedHistory_nolonger_servant</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_nolonger_servant custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_nolonger_servant");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory nolonger_servant enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory nolonger_servant actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory nolonger_servant majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory nolonger_servant minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory nolonger_servant impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory nolonger_servant otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_became_master has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle became_master history occurrences -->
	<i1><a>hardcodedHistory_became_master</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_became_master custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_became_master");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory became_master enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory became_master actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory became_master majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory became_master minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory became_master impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory became_master otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	<!-- hardcodedHistory_nolonger_master has the same inputs as other hardcodedHistory_ (see comment before mHardcodedHistory).  It has no outputs. -->
	<!-- this script is called by mHardcodedHistory to handle nolonger_master history occurrences -->
	<i1><a>hardcodedHistory_nolonger_master</a>
	<b>
	  //input count and type check:
	  var customScripts = getAPI().getCustomScripts();
	  if(!customScripts.runCustomScript("customScriptInputCheck", new List&lt;object&gt;() { inArguments, new List&lt;Type&gt;()
		  {typeof(IFCommunity), typeof(Int64), typeof(IFHistoryActor.eActorKind), typeof(UInt64), typeof(IFHistoryTarget.eTargetKind), typeof(UInt64), typeof(Int64)}
	    }, out _))
	  {
		  throw new ArgumentException("hardcodedHistory_nolonger_master custom script received invalid arguments");
		  return null;
	  }
	  
	  var customConsts = getAPI().getCustomConsts();
	  
	  IFCommunity inCommunityToHoldHistory = (IFCommunity)inArguments[0];
	  Int64 inDate = (Int64)inArguments[1];
	  IFHistoryActor.eActorKind inActorKind = (IFHistoryActor.eActorKind)inArguments[2];
	  UInt64 inActorID = (UInt64)inArguments[3];
	  IFHistoryTarget.eTargetKind inDate = (IFHistoryTarget.eTargetKind)inArguments[4];
	  UInt64 inTargetID = (UInt64)inArguments[5];
	  Int64 inImpactOverride = (Int64)inArguments[6];
	  
	  if(inCommunityToHoldHistory == null)
	  {
		throw new ArgumentException("inCommunityToHoldHistory was null for hardcodedHistory_nolonger_master");
	  }
	  
	  //here, create the historical occurrence:
	  Int64 enable_if_not_zero = customConsts.getIntConst("mHardcodedHistory nolonger_master enable_if_not_zero", out bool success);
	  if(!success) enable_if_not_zero = 0;
	  if(enable_if_not_zero != 0)
	  {
		string actionText = customConsts.getStringConst("mHardcodedHistory nolonger_master actiontext before_replace_text", out success);
		if(!success) actionText = "";
		
		string majorAdj = customConsts.getStringConst("mHardcodedHistory nolonger_master majoradj before_replace_text", out success);
		if(!success) majorAdj = "";
		
		string minorAdjCommas = customConsts.getStringConst("mHardcodedHistory nolonger_master minoradjlist before_replace_text", out success);
		if(!success) minorAdjCommas = "";
		List&lt;string&gt; minorAdjList = new List&lt;string&gt;(minorAdjCommas.Split(','));
		
		Int64 impact = customConsts.getIntConst("mHardcodedHistory nolonger_master impact value", out success);
		if(!success) impact = 0;
		if(inImpactOverride != -1L)
		{
			impact = inImpactOverride;
		}
		
		string otherImpacts = customConsts.getStringConst("mHardcodedHistory nolonger_master otherImpacts before_replace_text", out success);
		List&lt;string&gt; otherImpactsList = new List&lt;string&gt;(otherImpacts.Split(','));
		Dictionary&lt;string, int&gt; otherImpactsDict = new Dictionary&lt;string, int&gt;();
		foreach(string pair in otherImpactsList)
		{
			//the | character is used to separate the impact adjective and the value:
			List&lt;string&gt; pairStrings = new List&lt;string&gt;(pair.Split('|'));
			if(pairStrings.Count == 2)
			{
				Int64 val = 0;
				if(Int64.TryParse(pairStrings[1], out val))
				{
					otherImpactsDict.Add(pairStrings[0], (int)val);
				}
			}
		}
		
		inCommunityToHoldHistory.getHistory().add(getAPI().createNewHistoricalOccurrenceOnDate(inDate, inActorKind, inActorID, actionText, majorAdj, minorAdjList, inTargetKind, inTargetID, impact, otherImpactsDict));
	  }
	
	  return null;
	</b>
	</i1>
	
	</mCustomScriptsList>
  </customscripts>
  
  
</core_data>